(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/*global jQuery */
/*jshint browser:true */
'use strict';

(function ($) {

  "use strict";

  $.fn.fitVids = function (options) {
    var settings = {
      customSelector: null
    };

    if (!document.getElementById('fit-vids-style')) {
      // appendStyles: https://github.com/toddmotto/fluidvids/blob/master/dist/fluidvids.js
      var head = document.head || document.getElementsByTagName('head')[0];
      var css = '.fluid-width-video-wrapper{width:100%;position:relative;padding:0;}.fluid-width-video-wrapper iframe,.fluid-width-video-wrapper object,.fluid-width-video-wrapper embed {position:absolute;top:0;left:0;width:100%;height:100%;}';
      var div = document.createElement('div');
      div.innerHTML = '<p>x</p><style id="fit-vids-style">' + css + '</style>';
      head.appendChild(div.childNodes[1]);
    }

    if (options) {
      $.extend(settings, options);
    }

    return this.each(function () {
      var selectors = ["iframe[src*='player.vimeo.com']", "iframe[src*='youtube.com']", "iframe[src*='youtube-nocookie.com']", "iframe[src*='kickstarter.com'][src*='video.html']", "object", "embed"];

      if (settings.customSelector) {
        selectors.push(settings.customSelector);
      }

      var $allVideos = $(this).find(selectors.join(','));
      $allVideos = $allVideos.not("object object"); // SwfObj conflict patch

      $allVideos.each(function () {
        var $this = $(this);
        if (this.tagName.toLowerCase() === 'embed' && $this.parent('object').length || $this.parent('.fluid-width-video-wrapper').length) {
          return;
        }
        var height = this.tagName.toLowerCase() === 'object' || $this.attr('height') && !isNaN(parseInt($this.attr('height'), 10)) ? parseInt($this.attr('height'), 10) : $this.height(),
            width = !isNaN(parseInt($this.attr('width'), 10)) ? parseInt($this.attr('width'), 10) : $this.width(),
            aspectRatio = height / width;
        if (!$this.attr('id')) {
          var videoID = 'fitvid' + Math.floor(Math.random() * 999999);
          $this.attr('id', videoID);
        }
        $this.wrap('<div class="fluid-width-video-wrapper"></div>').parent('.fluid-width-video-wrapper').css('padding-top', aspectRatio * 100 + "%");
        $this.removeAttr('height').removeAttr('width');
      });
    });
  };
  // Works with either jQuery or Zepto
})(window.jQuery || window.Zepto);
/*!
* FitVids 1.1
*
* Copyright 2013, Chris Coyier - http://css-tricks.com + Dave Rupert - http://daverupert.com
* Credit to Thierry Koblentz - http://www.alistapart.com/articles/creating-intrinsic-ratios-for-video/
* Released under the WTFPL license - http://sam.zoy.org/wtfpl/
*
*/

},{}],2:[function(require,module,exports){
/*
 * jPlayer Plugin for jQuery JavaScript Library
 * http://www.jplayer.org
 *
 * Copyright (c) 2009 - 2014 Happyworm Ltd
 * Licensed under the MIT license.
 * http://opensource.org/licenses/MIT
 *
 * Author: Mark J Panaghiston
 * Version: 2.9.2
 * Date: 14th December 2014
 */"use strict";(function($){ // Adapted from jquery.ui.widget.js (1.8.7): $.widget.bridge - Tweaked $.data(this,XYZ) to $(this).data(XYZ) for Zepto
$.fn.jPlayer = function(options){var name="jPlayer";var isMethodCall=typeof options === "string",args=Array.prototype.slice.call(arguments,1),returnValue=this; // allow multiple hashes to be passed on init
options = !isMethodCall && args.length?$.extend.apply(null,[true,options].concat(args)):options; // prevent calls to internal methods
if(isMethodCall && options.charAt(0) === "_"){return returnValue;}if(isMethodCall){this.each(function(){var instance=$(this).data(name),methodValue=instance && $.isFunction(instance[options])?instance[options].apply(instance,args):instance;if(methodValue !== instance && methodValue !== undefined){returnValue = methodValue;return false;}});}else {this.each(function(){var instance=$(this).data(name);if(instance){ // instance.option( options || {} )._init(); // Orig jquery.ui.widget.js code: Not recommend for jPlayer. ie., Applying new options to an existing instance (via the jPlayer constructor) and performing the _init(). The _init() is what concerns me. It would leave a lot of event handlers acting on jPlayer instance and the interface.
instance.option(options || {}); // The new constructor only changes the options. Changing options only has basic support atm.
}else {$(this).data(name,new $.jPlayer(options,this));}});}return returnValue;};$.jPlayer = function(options,element){ // allow instantiation without initializing for simple inheritance
if(arguments.length){this.element = $(element);this.options = $.extend(true,{},this.options,options);var self=this;this.element.bind("remove.jPlayer",function(){self.destroy();});this._init();}}; // End of: (Adapted from jquery.ui.widget.js (1.8.7))
// Zepto is missing one of the animation methods.
if(typeof $.fn.stop !== 'function'){$.fn.stop = function(){};} // Emulated HTML5 methods and properties
$.jPlayer.emulateMethods = "load play pause";$.jPlayer.emulateStatus = "src readyState networkState currentTime duration paused ended playbackRate";$.jPlayer.emulateOptions = "muted volume"; // Reserved event names generated by jPlayer that are not part of the HTML5 Media element spec
$.jPlayer.reservedEvent = "ready flashreset resize repeat error warning"; // Events generated by jPlayer
$.jPlayer.event = {};$.each(['ready','setmedia', // Fires when the media is set
'flashreset', // Similar to the ready event if the Flash solution is set to display:none and then shown again or if it's reloaded for another reason by the browser. For example, using CSS position:fixed on Firefox for the full screen feature.
'resize', // Occurs when the size changes through a full/restore screen operation or if the size/sizeFull options are changed.
'repeat', // Occurs when the repeat status changes. Usually through clicks on the repeat button of the interface.
'click', // Occurs when the user clicks on one of the following: poster image, html video, flash video.
'error', // Event error code in event.jPlayer.error.type. See $.jPlayer.error
'warning', // Event warning code in event.jPlayer.warning.type. See $.jPlayer.warning
// Other events match HTML5 spec.
'loadstart','progress','suspend','abort','emptied','stalled','play','pause','loadedmetadata','loadeddata','waiting','playing','canplay','canplaythrough','seeking','seeked','timeupdate','ended','ratechange','durationchange','volumechange'],function(){$.jPlayer.event[this] = 'jPlayer_' + this;});$.jPlayer.htmlEvent = [ // These HTML events are bubbled through to the jPlayer event, without any internal action.
"loadstart", // "progress", // jPlayer uses internally before bubbling.
// "suspend", // jPlayer uses internally before bubbling.
"abort", // "error", // jPlayer uses internally before bubbling.
"emptied","stalled", // "play", // jPlayer uses internally before bubbling.
// "pause", // jPlayer uses internally before bubbling.
"loadedmetadata", // "loadeddata", // jPlayer uses internally before bubbling.
// "waiting", // jPlayer uses internally before bubbling.
// "playing", // jPlayer uses internally before bubbling.
"canplay","canplaythrough" // "seeking", // jPlayer uses internally before bubbling.
// "seeked", // jPlayer uses internally before bubbling.
// "timeupdate", // jPlayer uses internally before bubbling.
// "ended", // jPlayer uses internally before bubbling.
// "ratechange" // jPlayer uses internally before bubbling.
// "durationchange" // jPlayer uses internally before bubbling.
// "volumechange" // jPlayer uses internally before bubbling.
];$.jPlayer.pause = function(){$.jPlayer.prototype.destroyRemoved();$.each($.jPlayer.prototype.instances,function(i,element){if(element.data("jPlayer").status.srcSet){ // Check that media is set otherwise would cause error event.
element.jPlayer("pause");}});}; // Default for jPlayer option.timeFormat
$.jPlayer.timeFormat = {showHour:false,showMin:true,showSec:true,padHour:false,padMin:true,padSec:true,sepHour:":",sepMin:":",sepSec:""};var ConvertTime=function ConvertTime(){this.init();};ConvertTime.prototype = {init:function init(){this.options = {timeFormat:$.jPlayer.timeFormat};},time:function time(s){ // function used on jPlayer.prototype._convertTime to enable per instance options.
s = s && typeof s === 'number'?s:0;var myTime=new Date(s * 1000),hour=myTime.getUTCHours(),min=this.options.timeFormat.showHour?myTime.getUTCMinutes():myTime.getUTCMinutes() + hour * 60,sec=this.options.timeFormat.showMin?myTime.getUTCSeconds():myTime.getUTCSeconds() + min * 60,strHour=this.options.timeFormat.padHour && hour < 10?"0" + hour:hour,strMin=this.options.timeFormat.padMin && min < 10?"0" + min:min,strSec=this.options.timeFormat.padSec && sec < 10?"0" + sec:sec,strTime="";strTime += this.options.timeFormat.showHour?strHour + this.options.timeFormat.sepHour:"";strTime += this.options.timeFormat.showMin?strMin + this.options.timeFormat.sepMin:"";strTime += this.options.timeFormat.showSec?strSec + this.options.timeFormat.sepSec:"";return strTime;}};var myConvertTime=new ConvertTime();$.jPlayer.convertTime = function(s){return myConvertTime.time(s);}; // Adapting jQuery 1.4.4 code for jQuery.browser. Required since jQuery 1.3.2 does not detect Chrome as webkit.
$.jPlayer.uaBrowser = function(userAgent){var ua=userAgent.toLowerCase(); // Useragent RegExp
var rwebkit=/(webkit)[ \/]([\w.]+)/;var ropera=/(opera)(?:.*version)?[ \/]([\w.]+)/;var rmsie=/(msie) ([\w.]+)/;var rmozilla=/(mozilla)(?:.*? rv:([\w.]+))?/;var match=rwebkit.exec(ua) || ropera.exec(ua) || rmsie.exec(ua) || ua.indexOf("compatible") < 0 && rmozilla.exec(ua) || [];return {browser:match[1] || "",version:match[2] || "0"};}; // Platform sniffer for detecting mobile devices
$.jPlayer.uaPlatform = function(userAgent){var ua=userAgent.toLowerCase(); // Useragent RegExp
var rplatform=/(ipad|iphone|ipod|android|blackberry|playbook|windows ce|webos)/;var rtablet=/(ipad|playbook)/;var randroid=/(android)/;var rmobile=/(mobile)/;var platform=rplatform.exec(ua) || [];var tablet=rtablet.exec(ua) || !rmobile.exec(ua) && randroid.exec(ua) || [];if(platform[1]){platform[1] = platform[1].replace(/\s/g,"_"); // Change whitespace to underscore. Enables dot notation.
}return {platform:platform[1] || "",tablet:tablet[1] || ""};};$.jPlayer.browser = {};$.jPlayer.platform = {};var browserMatch=$.jPlayer.uaBrowser(navigator.userAgent);if(browserMatch.browser){$.jPlayer.browser[browserMatch.browser] = true;$.jPlayer.browser.version = browserMatch.version;}var platformMatch=$.jPlayer.uaPlatform(navigator.userAgent);if(platformMatch.platform){$.jPlayer.platform[platformMatch.platform] = true;$.jPlayer.platform.mobile = !platformMatch.tablet;$.jPlayer.platform.tablet = !!platformMatch.tablet;} // Internet Explorer (IE) Browser Document Mode Sniffer. Based on code at:
// http://msdn.microsoft.com/en-us/library/cc288325%28v=vs.85%29.aspx#GetMode
$.jPlayer.getDocMode = function(){var docMode;if($.jPlayer.browser.msie){if(document.documentMode){ // IE8 or later
docMode = document.documentMode;}else { // IE 5-7
docMode = 5; // Assume quirks mode unless proven otherwise
if(document.compatMode){if(document.compatMode === "CSS1Compat"){docMode = 7; // standards mode
}}}}return docMode;};$.jPlayer.browser.documentMode = $.jPlayer.getDocMode();$.jPlayer.nativeFeatures = {init:function init(){ /* Fullscreen function naming influenced by W3C naming.
			 * No support for: Mozilla Proposal: https://wiki.mozilla.org/Gecko:FullScreenAPI
			 */var d=document,v=d.createElement('video'),spec={ // http://www.w3.org/TR/fullscreen/
w3c:['fullscreenEnabled','fullscreenElement','requestFullscreen','exitFullscreen','fullscreenchange','fullscreenerror'], // https://developer.mozilla.org/en-US/docs/DOM/Using_fullscreen_mode
moz:['mozFullScreenEnabled','mozFullScreenElement','mozRequestFullScreen','mozCancelFullScreen','mozfullscreenchange','mozfullscreenerror'], // http://developer.apple.com/library/safari/#documentation/WebKit/Reference/ElementClassRef/Element/Element.html
// http://developer.apple.com/library/safari/#documentation/UserExperience/Reference/DocumentAdditionsReference/DocumentAdditions/DocumentAdditions.html
webkit:['','webkitCurrentFullScreenElement','webkitRequestFullScreen','webkitCancelFullScreen','webkitfullscreenchange',''], // http://developer.apple.com/library/safari/#documentation/AudioVideo/Reference/HTMLVideoElementClassReference/HTMLVideoElement/HTMLVideoElement.html
// https://developer.apple.com/library/safari/samplecode/HTML5VideoEventFlow/Listings/events_js.html#//apple_ref/doc/uid/DTS40010085-events_js-DontLinkElementID_5
// Events: 'webkitbeginfullscreen' and 'webkitendfullscreen'
webkitVideo:['webkitSupportsFullscreen','webkitDisplayingFullscreen','webkitEnterFullscreen','webkitExitFullscreen','',''],ms:['','msFullscreenElement','msRequestFullscreen','msExitFullscreen','MSFullscreenChange','MSFullscreenError']},specOrder=['w3c','moz','webkit','webkitVideo','ms'],fs,i,il;this.fullscreen = fs = {support:{w3c:!!d[spec.w3c[0]],moz:!!d[spec.moz[0]],webkit:typeof d[spec.webkit[3]] === 'function',webkitVideo:typeof v[spec.webkitVideo[2]] === 'function',ms:typeof v[spec.ms[2]] === 'function'},used:{}}; // Store the name of the spec being used and as a handy boolean.
for(i = 0,il = specOrder.length;i < il;i++) {var n=specOrder[i];if(fs.support[n]){fs.spec = n;fs.used[n] = true;break;}}if(fs.spec){var s=spec[fs.spec];fs.api = {fullscreenEnabled:true,fullscreenElement:function fullscreenElement(elem){elem = elem?elem:d; // Video element required for webkitVideo
return elem[s[1]];},requestFullscreen:function requestFullscreen(elem){return elem[s[2]](); // Chrome and Opera want parameter (Element.ALLOW_KEYBOARD_INPUT) but Safari fails if flag used.
},exitFullscreen:function exitFullscreen(elem){elem = elem?elem:d; // Video element required for webkitVideo
return elem[s[3]]();}};fs.event = {fullscreenchange:s[4],fullscreenerror:s[5]};}else {fs.api = {fullscreenEnabled:false,fullscreenElement:function fullscreenElement(){return null;},requestFullscreen:function requestFullscreen(){},exitFullscreen:function exitFullscreen(){}};fs.event = {};}}};$.jPlayer.nativeFeatures.init(); // The keyboard control system.
// The current jPlayer instance in focus.
$.jPlayer.focus = null; // The list of element node names to ignore with key controls.
$.jPlayer.keyIgnoreElementNames = "A INPUT TEXTAREA SELECT BUTTON"; // The function that deals with key presses.
var keyBindings=function keyBindings(event){var f=$.jPlayer.focus,ignoreKey; // A jPlayer instance must be in focus. ie., keyEnabled and the last one played.
if(f){ // What generated the key press?
$.each($.jPlayer.keyIgnoreElementNames.split(/\s+/g),function(i,name){ // The strings should already be uppercase.
if(event.target.nodeName.toUpperCase() === name.toUpperCase()){ignoreKey = true;return false; // exit each.
}});if(!ignoreKey){ // See if the key pressed matches any of the bindings.
$.each(f.options.keyBindings,function(action,binding){ // The binding could be a null when the default has been disabled. ie., 1st clause in if()
if(binding && $.isFunction(binding.fn) && (typeof binding.key === 'number' && event.which === binding.key || typeof binding.key === 'string' && event.key === binding.key)){event.preventDefault(); // Key being used by jPlayer, so prevent default operation.
binding.fn(f);return false; // exit each.
}});}}};$.jPlayer.keys = function(en){var event="keydown.jPlayer"; // Remove any binding, just in case enabled more than once.
$(document.documentElement).unbind(event);if(en){$(document.documentElement).bind(event,keyBindings);}}; // Enable the global key control handler ready for any jPlayer instance with the keyEnabled option enabled.
$.jPlayer.keys(true);$.jPlayer.prototype = {count:0, // Static Variable: Change it via prototype.
version:{ // Static Object
script:"2.9.2",needFlash:"2.9.0",flash:"unknown"},options:{ // Instanced in $.jPlayer() constructor
swfPath:"js", // Path to jquery.jplayer.swf. Can be relative, absolute or server root relative.
solution:"html, flash", // Valid solutions: html, flash, aurora. Order defines priority. 1st is highest,
supplied:"mp3", // Defines which formats jPlayer will try and support and the priority by the order. 1st is highest,
auroraFormats:"wav", // List the aurora.js codecs being loaded externally. Its core supports "wav". Specify format in jPlayer context. EG., The aac.js codec gives the "m4a" format.
preload:'metadata', // HTML5 Spec values: none, metadata, auto.
volume:0.8, // The volume. Number 0 to 1.
muted:false,remainingDuration:false, // When true, the remaining time is shown in the duration GUI element.
toggleDuration:false, // When true, clicks on the duration toggle between the duration and remaining display.
captureDuration:true, // When true, clicks on the duration are captured and no longer propagate up the DOM.
playbackRate:1,defaultPlaybackRate:1,minPlaybackRate:0.5,maxPlaybackRate:4,wmode:"opaque", // Valid wmode: window, transparent, opaque, direct, gpu.
backgroundColor:"#000000", // To define the jPlayer div and Flash background color.
cssSelectorAncestor:"#jp_container_1",cssSelector:{ // * denotes properties that should only be required when video media type required. _cssSelector() would require changes to enable splitting these into Audio and Video defaults.
videoPlay:".jp-video-play", // *
play:".jp-play",pause:".jp-pause",stop:".jp-stop",seekBar:".jp-seek-bar",playBar:".jp-play-bar",mute:".jp-mute",unmute:".jp-unmute",volumeBar:".jp-volume-bar",volumeBarValue:".jp-volume-bar-value",volumeMax:".jp-volume-max",playbackRateBar:".jp-playback-rate-bar",playbackRateBarValue:".jp-playback-rate-bar-value",currentTime:".jp-current-time",duration:".jp-duration",title:".jp-title",fullScreen:".jp-full-screen", // *
restoreScreen:".jp-restore-screen", // *
repeat:".jp-repeat",repeatOff:".jp-repeat-off",gui:".jp-gui", // The interface used with autohide feature.
noSolution:".jp-no-solution" // For error feedback when jPlayer cannot find a solution.
},stateClass:{ // Classes added to the cssSelectorAncestor to indicate the state.
playing:"jp-state-playing",seeking:"jp-state-seeking",muted:"jp-state-muted",looped:"jp-state-looped",fullScreen:"jp-state-full-screen",noVolume:"jp-state-no-volume"},useStateClassSkin:false, // A state class skin relies on the state classes to change the visual appearance. The single control toggles the effect, for example: play then pause, mute then unmute.
autoBlur:true, // GUI control handlers will drop focus after clicks.
smoothPlayBar:false, // Smooths the play bar transitions, which affects clicks and short media with big changes per second.
fullScreen:false, // Native Full Screen
fullWindow:false,autohide:{restored:false, // Controls the interface autohide feature.
full:true, // Controls the interface autohide feature.
fadeIn:200, // Milliseconds. The period of the fadeIn anim.
fadeOut:600, // Milliseconds. The period of the fadeOut anim.
hold:1000 // Milliseconds. The period of the pause before autohide beings.
},loop:false,repeat:function repeat(event){ // The default jPlayer repeat event handler
if(event.jPlayer.options.loop){$(this).unbind(".jPlayerRepeat").bind($.jPlayer.event.ended + ".jPlayer.jPlayerRepeat",function(){$(this).jPlayer("play");});}else {$(this).unbind(".jPlayerRepeat");}},nativeVideoControls:{ // Works well on standard browsers.
// Phone and tablet browsers can have problems with the controls disappearing.
},noFullWindow:{msie:/msie [0-6]\./,ipad:/ipad.*?os [0-4]\./,iphone:/iphone/,ipod:/ipod/,android_pad:/android [0-3]\.(?!.*?mobile)/,android_phone:/(?=.*android)(?!.*chrome)(?=.*mobile)/,blackberry:/blackberry/,windows_ce:/windows ce/,iemobile:/iemobile/,webos:/webos/},noVolume:{ipad:/ipad/,iphone:/iphone/,ipod:/ipod/,android_pad:/android(?!.*?mobile)/,android_phone:/android.*?mobile/,blackberry:/blackberry/,windows_ce:/windows ce/,iemobile:/iemobile/,webos:/webos/,playbook:/playbook/},timeFormat:{ // Specific time format for this instance. The supported options are defined in $.jPlayer.timeFormat
// For the undefined options we use the default from $.jPlayer.timeFormat
},keyEnabled:false, // Enables keyboard controls.
audioFullScreen:false, // Enables keyboard controls to enter full screen with audio media.
keyBindings:{ // The key control object, defining the key codes and the functions to execute.
// The parameter, f = $.jPlayer.focus, will be checked truethy before attempting to call any of these functions.
// Properties may be added to this object, in key/fn pairs, to enable other key controls. EG, for the playlist add-on.
play:{key:80, // p
fn:function fn(f){if(f.status.paused){f.play();}else {f.pause();}}},fullScreen:{key:70, // f
fn:function fn(f){if(f.status.video || f.options.audioFullScreen){f._setOption("fullScreen",!f.options.fullScreen);}}},muted:{key:77, // m
fn:function fn(f){f._muted(!f.options.muted);}},volumeUp:{key:190, // .
fn:function fn(f){f.volume(f.options.volume + 0.1);}},volumeDown:{key:188, // ,
fn:function fn(f){f.volume(f.options.volume - 0.1);}},loop:{key:76, // l
fn:function fn(f){f._loop(!f.options.loop);}}},verticalVolume:false, // Calculate volume from the bottom of the volume bar. Default is from the left. Also volume affects either width or height.
verticalPlaybackRate:false,globalVolume:false, // Set to make volume and muted changes affect all jPlayer instances with this option enabled
idPrefix:"jp", // Prefix for the ids of html elements created by jPlayer. For flash, this must not include characters: . - + * / \
noConflict:"jQuery",emulateHtml:false, // Emulates the HTML5 Media element on the jPlayer element.
consoleAlerts:true, // Alerts are sent to the console.log() instead of alert().
errorAlerts:false,warningAlerts:false},optionsAudio:{size:{width:"0px",height:"0px",cssClass:""},sizeFull:{width:"0px",height:"0px",cssClass:""}},optionsVideo:{size:{width:"480px",height:"270px",cssClass:"jp-video-270p"},sizeFull:{width:"100%",height:"100%",cssClass:"jp-video-full"}},instances:{}, // Static Object
status:{ // Instanced in _init()
src:"",media:{},paused:true,format:{},formatType:"",waitForPlay:true, // Same as waitForLoad except in case where preloading.
waitForLoad:true,srcSet:false,video:false, // True if playing a video
seekPercent:0,currentPercentRelative:0,currentPercentAbsolute:0,currentTime:0,duration:0,remaining:0,videoWidth:0, // Intrinsic width of the video in pixels.
videoHeight:0, // Intrinsic height of the video in pixels.
readyState:0,networkState:0,playbackRate:1, // Warning - Now both an option and a status property
ended:0 /*		Persistant status properties created dynamically at _init():
			width
			height
			cssClass
			nativeVideoControls
			noFullWindow
			noVolume
			playbackRateEnabled // Warning - Technically, we can have both Flash and HTML, so this might not be correct if the Flash is active. That is a niche case.
*/},internal:{ // Instanced in _init()
ready:false // instance: undefined
// domNode: undefined
// htmlDlyCmdId: undefined
// autohideId: undefined
// mouse: undefined
// cmdsIgnored
},solution:{ // Static Object: Defines the solutions built in jPlayer.
html:true,aurora:true,flash:true}, // 'MPEG-4 support' : canPlayType('video/mp4; codecs="mp4v.20.8"')
format:{ // Static Object
mp3:{codec:'audio/mpeg',flashCanPlay:true,media:'audio'},m4a:{ // AAC / MP4
codec:'audio/mp4; codecs="mp4a.40.2"',flashCanPlay:true,media:'audio'},m3u8a:{ // AAC / MP4 / Apple HLS
codec:'application/vnd.apple.mpegurl; codecs="mp4a.40.2"',flashCanPlay:false,media:'audio'},m3ua:{ // M3U
codec:'audio/mpegurl',flashCanPlay:false,media:'audio'},oga:{ // OGG
codec:'audio/ogg; codecs="vorbis, opus"',flashCanPlay:false,media:'audio'},flac:{ // FLAC
codec:'audio/x-flac',flashCanPlay:false,media:'audio'},wav:{ // PCM
codec:'audio/wav; codecs="1"',flashCanPlay:false,media:'audio'},webma:{ // WEBM
codec:'audio/webm; codecs="vorbis"',flashCanPlay:false,media:'audio'},fla:{ // FLV / F4A
codec:'audio/x-flv',flashCanPlay:true,media:'audio'},rtmpa:{ // RTMP AUDIO
codec:'audio/rtmp; codecs="rtmp"',flashCanPlay:true,media:'audio'},m4v:{ // H.264 / MP4
codec:'video/mp4; codecs="avc1.42E01E, mp4a.40.2"',flashCanPlay:true,media:'video'},m3u8v:{ // H.264 / AAC / MP4 / Apple HLS
codec:'application/vnd.apple.mpegurl; codecs="avc1.42E01E, mp4a.40.2"',flashCanPlay:false,media:'video'},m3uv:{ // M3U
codec:'audio/mpegurl',flashCanPlay:false,media:'video'},ogv:{ // OGG
codec:'video/ogg; codecs="theora, vorbis"',flashCanPlay:false,media:'video'},webmv:{ // WEBM
codec:'video/webm; codecs="vorbis, vp8"',flashCanPlay:false,media:'video'},flv:{ // FLV / F4V
codec:'video/x-flv',flashCanPlay:true,media:'video'},rtmpv:{ // RTMP VIDEO
codec:'video/rtmp; codecs="rtmp"',flashCanPlay:true,media:'video'}},_init:function _init(){var self=this;this.element.empty();this.status = $.extend({},this.status); // Copy static to unique instance.
this.internal = $.extend({},this.internal); // Copy static to unique instance.
// Initialize the time format
this.options.timeFormat = $.extend({},$.jPlayer.timeFormat,this.options.timeFormat); // On iOS, assume commands will be ignored before user initiates them.
this.internal.cmdsIgnored = $.jPlayer.platform.ipad || $.jPlayer.platform.iphone || $.jPlayer.platform.ipod;this.internal.domNode = this.element.get(0); // Add key bindings focus to 1st jPlayer instanced with key control enabled.
if(this.options.keyEnabled && !$.jPlayer.focus){$.jPlayer.focus = this;} // A fix for Android where older (2.3) and even some 4.x devices fail to work when changing the *audio* SRC and then playing immediately.
this.androidFix = {setMedia:false, // True when media set
play:false, // True when a progress event will instruct the media to play
pause:false, // True when a progress event will instruct the media to pause at a time.
time:NaN // The play(time) parameter
};if($.jPlayer.platform.android){this.options.preload = this.options.preload !== 'auto'?'metadata':'auto'; // Default to metadata, but allow auto.
}this.formats = []; // Array based on supplied string option. Order defines priority.
this.solutions = []; // Array based on solution string option. Order defines priority.
this.require = {}; // Which media types are required: video, audio.
this.htmlElement = {}; // DOM elements created by jPlayer
this.html = {}; // In _init()'s this.desired code and setmedia(): Accessed via this[solution], where solution from this.solutions array.
this.html.audio = {};this.html.video = {};this.aurora = {}; // In _init()'s this.desired code and setmedia(): Accessed via this[solution], where solution from this.solutions array.
this.aurora.formats = [];this.aurora.properties = [];this.flash = {}; // In _init()'s this.desired code and setmedia(): Accessed via this[solution], where solution from this.solutions array.
this.css = {};this.css.cs = {}; // Holds the css selector strings
this.css.jq = {}; // Holds jQuery selectors. ie., $(css.cs.method)
this.ancestorJq = []; // Holds jQuery selector of cssSelectorAncestor. Init would use $() instead of [], but it is only 1.4+
this.options.volume = this._limitValue(this.options.volume,0,1); // Limit volume value's bounds.
// Create the formats array, with prority based on the order of the supplied formats string
$.each(this.options.supplied.toLowerCase().split(","),function(index1,value1){var format=value1.replace(/^\s+|\s+$/g,""); //trim
if(self.format[format]){ // Check format is valid.
var dupFound=false;$.each(self.formats,function(index2,value2){ // Check for duplicates
if(format === value2){dupFound = true;return false;}});if(!dupFound){self.formats.push(format);}}}); // Create the solutions array, with prority based on the order of the solution string
$.each(this.options.solution.toLowerCase().split(","),function(index1,value1){var solution=value1.replace(/^\s+|\s+$/g,""); //trim
if(self.solution[solution]){ // Check solution is valid.
var dupFound=false;$.each(self.solutions,function(index2,value2){ // Check for duplicates
if(solution === value2){dupFound = true;return false;}});if(!dupFound){self.solutions.push(solution);}}}); // Create Aurora.js formats array
$.each(this.options.auroraFormats.toLowerCase().split(","),function(index1,value1){var format=value1.replace(/^\s+|\s+$/g,""); //trim
if(self.format[format]){ // Check format is valid.
var dupFound=false;$.each(self.aurora.formats,function(index2,value2){ // Check for duplicates
if(format === value2){dupFound = true;return false;}});if(!dupFound){self.aurora.formats.push(format);}}});this.internal.instance = "jp_" + this.count;this.instances[this.internal.instance] = this.element; // Check the jPlayer div has an id and create one if required. Important for Flash to know the unique id for comms.
if(!this.element.attr("id")){this.element.attr("id",this.options.idPrefix + "_jplayer_" + this.count);}this.internal.self = $.extend({},{id:this.element.attr("id"),jq:this.element});this.internal.audio = $.extend({},{id:this.options.idPrefix + "_audio_" + this.count,jq:undefined});this.internal.video = $.extend({},{id:this.options.idPrefix + "_video_" + this.count,jq:undefined});this.internal.flash = $.extend({},{id:this.options.idPrefix + "_flash_" + this.count,jq:undefined,swf:this.options.swfPath + (this.options.swfPath.toLowerCase().slice(-4) !== ".swf"?(this.options.swfPath && this.options.swfPath.slice(-1) !== "/"?"/":"") + "jquery.jplayer.swf":"")});this.internal.poster = $.extend({},{id:this.options.idPrefix + "_poster_" + this.count,jq:undefined}); // Register listeners defined in the constructor
$.each($.jPlayer.event,function(eventName,eventType){if(self.options[eventName] !== undefined){self.element.bind(eventType + ".jPlayer",self.options[eventName]); // With .jPlayer namespace.
self.options[eventName] = undefined; // Destroy the handler pointer copy on the options. Reason, events can be added/removed in other ways so this could be obsolete and misleading.
}}); // Determine if we require solutions for audio, video or both media types.
this.require.audio = false;this.require.video = false;$.each(this.formats,function(priority,format){self.require[self.format[format].media] = true;}); // Now required types are known, finish the options default settings.
if(this.require.video){this.options = $.extend(true,{},this.optionsVideo,this.options);}else {this.options = $.extend(true,{},this.optionsAudio,this.options);}this._setSize(); // update status and jPlayer element size
// Determine the status for Blocklisted options.
this.status.nativeVideoControls = this._uaBlocklist(this.options.nativeVideoControls);this.status.noFullWindow = this._uaBlocklist(this.options.noFullWindow);this.status.noVolume = this._uaBlocklist(this.options.noVolume); // Create event handlers if native fullscreen is supported
if($.jPlayer.nativeFeatures.fullscreen.api.fullscreenEnabled){this._fullscreenAddEventListeners();} // The native controls are only for video and are disabled when audio is also used.
this._restrictNativeVideoControls(); // Create the poster image.
this.htmlElement.poster = document.createElement('img');this.htmlElement.poster.id = this.internal.poster.id;this.htmlElement.poster.onload = function(){ // Note that this did not work on Firefox 3.6: poster.addEventListener("onload", function() {}, false); Did not investigate x-browser.
if(!self.status.video || self.status.waitForPlay){self.internal.poster.jq.show();}};this.element.append(this.htmlElement.poster);this.internal.poster.jq = $("#" + this.internal.poster.id);this.internal.poster.jq.css({'width':this.status.width,'height':this.status.height});this.internal.poster.jq.hide();this.internal.poster.jq.bind("click.jPlayer",function(){self._trigger($.jPlayer.event.click);}); // Generate the required media elements
this.html.audio.available = false;if(this.require.audio){ // If a supplied format is audio
this.htmlElement.audio = document.createElement('audio');this.htmlElement.audio.id = this.internal.audio.id;this.html.audio.available = !!this.htmlElement.audio.canPlayType && this._testCanPlayType(this.htmlElement.audio); // Test is for IE9 on Win Server 2008.
}this.html.video.available = false;if(this.require.video){ // If a supplied format is video
this.htmlElement.video = document.createElement('video');this.htmlElement.video.id = this.internal.video.id;this.html.video.available = !!this.htmlElement.video.canPlayType && this._testCanPlayType(this.htmlElement.video); // Test is for IE9 on Win Server 2008.
}this.flash.available = this._checkForFlash(10.1);this.html.canPlay = {};this.aurora.canPlay = {};this.flash.canPlay = {};$.each(this.formats,function(priority,format){self.html.canPlay[format] = self.html[self.format[format].media].available && "" !== self.htmlElement[self.format[format].media].canPlayType(self.format[format].codec);self.aurora.canPlay[format] = $.inArray(format,self.aurora.formats) > -1;self.flash.canPlay[format] = self.format[format].flashCanPlay && self.flash.available;});this.html.desired = false;this.aurora.desired = false;this.flash.desired = false;$.each(this.solutions,function(solutionPriority,solution){if(solutionPriority === 0){self[solution].desired = true;}else {var audioCanPlay=false;var videoCanPlay=false;$.each(self.formats,function(formatPriority,format){if(self[self.solutions[0]].canPlay[format]){ // The other solution can play
if(self.format[format].media === 'video'){videoCanPlay = true;}else {audioCanPlay = true;}}});self[solution].desired = self.require.audio && !audioCanPlay || self.require.video && !videoCanPlay;}}); // This is what jPlayer will support, based on solution and supplied.
this.html.support = {};this.aurora.support = {};this.flash.support = {};$.each(this.formats,function(priority,format){self.html.support[format] = self.html.canPlay[format] && self.html.desired;self.aurora.support[format] = self.aurora.canPlay[format] && self.aurora.desired;self.flash.support[format] = self.flash.canPlay[format] && self.flash.desired;}); // If jPlayer is supporting any format in a solution, then the solution is used.
this.html.used = false;this.aurora.used = false;this.flash.used = false;$.each(this.solutions,function(solutionPriority,solution){$.each(self.formats,function(formatPriority,format){if(self[solution].support[format]){self[solution].used = true;return false;}});}); // Init solution active state and the event gates to false.
this._resetActive();this._resetGate(); // Set up the css selectors for the control and feedback entities.
this._cssSelectorAncestor(this.options.cssSelectorAncestor); // If neither html nor aurora nor flash are being used by this browser, then media playback is not possible. Trigger an error event.
if(!(this.html.used || this.aurora.used || this.flash.used)){this._error({type:$.jPlayer.error.NO_SOLUTION,context:"{solution:'" + this.options.solution + "', supplied:'" + this.options.supplied + "'}",message:$.jPlayer.errorMsg.NO_SOLUTION,hint:$.jPlayer.errorHint.NO_SOLUTION});if(this.css.jq.noSolution.length){this.css.jq.noSolution.show();}}else {if(this.css.jq.noSolution.length){this.css.jq.noSolution.hide();}} // Add the flash solution if it is being used.
if(this.flash.used){var htmlObj,flashVars='jQuery=' + encodeURI(this.options.noConflict) + '&id=' + encodeURI(this.internal.self.id) + '&vol=' + this.options.volume + '&muted=' + this.options.muted; // Code influenced by SWFObject 2.2: http://code.google.com/p/swfobject/
// Non IE browsers have an initial Flash size of 1 by 1 otherwise the wmode affected the Flash ready event.
if($.jPlayer.browser.msie && (Number($.jPlayer.browser.version) < 9 || $.jPlayer.browser.documentMode < 9)){var objStr='<object id="' + this.internal.flash.id + '" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="0" height="0" tabindex="-1"></object>';var paramStr=['<param name="movie" value="' + this.internal.flash.swf + '" />','<param name="FlashVars" value="' + flashVars + '" />','<param name="allowScriptAccess" value="always" />','<param name="bgcolor" value="' + this.options.backgroundColor + '" />','<param name="wmode" value="' + this.options.wmode + '" />'];htmlObj = document.createElement(objStr);for(var i=0;i < paramStr.length;i++) {htmlObj.appendChild(document.createElement(paramStr[i]));}}else {var createParam=function createParam(el,n,v){var p=document.createElement("param");p.setAttribute("name",n);p.setAttribute("value",v);el.appendChild(p);};htmlObj = document.createElement("object");htmlObj.setAttribute("id",this.internal.flash.id);htmlObj.setAttribute("name",this.internal.flash.id);htmlObj.setAttribute("data",this.internal.flash.swf);htmlObj.setAttribute("type","application/x-shockwave-flash");htmlObj.setAttribute("width","1"); // Non-zero
htmlObj.setAttribute("height","1"); // Non-zero
htmlObj.setAttribute("tabindex","-1");createParam(htmlObj,"flashvars",flashVars);createParam(htmlObj,"allowscriptaccess","always");createParam(htmlObj,"bgcolor",this.options.backgroundColor);createParam(htmlObj,"wmode",this.options.wmode);}this.element.append(htmlObj);this.internal.flash.jq = $(htmlObj);} // Setup playbackRate ability before using _addHtmlEventListeners()
if(this.html.used && !this.flash.used){ // If only HTML
// Using the audio element capabilities for playbackRate. ie., Assuming video element is the same.
this.status.playbackRateEnabled = this._testPlaybackRate('audio');}else {this.status.playbackRateEnabled = false;}this._updatePlaybackRate(); // Add the HTML solution if being used.
if(this.html.used){ // The HTML Audio handlers
if(this.html.audio.available){this._addHtmlEventListeners(this.htmlElement.audio,this.html.audio);this.element.append(this.htmlElement.audio);this.internal.audio.jq = $("#" + this.internal.audio.id);} // The HTML Video handlers
if(this.html.video.available){this._addHtmlEventListeners(this.htmlElement.video,this.html.video);this.element.append(this.htmlElement.video);this.internal.video.jq = $("#" + this.internal.video.id);if(this.status.nativeVideoControls){this.internal.video.jq.css({'width':this.status.width,'height':this.status.height});}else {this.internal.video.jq.css({'width':'0px','height':'0px'}); // Using size 0x0 since a .hide() causes issues in iOS
}this.internal.video.jq.bind("click.jPlayer",function(){self._trigger($.jPlayer.event.click);});}} // Add the Aurora.js solution if being used.
if(this.aurora.used){} // Aurora.js player need to be created for each media, see setMedia function.
// Create the bridge that emulates the HTML Media element on the jPlayer DIV
if(this.options.emulateHtml){this._emulateHtmlBridge();}if((this.html.used || this.aurora.used) && !this.flash.used){ // If only HTML, then emulate flash ready() call after 100ms.
setTimeout(function(){self.internal.ready = true;self.version.flash = "n/a";self._trigger($.jPlayer.event.repeat); // Trigger the repeat event so its handler can initialize itself with the loop option.
self._trigger($.jPlayer.event.ready);},100);} // Initialize the interface components with the options.
this._updateNativeVideoControls(); // The other controls are now setup in _cssSelectorAncestor()
if(this.css.jq.videoPlay.length){this.css.jq.videoPlay.hide();}$.jPlayer.prototype.count++; // Change static variable via prototype.
},destroy:function destroy(){ // MJP: The background change remains. Would need to store the original to restore it correctly.
// MJP: The jPlayer element's size change remains.
// Clear the media to reset the GUI and stop any downloads. Streams on some browsers had persited. (Chrome)
this.clearMedia(); // Remove the size/sizeFull cssClass from the cssSelectorAncestor
this._removeUiClass(); // Remove the times from the GUI
if(this.css.jq.currentTime.length){this.css.jq.currentTime.text("");}if(this.css.jq.duration.length){this.css.jq.duration.text("");} // Remove any bindings from the interface controls.
$.each(this.css.jq,function(fn,jq){ // Check selector is valid before trying to execute method.
if(jq.length){jq.unbind(".jPlayer");}}); // Remove the click handlers for $.jPlayer.event.click
this.internal.poster.jq.unbind(".jPlayer");if(this.internal.video.jq){this.internal.video.jq.unbind(".jPlayer");} // Remove the fullscreen event handlers
this._fullscreenRemoveEventListeners(); // Remove key bindings
if(this === $.jPlayer.focus){$.jPlayer.focus = null;} // Destroy the HTML bridge.
if(this.options.emulateHtml){this._destroyHtmlBridge();}this.element.removeData("jPlayer"); // Remove jPlayer data
this.element.unbind(".jPlayer"); // Remove all event handlers created by the jPlayer constructor
this.element.empty(); // Remove the inserted child elements
delete this.instances[this.internal.instance]; // Clear the instance on the static instance object
},destroyRemoved:function destroyRemoved(){ // Destroy any instances that have gone away.
var self=this;$.each(this.instances,function(i,element){if(self.element !== element){ // Do not destroy this instance.
if(!element.data("jPlayer")){ // Check that element is a real jPlayer.
element.jPlayer("destroy");delete self.instances[i];}}});},enable:function enable(){ // Plan to implement
// options.disabled = false
},disable:function disable(){ // Plan to implement
// options.disabled = true
},_testCanPlayType:function _testCanPlayType(elem){ // IE9 on Win Server 2008 did not implement canPlayType(), but it has the property.
try{elem.canPlayType(this.format.mp3.codec); // The type is irrelevant.
return true;}catch(err) {return false;}},_testPlaybackRate:function _testPlaybackRate(type){ // type: String 'audio' or 'video'
var el,rate=0.5;type = typeof type === 'string'?type:'audio';el = document.createElement(type); // Wrapping in a try/catch, just in case older HTML5 browsers throw and error.
try{if('playbackRate' in el){el.playbackRate = rate;return el.playbackRate === rate;}else {return false;}}catch(err) {return false;}},_uaBlocklist:function _uaBlocklist(list){ // list : object with properties that are all regular expressions. Property names are irrelevant.
// Returns true if the user agent is matched in list.
var ua=navigator.userAgent.toLowerCase(),block=false;$.each(list,function(p,re){if(re && re.test(ua)){block = true;return false; // exit $.each.
}});return block;},_restrictNativeVideoControls:function _restrictNativeVideoControls(){ // Fallback to noFullWindow when nativeVideoControls is true and audio media is being used. Affects when both media types are used.
if(this.require.audio){if(this.status.nativeVideoControls){this.status.nativeVideoControls = false;this.status.noFullWindow = true;}}},_updateNativeVideoControls:function _updateNativeVideoControls(){if(this.html.video.available && this.html.used){ // Turn the HTML Video controls on/off
this.htmlElement.video.controls = this.status.nativeVideoControls; // Show/hide the jPlayer GUI.
this._updateAutohide(); // For when option changed. The poster image is not updated, as it is dealt with in setMedia(). Acceptable degradation since seriously doubt these options will change on the fly. Can again review later.
if(this.status.nativeVideoControls && this.require.video){this.internal.poster.jq.hide();this.internal.video.jq.css({'width':this.status.width,'height':this.status.height});}else if(this.status.waitForPlay && this.status.video){this.internal.poster.jq.show();this.internal.video.jq.css({'width':'0px','height':'0px'});}}},_addHtmlEventListeners:function _addHtmlEventListeners(mediaElement,entity){var self=this;mediaElement.preload = this.options.preload;mediaElement.muted = this.options.muted;mediaElement.volume = this.options.volume;if(this.status.playbackRateEnabled){mediaElement.defaultPlaybackRate = this.options.defaultPlaybackRate;mediaElement.playbackRate = this.options.playbackRate;} // Create the event listeners
// Only want the active entity to affect jPlayer and bubble events.
// Using entity.gate so that object is referenced and gate property always current
mediaElement.addEventListener("progress",function(){if(entity.gate){if(self.internal.cmdsIgnored && this.readyState > 0){ // Detect iOS executed the command
self.internal.cmdsIgnored = false;}self._getHtmlStatus(mediaElement);self._updateInterface();self._trigger($.jPlayer.event.progress);}},false);mediaElement.addEventListener("loadeddata",function(){if(entity.gate){self.androidFix.setMedia = false; // Disable the fix after the first progress event.
if(self.androidFix.play){ // Play Android audio - performing the fix.
self.androidFix.play = false;self.play(self.androidFix.time);}if(self.androidFix.pause){ // Pause Android audio at time - performing the fix.
self.androidFix.pause = false;self.pause(self.androidFix.time);}self._trigger($.jPlayer.event.loadeddata);}},false);mediaElement.addEventListener("timeupdate",function(){if(entity.gate){self._getHtmlStatus(mediaElement);self._updateInterface();self._trigger($.jPlayer.event.timeupdate);}},false);mediaElement.addEventListener("durationchange",function(){if(entity.gate){self._getHtmlStatus(mediaElement);self._updateInterface();self._trigger($.jPlayer.event.durationchange);}},false);mediaElement.addEventListener("play",function(){if(entity.gate){self._updateButtons(true);self._html_checkWaitForPlay(); // So the native controls update this variable and puts the hidden interface in the correct state. Affects toggling native controls.
self._trigger($.jPlayer.event.play);}},false);mediaElement.addEventListener("playing",function(){if(entity.gate){self._updateButtons(true);self._seeked();self._trigger($.jPlayer.event.playing);}},false);mediaElement.addEventListener("pause",function(){if(entity.gate){self._updateButtons(false);self._trigger($.jPlayer.event.pause);}},false);mediaElement.addEventListener("waiting",function(){if(entity.gate){self._seeking();self._trigger($.jPlayer.event.waiting);}},false);mediaElement.addEventListener("seeking",function(){if(entity.gate){self._seeking();self._trigger($.jPlayer.event.seeking);}},false);mediaElement.addEventListener("seeked",function(){if(entity.gate){self._seeked();self._trigger($.jPlayer.event.seeked);}},false);mediaElement.addEventListener("volumechange",function(){if(entity.gate){ // Read the values back from the element as the Blackberry PlayBook shares the volume with the physical buttons master volume control.
// However, when tested 6th July 2011, those buttons do not generate an event. The physical play/pause button does though.
self.options.volume = mediaElement.volume;self.options.muted = mediaElement.muted;self._updateMute();self._updateVolume();self._trigger($.jPlayer.event.volumechange);}},false);mediaElement.addEventListener("ratechange",function(){if(entity.gate){self.options.defaultPlaybackRate = mediaElement.defaultPlaybackRate;self.options.playbackRate = mediaElement.playbackRate;self._updatePlaybackRate();self._trigger($.jPlayer.event.ratechange);}},false);mediaElement.addEventListener("suspend",function(){ // Seems to be the only way of capturing that the iOS4 browser did not actually play the media from the page code. ie., It needs a user gesture.
if(entity.gate){self._seeked();self._trigger($.jPlayer.event.suspend);}},false);mediaElement.addEventListener("ended",function(){if(entity.gate){ // Order of the next few commands are important. Change the time and then pause.
// Solves a bug in Firefox, where issuing pause 1st causes the media to play from the start. ie., The pause is ignored.
if(!$.jPlayer.browser.webkit){ // Chrome crashes if you do this in conjunction with a setMedia command in an ended event handler. ie., The playlist demo.
self.htmlElement.media.currentTime = 0; // Safari does not care about this command. ie., It works with or without this line. (Both Safari and Chrome are Webkit.)
}self.htmlElement.media.pause(); // Pause otherwise a click on the progress bar will play from that point, when it shouldn't, since it stopped playback.
self._updateButtons(false);self._getHtmlStatus(mediaElement,true); // With override true. Otherwise Chrome leaves progress at full.
self._updateInterface();self._trigger($.jPlayer.event.ended);}},false);mediaElement.addEventListener("error",function(){if(entity.gate){self._updateButtons(false);self._seeked();if(self.status.srcSet){ // Deals with case of clearMedia() causing an error event.
clearTimeout(self.internal.htmlDlyCmdId); // Clears any delayed commands used in the HTML solution.
self.status.waitForLoad = true; // Allows the load operation to try again.
self.status.waitForPlay = true; // Reset since a play was captured.
if(self.status.video && !self.status.nativeVideoControls){self.internal.video.jq.css({'width':'0px','height':'0px'});}if(self._validString(self.status.media.poster) && !self.status.nativeVideoControls){self.internal.poster.jq.show();}if(self.css.jq.videoPlay.length){self.css.jq.videoPlay.show();}self._error({type:$.jPlayer.error.URL,context:self.status.src, // this.src shows absolute urls. Want context to show the url given.
message:$.jPlayer.errorMsg.URL,hint:$.jPlayer.errorHint.URL});}}},false); // Create all the other event listeners that bubble up to a jPlayer event from html, without being used by jPlayer.
$.each($.jPlayer.htmlEvent,function(i,eventType){mediaElement.addEventListener(this,function(){if(entity.gate){self._trigger($.jPlayer.event[eventType]);}},false);});},_addAuroraEventListeners:function _addAuroraEventListeners(player,entity){var self=this; //player.preload = this.options.preload;
//player.muted = this.options.muted;
player.volume = this.options.volume * 100; // Create the event listeners
// Only want the active entity to affect jPlayer and bubble events.
// Using entity.gate so that object is referenced and gate property always current
player.on("progress",function(){if(entity.gate){if(self.internal.cmdsIgnored && this.readyState > 0){ // Detect iOS executed the command
self.internal.cmdsIgnored = false;}self._getAuroraStatus(player);self._updateInterface();self._trigger($.jPlayer.event.progress); // Progress with song duration, we estimate timeupdate need to be triggered too.
if(player.duration > 0){self._trigger($.jPlayer.event.timeupdate);}}},false);player.on("ready",function(){if(entity.gate){self._trigger($.jPlayer.event.loadeddata);}},false);player.on("duration",function(){if(entity.gate){self._getAuroraStatus(player);self._updateInterface();self._trigger($.jPlayer.event.durationchange);}},false);player.on("end",function(){if(entity.gate){ // Order of the next few commands are important. Change the time and then pause.
self._updateButtons(false);self._getAuroraStatus(player,true);self._updateInterface();self._trigger($.jPlayer.event.ended);}},false);player.on("error",function(){if(entity.gate){self._updateButtons(false);self._seeked();if(self.status.srcSet){ // Deals with case of clearMedia() causing an error event.
self.status.waitForLoad = true; // Allows the load operation to try again.
self.status.waitForPlay = true; // Reset since a play was captured.
if(self.status.video && !self.status.nativeVideoControls){self.internal.video.jq.css({'width':'0px','height':'0px'});}if(self._validString(self.status.media.poster) && !self.status.nativeVideoControls){self.internal.poster.jq.show();}if(self.css.jq.videoPlay.length){self.css.jq.videoPlay.show();}self._error({type:$.jPlayer.error.URL,context:self.status.src, // this.src shows absolute urls. Want context to show the url given.
message:$.jPlayer.errorMsg.URL,hint:$.jPlayer.errorHint.URL});}}},false);},_getHtmlStatus:function _getHtmlStatus(media,override){var ct=0,cpa=0,sp=0,cpr=0; // Fixes the duration bug in iOS, where the durationchange event occurs when media.duration is not always correct.
// Fixes the initial duration bug in BB OS7, where the media.duration is infinity and displays as NaN:NaN due to Date() using inifity.
if(isFinite(media.duration)){this.status.duration = media.duration;}ct = media.currentTime;cpa = this.status.duration > 0?100 * ct / this.status.duration:0;if(typeof media.seekable === "object" && media.seekable.length > 0){sp = this.status.duration > 0?100 * media.seekable.end(media.seekable.length - 1) / this.status.duration:100;cpr = this.status.duration > 0?100 * media.currentTime / media.seekable.end(media.seekable.length - 1):0; // Duration conditional for iOS duration bug. ie., seekable.end is a NaN in that case.
}else {sp = 100;cpr = cpa;}if(override){ct = 0;cpr = 0;cpa = 0;}this.status.seekPercent = sp;this.status.currentPercentRelative = cpr;this.status.currentPercentAbsolute = cpa;this.status.currentTime = ct;this.status.remaining = this.status.duration - this.status.currentTime;this.status.videoWidth = media.videoWidth;this.status.videoHeight = media.videoHeight;this.status.readyState = media.readyState;this.status.networkState = media.networkState;this.status.playbackRate = media.playbackRate;this.status.ended = media.ended;},_getAuroraStatus:function _getAuroraStatus(player,override){var ct=0,cpa=0,sp=0,cpr=0;this.status.duration = player.duration / 1000;ct = player.currentTime / 1000;cpa = this.status.duration > 0?100 * ct / this.status.duration:0;if(player.buffered > 0){sp = this.status.duration > 0?player.buffered * this.status.duration / this.status.duration:100;cpr = this.status.duration > 0?ct / (player.buffered * this.status.duration):0;}else {sp = 100;cpr = cpa;}if(override){ct = 0;cpr = 0;cpa = 0;}this.status.seekPercent = sp;this.status.currentPercentRelative = cpr;this.status.currentPercentAbsolute = cpa;this.status.currentTime = ct;this.status.remaining = this.status.duration - this.status.currentTime;this.status.readyState = 4; // status.readyState;
this.status.networkState = 0; // status.networkState;
this.status.playbackRate = 1; // status.playbackRate;
this.status.ended = false; // status.ended;
},_resetStatus:function _resetStatus(){this.status = $.extend({},this.status,$.jPlayer.prototype.status); // Maintains the status properties that persist through a reset.
},_trigger:function _trigger(eventType,error,warning){ // eventType always valid as called using $.jPlayer.event.eventType
var event=$.Event(eventType);event.jPlayer = {};event.jPlayer.version = $.extend({},this.version);event.jPlayer.options = $.extend(true,{},this.options); // Deep copy
event.jPlayer.status = $.extend(true,{},this.status); // Deep copy
event.jPlayer.html = $.extend(true,{},this.html); // Deep copy
event.jPlayer.aurora = $.extend(true,{},this.aurora); // Deep copy
event.jPlayer.flash = $.extend(true,{},this.flash); // Deep copy
if(error){event.jPlayer.error = $.extend({},error);}if(warning){event.jPlayer.warning = $.extend({},warning);}this.element.trigger(event);},jPlayerFlashEvent:function jPlayerFlashEvent(eventType,status){ // Called from Flash
if(eventType === $.jPlayer.event.ready){if(!this.internal.ready){this.internal.ready = true;this.internal.flash.jq.css({'width':'0px','height':'0px'}); // Once Flash generates the ready event, minimise to zero as it is not affected by wmode anymore.
this.version.flash = status.version;if(this.version.needFlash !== this.version.flash){this._error({type:$.jPlayer.error.VERSION,context:this.version.flash,message:$.jPlayer.errorMsg.VERSION + this.version.flash,hint:$.jPlayer.errorHint.VERSION});}this._trigger($.jPlayer.event.repeat); // Trigger the repeat event so its handler can initialize itself with the loop option.
this._trigger(eventType);}else { // This condition occurs if the Flash is hidden and then shown again.
// Firefox also reloads the Flash if the CSS position changes. position:fixed is used for full screen.
// Only do this if the Flash is the solution being used at the moment. Affects Media players where both solution may be being used.
if(this.flash.gate){ // Send the current status to the Flash now that it is ready (available) again.
if(this.status.srcSet){ // Need to read original status before issuing the setMedia command.
var currentTime=this.status.currentTime,paused=this.status.paused;this.setMedia(this.status.media);this.volumeWorker(this.options.volume);if(currentTime > 0){if(paused){this.pause(currentTime);}else {this.play(currentTime);}}}this._trigger($.jPlayer.event.flashreset);}}}if(this.flash.gate){switch(eventType){case $.jPlayer.event.progress:this._getFlashStatus(status);this._updateInterface();this._trigger(eventType);break;case $.jPlayer.event.timeupdate:this._getFlashStatus(status);this._updateInterface();this._trigger(eventType);break;case $.jPlayer.event.play:this._seeked();this._updateButtons(true);this._trigger(eventType);break;case $.jPlayer.event.pause:this._updateButtons(false);this._trigger(eventType);break;case $.jPlayer.event.ended:this._updateButtons(false);this._trigger(eventType);break;case $.jPlayer.event.click:this._trigger(eventType); // This could be dealt with by the default
break;case $.jPlayer.event.error:this.status.waitForLoad = true; // Allows the load operation to try again.
this.status.waitForPlay = true; // Reset since a play was captured.
if(this.status.video){this.internal.flash.jq.css({'width':'0px','height':'0px'});}if(this._validString(this.status.media.poster)){this.internal.poster.jq.show();}if(this.css.jq.videoPlay.length && this.status.video){this.css.jq.videoPlay.show();}if(this.status.video){ // Set up for another try. Execute before error event.
this._flash_setVideo(this.status.media);}else {this._flash_setAudio(this.status.media);}this._updateButtons(false);this._error({type:$.jPlayer.error.URL,context:status.src,message:$.jPlayer.errorMsg.URL,hint:$.jPlayer.errorHint.URL});break;case $.jPlayer.event.seeking:this._seeking();this._trigger(eventType);break;case $.jPlayer.event.seeked:this._seeked();this._trigger(eventType);break;case $.jPlayer.event.ready: // The ready event is handled outside the switch statement.
// Captured here otherwise 2 ready events would be generated if the ready event handler used setMedia.
break;default:this._trigger(eventType);}}return false;},_getFlashStatus:function _getFlashStatus(status){this.status.seekPercent = status.seekPercent;this.status.currentPercentRelative = status.currentPercentRelative;this.status.currentPercentAbsolute = status.currentPercentAbsolute;this.status.currentTime = status.currentTime;this.status.duration = status.duration;this.status.remaining = status.duration - status.currentTime;this.status.videoWidth = status.videoWidth;this.status.videoHeight = status.videoHeight; // The Flash does not generate this information in this release
this.status.readyState = 4; // status.readyState;
this.status.networkState = 0; // status.networkState;
this.status.playbackRate = 1; // status.playbackRate;
this.status.ended = false; // status.ended;
},_updateButtons:function _updateButtons(playing){if(playing === undefined){playing = !this.status.paused;}else {this.status.paused = !playing;} // Apply the state classes. (For the useStateClassSkin:true option)
if(playing){this.addStateClass('playing');}else {this.removeStateClass('playing');}if(!this.status.noFullWindow && this.options.fullWindow){this.addStateClass('fullScreen');}else {this.removeStateClass('fullScreen');}if(this.options.loop){this.addStateClass('looped');}else {this.removeStateClass('looped');} // Toggle the GUI element pairs. (For the useStateClassSkin:false option)
if(this.css.jq.play.length && this.css.jq.pause.length){if(playing){this.css.jq.play.hide();this.css.jq.pause.show();}else {this.css.jq.play.show();this.css.jq.pause.hide();}}if(this.css.jq.restoreScreen.length && this.css.jq.fullScreen.length){if(this.status.noFullWindow){this.css.jq.fullScreen.hide();this.css.jq.restoreScreen.hide();}else if(this.options.fullWindow){this.css.jq.fullScreen.hide();this.css.jq.restoreScreen.show();}else {this.css.jq.fullScreen.show();this.css.jq.restoreScreen.hide();}}if(this.css.jq.repeat.length && this.css.jq.repeatOff.length){if(this.options.loop){this.css.jq.repeat.hide();this.css.jq.repeatOff.show();}else {this.css.jq.repeat.show();this.css.jq.repeatOff.hide();}}},_updateInterface:function _updateInterface(){if(this.css.jq.seekBar.length){this.css.jq.seekBar.width(this.status.seekPercent + "%");}if(this.css.jq.playBar.length){if(this.options.smoothPlayBar){this.css.jq.playBar.stop().animate({width:this.status.currentPercentAbsolute + "%"},250,"linear");}else {this.css.jq.playBar.width(this.status.currentPercentRelative + "%");}}var currentTimeText='';if(this.css.jq.currentTime.length){currentTimeText = this._convertTime(this.status.currentTime);if(currentTimeText !== this.css.jq.currentTime.text()){this.css.jq.currentTime.text(this._convertTime(this.status.currentTime));}}var durationText='',duration=this.status.duration,remaining=this.status.remaining;if(this.css.jq.duration.length){if(typeof this.status.media.duration === 'string'){durationText = this.status.media.duration;}else {if(typeof this.status.media.duration === 'number'){duration = this.status.media.duration;remaining = duration - this.status.currentTime;}if(this.options.remainingDuration){durationText = (remaining > 0?'-':'') + this._convertTime(remaining);}else {durationText = this._convertTime(duration);}}if(durationText !== this.css.jq.duration.text()){this.css.jq.duration.text(durationText);}}},_convertTime:ConvertTime.prototype.time,_seeking:function _seeking(){if(this.css.jq.seekBar.length){this.css.jq.seekBar.addClass("jp-seeking-bg");}this.addStateClass('seeking');},_seeked:function _seeked(){if(this.css.jq.seekBar.length){this.css.jq.seekBar.removeClass("jp-seeking-bg");}this.removeStateClass('seeking');},_resetGate:function _resetGate(){this.html.audio.gate = false;this.html.video.gate = false;this.aurora.gate = false;this.flash.gate = false;},_resetActive:function _resetActive(){this.html.active = false;this.aurora.active = false;this.flash.active = false;},_escapeHtml:function _escapeHtml(s){return s.split('&').join('&amp;').split('<').join('&lt;').split('>').join('&gt;').split('"').join('&quot;');},_qualifyURL:function _qualifyURL(url){var el=document.createElement('div');el.innerHTML = '<a href="' + this._escapeHtml(url) + '">x</a>';return el.firstChild.href;},_absoluteMediaUrls:function _absoluteMediaUrls(media){var self=this;$.each(media,function(type,url){if(url && self.format[type] && url.substr(0,5) !== "data:"){media[type] = self._qualifyURL(url);}});return media;},addStateClass:function addStateClass(state){if(this.ancestorJq.length){this.ancestorJq.addClass(this.options.stateClass[state]);}},removeStateClass:function removeStateClass(state){if(this.ancestorJq.length){this.ancestorJq.removeClass(this.options.stateClass[state]);}},setMedia:function setMedia(media){ /*	media[format] = String: URL of format. Must contain all of the supplied option's video or audio formats.
			 *	media.poster = String: Video poster URL.
			 *	media.track = Array: Of objects defining the track element: kind, src, srclang, label, def.
			 *	media.stream = Boolean: * NOT IMPLEMENTED * Designating actual media streams. ie., "false/undefined" for files. Plan to refresh the flash every so often.
			 */var self=this,supported=false,posterChanged=this.status.media.poster !== media.poster; // Compare before reset. Important for OSX Safari as this.htmlElement.poster.src is absolute, even if original poster URL was relative.
this._resetMedia();this._resetGate();this._resetActive(); // Clear the Android Fix.
this.androidFix.setMedia = false;this.androidFix.play = false;this.androidFix.pause = false; // Convert all media URLs to absolute URLs.
media = this._absoluteMediaUrls(media);$.each(this.formats,function(formatPriority,format){var isVideo=self.format[format].media === 'video';$.each(self.solutions,function(solutionPriority,solution){if(self[solution].support[format] && self._validString(media[format])){ // Format supported in solution and url given for format.
var isHtml=solution === 'html';var isAurora=solution === 'aurora';if(isVideo){if(isHtml){self.html.video.gate = true;self._html_setVideo(media);self.html.active = true;}else {self.flash.gate = true;self._flash_setVideo(media);self.flash.active = true;}if(self.css.jq.videoPlay.length){self.css.jq.videoPlay.show();}self.status.video = true;}else {if(isHtml){self.html.audio.gate = true;self._html_setAudio(media);self.html.active = true; // Setup the Android Fix - Only for HTML audio.
if($.jPlayer.platform.android){self.androidFix.setMedia = true;}}else if(isAurora){self.aurora.gate = true;self._aurora_setAudio(media);self.aurora.active = true;}else {self.flash.gate = true;self._flash_setAudio(media);self.flash.active = true;}if(self.css.jq.videoPlay.length){self.css.jq.videoPlay.hide();}self.status.video = false;}supported = true;return false; // Exit $.each
}});if(supported){return false; // Exit $.each
}});if(supported){if(!(this.status.nativeVideoControls && this.html.video.gate)){ // Set poster IMG if native video controls are not being used
// Note: With IE the IMG onload event occurs immediately when cached.
// Note: Poster hidden by default in _resetMedia()
if(this._validString(media.poster)){if(posterChanged){ // Since some browsers do not generate img onload event.
this.htmlElement.poster.src = media.poster;}else {this.internal.poster.jq.show();}}}if(typeof media.title === 'string'){if(this.css.jq.title.length){this.css.jq.title.html(media.title);}if(this.htmlElement.audio){this.htmlElement.audio.setAttribute('title',media.title);}if(this.htmlElement.video){this.htmlElement.video.setAttribute('title',media.title);}}this.status.srcSet = true;this.status.media = $.extend({},media);this._updateButtons(false);this._updateInterface();this._trigger($.jPlayer.event.setmedia);}else { // jPlayer cannot support any formats provided in this browser
// Send an error event
this._error({type:$.jPlayer.error.NO_SUPPORT,context:"{supplied:'" + this.options.supplied + "'}",message:$.jPlayer.errorMsg.NO_SUPPORT,hint:$.jPlayer.errorHint.NO_SUPPORT});}},_resetMedia:function _resetMedia(){this._resetStatus();this._updateButtons(false);this._updateInterface();this._seeked();this.internal.poster.jq.hide();clearTimeout(this.internal.htmlDlyCmdId);if(this.html.active){this._html_resetMedia();}else if(this.aurora.active){this._aurora_resetMedia();}else if(this.flash.active){this._flash_resetMedia();}},clearMedia:function clearMedia(){this._resetMedia();if(this.html.active){this._html_clearMedia();}else if(this.aurora.active){this._aurora_clearMedia();}else if(this.flash.active){this._flash_clearMedia();}this._resetGate();this._resetActive();},load:function load(){if(this.status.srcSet){if(this.html.active){this._html_load();}else if(this.aurora.active){this._aurora_load();}else if(this.flash.active){this._flash_load();}}else {this._urlNotSetError("load");}},focus:function focus(){if(this.options.keyEnabled){$.jPlayer.focus = this;}},play:function play(time){var guiAction=typeof time === "object"; // Flags GUI click events so we know this was not a direct command, but an action taken by the user on the GUI.
if(guiAction && this.options.useStateClassSkin && !this.status.paused){this.pause(time); // The time would be the click event, but passing it over so info is not lost.
}else {time = typeof time === "number"?time:NaN; // Remove jQuery event from click handler
if(this.status.srcSet){this.focus();if(this.html.active){this._html_play(time);}else if(this.aurora.active){this._aurora_play(time);}else if(this.flash.active){this._flash_play(time);}}else {this._urlNotSetError("play");}}},videoPlay:function videoPlay(){ // Handles clicks on the play button over the video poster
this.play();},pause:function pause(time){time = typeof time === "number"?time:NaN; // Remove jQuery event from click handler
if(this.status.srcSet){if(this.html.active){this._html_pause(time);}else if(this.aurora.active){this._aurora_pause(time);}else if(this.flash.active){this._flash_pause(time);}}else {this._urlNotSetError("pause");}},tellOthers:function tellOthers(command,conditions){var self=this,hasConditions=typeof conditions === 'function',args=Array.prototype.slice.call(arguments); // Convert arguments to an Array.
if(typeof command !== 'string'){ // Ignore, since no command.
return; // Return undefined to maintain chaining.
}if(hasConditions){args.splice(1,1); // Remove the conditions from the arguments
}$.jPlayer.prototype.destroyRemoved();$.each(this.instances,function(){ // Remember that "this" is the instance's "element" in the $.each() loop.
if(self.element !== this){ // Do not tell my instance.
if(!hasConditions || conditions.call(this.data("jPlayer"),self)){this.jPlayer.apply(this,args);}}});},pauseOthers:function pauseOthers(time){this.tellOthers("pause",function(){ // In the conditions function, the "this" context is the other instance's jPlayer object.
return this.status.srcSet;},time);},stop:function stop(){if(this.status.srcSet){if(this.html.active){this._html_pause(0);}else if(this.aurora.active){this._aurora_pause(0);}else if(this.flash.active){this._flash_pause(0);}}else {this._urlNotSetError("stop");}},playHead:function playHead(p){p = this._limitValue(p,0,100);if(this.status.srcSet){if(this.html.active){this._html_playHead(p);}else if(this.aurora.active){this._aurora_playHead(p);}else if(this.flash.active){this._flash_playHead(p);}}else {this._urlNotSetError("playHead");}},_muted:function _muted(muted){this.mutedWorker(muted);if(this.options.globalVolume){this.tellOthers("mutedWorker",function(){ // Check the other instance has global volume enabled.
return this.options.globalVolume;},muted);}},mutedWorker:function mutedWorker(muted){this.options.muted = muted;if(this.html.used){this._html_setProperty('muted',muted);}if(this.aurora.used){this._aurora_mute(muted);}if(this.flash.used){this._flash_mute(muted);} // The HTML solution generates this event from the media element itself.
if(!this.html.video.gate && !this.html.audio.gate){this._updateMute(muted);this._updateVolume(this.options.volume);this._trigger($.jPlayer.event.volumechange);}},mute:function mute(_mute){ // mute is either: undefined (true), an event object (true) or a boolean (muted).
var guiAction=typeof _mute === "object"; // Flags GUI click events so we know this was not a direct command, but an action taken by the user on the GUI.
if(guiAction && this.options.useStateClassSkin && this.options.muted){this._muted(false);}else {_mute = _mute === undefined?true:!!_mute;this._muted(_mute);}},unmute:function unmute(_unmute){ // unmute is either: undefined (true), an event object (true) or a boolean (!muted).
_unmute = _unmute === undefined?true:!!_unmute;this._muted(!_unmute);},_updateMute:function _updateMute(mute){if(mute === undefined){mute = this.options.muted;}if(mute){this.addStateClass('muted');}else {this.removeStateClass('muted');}if(this.css.jq.mute.length && this.css.jq.unmute.length){if(this.status.noVolume){this.css.jq.mute.hide();this.css.jq.unmute.hide();}else if(mute){this.css.jq.mute.hide();this.css.jq.unmute.show();}else {this.css.jq.mute.show();this.css.jq.unmute.hide();}}},volume:function volume(v){this.volumeWorker(v);if(this.options.globalVolume){this.tellOthers("volumeWorker",function(){ // Check the other instance has global volume enabled.
return this.options.globalVolume;},v);}},volumeWorker:function volumeWorker(v){v = this._limitValue(v,0,1);this.options.volume = v;if(this.html.used){this._html_setProperty('volume',v);}if(this.aurora.used){this._aurora_volume(v);}if(this.flash.used){this._flash_volume(v);} // The HTML solution generates this event from the media element itself.
if(!this.html.video.gate && !this.html.audio.gate){this._updateVolume(v);this._trigger($.jPlayer.event.volumechange);}},volumeBar:function volumeBar(e){ // Handles clicks on the volumeBar
if(this.css.jq.volumeBar.length){ // Using $(e.currentTarget) to enable multiple volume bars
var $bar=$(e.currentTarget),offset=$bar.offset(),x=e.pageX - offset.left,w=$bar.width(),y=$bar.height() - e.pageY + offset.top,h=$bar.height();if(this.options.verticalVolume){this.volume(y / h);}else {this.volume(x / w);}}if(this.options.muted){this._muted(false);}},_updateVolume:function _updateVolume(v){if(v === undefined){v = this.options.volume;}v = this.options.muted?0:v;if(this.status.noVolume){this.addStateClass('noVolume');if(this.css.jq.volumeBar.length){this.css.jq.volumeBar.hide();}if(this.css.jq.volumeBarValue.length){this.css.jq.volumeBarValue.hide();}if(this.css.jq.volumeMax.length){this.css.jq.volumeMax.hide();}}else {this.removeStateClass('noVolume');if(this.css.jq.volumeBar.length){this.css.jq.volumeBar.show();}if(this.css.jq.volumeBarValue.length){this.css.jq.volumeBarValue.show();this.css.jq.volumeBarValue[this.options.verticalVolume?"height":"width"](v * 100 + "%");}if(this.css.jq.volumeMax.length){this.css.jq.volumeMax.show();}}},volumeMax:function volumeMax(){ // Handles clicks on the volume max
this.volume(1);if(this.options.muted){this._muted(false);}},_cssSelectorAncestor:function _cssSelectorAncestor(ancestor){var self=this;this.options.cssSelectorAncestor = ancestor;this._removeUiClass();this.ancestorJq = ancestor?$(ancestor):[]; // Would use $() instead of [], but it is only 1.4+
if(ancestor && this.ancestorJq.length !== 1){ // So empty strings do not generate the warning.
this._warning({type:$.jPlayer.warning.CSS_SELECTOR_COUNT,context:ancestor,message:$.jPlayer.warningMsg.CSS_SELECTOR_COUNT + this.ancestorJq.length + " found for cssSelectorAncestor.",hint:$.jPlayer.warningHint.CSS_SELECTOR_COUNT});}this._addUiClass();$.each(this.options.cssSelector,function(fn,cssSel){self._cssSelector(fn,cssSel);}); // Set the GUI to the current state.
this._updateInterface();this._updateButtons();this._updateAutohide();this._updateVolume();this._updateMute();},_cssSelector:function _cssSelector(fn,cssSel){var self=this;if(typeof cssSel === 'string'){if($.jPlayer.prototype.options.cssSelector[fn]){if(this.css.jq[fn] && this.css.jq[fn].length){this.css.jq[fn].unbind(".jPlayer");}this.options.cssSelector[fn] = cssSel;this.css.cs[fn] = this.options.cssSelectorAncestor + " " + cssSel;if(cssSel){ // Checks for empty string
this.css.jq[fn] = $(this.css.cs[fn]);}else {this.css.jq[fn] = []; // To comply with the css.jq[fn].length check before its use. As of jQuery 1.4 could have used $() for an empty set.
}if(this.css.jq[fn].length && this[fn]){var handler=function handler(e){e.preventDefault();self[fn](e);if(self.options.autoBlur){$(this).blur();}else {$(this).focus(); // Force focus for ARIA.
}};this.css.jq[fn].bind("click.jPlayer",handler); // Using jPlayer namespace
}if(cssSel && this.css.jq[fn].length !== 1){ // So empty strings do not generate the warning. ie., they just remove the old one.
this._warning({type:$.jPlayer.warning.CSS_SELECTOR_COUNT,context:this.css.cs[fn],message:$.jPlayer.warningMsg.CSS_SELECTOR_COUNT + this.css.jq[fn].length + " found for " + fn + " method.",hint:$.jPlayer.warningHint.CSS_SELECTOR_COUNT});}}else {this._warning({type:$.jPlayer.warning.CSS_SELECTOR_METHOD,context:fn,message:$.jPlayer.warningMsg.CSS_SELECTOR_METHOD,hint:$.jPlayer.warningHint.CSS_SELECTOR_METHOD});}}else {this._warning({type:$.jPlayer.warning.CSS_SELECTOR_STRING,context:cssSel,message:$.jPlayer.warningMsg.CSS_SELECTOR_STRING,hint:$.jPlayer.warningHint.CSS_SELECTOR_STRING});}},duration:function duration(e){if(this.options.toggleDuration){if(this.options.captureDuration){e.stopPropagation();}this._setOption("remainingDuration",!this.options.remainingDuration);}},seekBar:function seekBar(e){ // Handles clicks on the seekBar
if(this.css.jq.seekBar.length){ // Using $(e.currentTarget) to enable multiple seek bars
var $bar=$(e.currentTarget),offset=$bar.offset(),x=e.pageX - offset.left,w=$bar.width(),p=100 * x / w;this.playHead(p);}},playbackRate:function playbackRate(pbr){this._setOption("playbackRate",pbr);},playbackRateBar:function playbackRateBar(e){ // Handles clicks on the playbackRateBar
if(this.css.jq.playbackRateBar.length){ // Using $(e.currentTarget) to enable multiple playbackRate bars
var $bar=$(e.currentTarget),offset=$bar.offset(),x=e.pageX - offset.left,w=$bar.width(),y=$bar.height() - e.pageY + offset.top,h=$bar.height(),ratio,pbr;if(this.options.verticalPlaybackRate){ratio = y / h;}else {ratio = x / w;}pbr = ratio * (this.options.maxPlaybackRate - this.options.minPlaybackRate) + this.options.minPlaybackRate;this.playbackRate(pbr);}},_updatePlaybackRate:function _updatePlaybackRate(){var pbr=this.options.playbackRate,ratio=(pbr - this.options.minPlaybackRate) / (this.options.maxPlaybackRate - this.options.minPlaybackRate);if(this.status.playbackRateEnabled){if(this.css.jq.playbackRateBar.length){this.css.jq.playbackRateBar.show();}if(this.css.jq.playbackRateBarValue.length){this.css.jq.playbackRateBarValue.show();this.css.jq.playbackRateBarValue[this.options.verticalPlaybackRate?"height":"width"](ratio * 100 + "%");}}else {if(this.css.jq.playbackRateBar.length){this.css.jq.playbackRateBar.hide();}if(this.css.jq.playbackRateBarValue.length){this.css.jq.playbackRateBarValue.hide();}}},repeat:function repeat(event){ // Handle clicks on the repeat button
var guiAction=typeof event === "object"; // Flags GUI click events so we know this was not a direct command, but an action taken by the user on the GUI.
if(guiAction && this.options.useStateClassSkin && this.options.loop){this._loop(false);}else {this._loop(true);}},repeatOff:function repeatOff(){ // Handle clicks on the repeatOff button
this._loop(false);},_loop:function _loop(loop){if(this.options.loop !== loop){this.options.loop = loop;this._updateButtons();this._trigger($.jPlayer.event.repeat);}}, // Options code adapted from ui.widget.js (1.8.7).  Made changes so the key can use dot notation. To match previous getData solution in jPlayer 1.
option:function option(key,value){var options=key; // Enables use: options().  Returns a copy of options object
if(arguments.length === 0){return $.extend(true,{},this.options);}if(typeof key === "string"){var keys=key.split("."); // Enables use: options("someOption")  Returns a copy of the option. Supports dot notation.
if(value === undefined){var opt=$.extend(true,{},this.options);for(var i=0;i < keys.length;i++) {if(opt[keys[i]] !== undefined){opt = opt[keys[i]];}else {this._warning({type:$.jPlayer.warning.OPTION_KEY,context:key,message:$.jPlayer.warningMsg.OPTION_KEY,hint:$.jPlayer.warningHint.OPTION_KEY});return undefined;}}return opt;} // Enables use: options("someOptionObject", someObject}).  Creates: {someOptionObject:someObject}
// Enables use: options("someOption", someValue).  Creates: {someOption:someValue}
// Enables use: options("someOptionObject.someOption", someValue).  Creates: {someOptionObject:{someOption:someValue}}
options = {};var opts=options;for(var j=0;j < keys.length;j++) {if(j < keys.length - 1){opts[keys[j]] = {};opts = opts[keys[j]];}else {opts[keys[j]] = value;}}} // Otherwise enables use: options(optionObject).  Uses original object (the key)
this._setOptions(options);return this;},_setOptions:function _setOptions(options){var self=this;$.each(options,function(key,value){ // This supports the 2 level depth that the options of jPlayer has. Would review if we ever need more depth.
self._setOption(key,value);});return this;},_setOption:function _setOption(key,value){var self=this; // The ability to set options is limited at this time.
switch(key){case "volume":this.volume(value);break;case "muted":this._muted(value);break;case "globalVolume":this.options[key] = value;break;case "cssSelectorAncestor":this._cssSelectorAncestor(value); // Set and refresh all associations for the new ancestor.
break;case "cssSelector":$.each(value,function(fn,cssSel){self._cssSelector(fn,cssSel); // NB: The option is set inside this function, after further validity checks.
});break;case "playbackRate":this.options[key] = value = this._limitValue(value,this.options.minPlaybackRate,this.options.maxPlaybackRate);if(this.html.used){this._html_setProperty('playbackRate',value);}this._updatePlaybackRate();break;case "defaultPlaybackRate":this.options[key] = value = this._limitValue(value,this.options.minPlaybackRate,this.options.maxPlaybackRate);if(this.html.used){this._html_setProperty('defaultPlaybackRate',value);}this._updatePlaybackRate();break;case "minPlaybackRate":this.options[key] = value = this._limitValue(value,0.1,this.options.maxPlaybackRate - 0.1);this._updatePlaybackRate();break;case "maxPlaybackRate":this.options[key] = value = this._limitValue(value,this.options.minPlaybackRate + 0.1,16);this._updatePlaybackRate();break;case "fullScreen":if(this.options[key] !== value){ // if changed
var wkv=$.jPlayer.nativeFeatures.fullscreen.used.webkitVideo;if(!wkv || wkv && !this.status.waitForPlay){if(!wkv){ // No sensible way to unset option on these devices.
this.options[key] = value;}if(value){this._requestFullscreen();}else {this._exitFullscreen();}if(!wkv){this._setOption("fullWindow",value);}}}break;case "fullWindow":if(this.options[key] !== value){ // if changed
this._removeUiClass();this.options[key] = value;this._refreshSize();}break;case "size":if(!this.options.fullWindow && this.options[key].cssClass !== value.cssClass){this._removeUiClass();}this.options[key] = $.extend({},this.options[key],value); // store a merged copy of it, incase not all properties changed.
this._refreshSize();break;case "sizeFull":if(this.options.fullWindow && this.options[key].cssClass !== value.cssClass){this._removeUiClass();}this.options[key] = $.extend({},this.options[key],value); // store a merged copy of it, incase not all properties changed.
this._refreshSize();break;case "autohide":this.options[key] = $.extend({},this.options[key],value); // store a merged copy of it, incase not all properties changed.
this._updateAutohide();break;case "loop":this._loop(value);break;case "remainingDuration":this.options[key] = value;this._updateInterface();break;case "toggleDuration":this.options[key] = value;break;case "nativeVideoControls":this.options[key] = $.extend({},this.options[key],value); // store a merged copy of it, incase not all properties changed.
this.status.nativeVideoControls = this._uaBlocklist(this.options.nativeVideoControls);this._restrictNativeVideoControls();this._updateNativeVideoControls();break;case "noFullWindow":this.options[key] = $.extend({},this.options[key],value); // store a merged copy of it, incase not all properties changed.
this.status.nativeVideoControls = this._uaBlocklist(this.options.nativeVideoControls); // Need to check again as noFullWindow can depend on this flag and the restrict() can override it.
this.status.noFullWindow = this._uaBlocklist(this.options.noFullWindow);this._restrictNativeVideoControls();this._updateButtons();break;case "noVolume":this.options[key] = $.extend({},this.options[key],value); // store a merged copy of it, incase not all properties changed.
this.status.noVolume = this._uaBlocklist(this.options.noVolume);this._updateVolume();this._updateMute();break;case "emulateHtml":if(this.options[key] !== value){ // To avoid multiple event handlers being created, if true already.
this.options[key] = value;if(value){this._emulateHtmlBridge();}else {this._destroyHtmlBridge();}}break;case "timeFormat":this.options[key] = $.extend({},this.options[key],value); // store a merged copy of it, incase not all properties changed.
break;case "keyEnabled":this.options[key] = value;if(!value && this === $.jPlayer.focus){$.jPlayer.focus = null;}break;case "keyBindings":this.options[key] = $.extend(true,{},this.options[key],value); // store a merged DEEP copy of it, incase not all properties changed.
break;case "audioFullScreen":this.options[key] = value;break;case "autoBlur":this.options[key] = value;break;}return this;}, // End of: (Options code adapted from ui.widget.js)
_refreshSize:function _refreshSize(){this._setSize(); // update status and jPlayer element size
this._addUiClass(); // update the ui class
this._updateSize(); // update internal sizes
this._updateButtons();this._updateAutohide();this._trigger($.jPlayer.event.resize);},_setSize:function _setSize(){ // Determine the current size from the options
if(this.options.fullWindow){this.status.width = this.options.sizeFull.width;this.status.height = this.options.sizeFull.height;this.status.cssClass = this.options.sizeFull.cssClass;}else {this.status.width = this.options.size.width;this.status.height = this.options.size.height;this.status.cssClass = this.options.size.cssClass;} // Set the size of the jPlayer area.
this.element.css({'width':this.status.width,'height':this.status.height});},_addUiClass:function _addUiClass(){if(this.ancestorJq.length){this.ancestorJq.addClass(this.status.cssClass);}},_removeUiClass:function _removeUiClass(){if(this.ancestorJq.length){this.ancestorJq.removeClass(this.status.cssClass);}},_updateSize:function _updateSize(){ // The poster uses show/hide so can simply resize it.
this.internal.poster.jq.css({'width':this.status.width,'height':this.status.height}); // Video html or flash resized if necessary at this time, or if native video controls being used.
if(!this.status.waitForPlay && this.html.active && this.status.video || this.html.video.available && this.html.used && this.status.nativeVideoControls){this.internal.video.jq.css({'width':this.status.width,'height':this.status.height});}else if(!this.status.waitForPlay && this.flash.active && this.status.video){this.internal.flash.jq.css({'width':this.status.width,'height':this.status.height});}},_updateAutohide:function _updateAutohide(){var self=this,event="mousemove.jPlayer",namespace=".jPlayerAutohide",eventType=event + namespace,handler=function handler(event){var moved=false,deltaX,deltaY;if(typeof self.internal.mouse !== "undefined"){ //get the change from last position to this position
deltaX = self.internal.mouse.x - event.pageX;deltaY = self.internal.mouse.y - event.pageY;moved = Math.floor(deltaX) > 0 || Math.floor(deltaY) > 0;}else {moved = true;} // store current position for next method execution
self.internal.mouse = {x:event.pageX,y:event.pageY}; // if mouse has been actually moved, do the gui fadeIn/fadeOut
if(moved){self.css.jq.gui.fadeIn(self.options.autohide.fadeIn,function(){clearTimeout(self.internal.autohideId);self.internal.autohideId = setTimeout(function(){self.css.jq.gui.fadeOut(self.options.autohide.fadeOut);},self.options.autohide.hold);});}};if(this.css.jq.gui.length){ // End animations first so that its callback is executed now.
// Otherwise an in progress fadeIn animation still has the callback to fadeOut again.
this.css.jq.gui.stop(true,true); // Removes the fadeOut operation from the fadeIn callback.
clearTimeout(this.internal.autohideId); // undefine mouse
delete this.internal.mouse;this.element.unbind(namespace);this.css.jq.gui.unbind(namespace);if(!this.status.nativeVideoControls){if(this.options.fullWindow && this.options.autohide.full || !this.options.fullWindow && this.options.autohide.restored){this.element.bind(eventType,handler);this.css.jq.gui.bind(eventType,handler);this.css.jq.gui.hide();}else {this.css.jq.gui.show();}}else {this.css.jq.gui.hide();}}},fullScreen:function fullScreen(event){var guiAction=typeof event === "object"; // Flags GUI click events so we know this was not a direct command, but an action taken by the user on the GUI.
if(guiAction && this.options.useStateClassSkin && this.options.fullScreen){this._setOption("fullScreen",false);}else {this._setOption("fullScreen",true);}},restoreScreen:function restoreScreen(){this._setOption("fullScreen",false);},_fullscreenAddEventListeners:function _fullscreenAddEventListeners(){var self=this,fs=$.jPlayer.nativeFeatures.fullscreen;if(fs.api.fullscreenEnabled){if(fs.event.fullscreenchange){ // Create the event handler function and store it for removal.
if(typeof this.internal.fullscreenchangeHandler !== 'function'){this.internal.fullscreenchangeHandler = function(){self._fullscreenchange();};}document.addEventListener(fs.event.fullscreenchange,this.internal.fullscreenchangeHandler,false);} // No point creating handler for fullscreenerror.
// Either logic avoids fullscreen occurring (w3c/moz), or their is no event on the browser (webkit).
}},_fullscreenRemoveEventListeners:function _fullscreenRemoveEventListeners(){var fs=$.jPlayer.nativeFeatures.fullscreen;if(this.internal.fullscreenchangeHandler){document.removeEventListener(fs.event.fullscreenchange,this.internal.fullscreenchangeHandler,false);}},_fullscreenchange:function _fullscreenchange(){ // If nothing is fullscreen, then we cannot be in fullscreen mode.
if(this.options.fullScreen && !$.jPlayer.nativeFeatures.fullscreen.api.fullscreenElement()){this._setOption("fullScreen",false);}},_requestFullscreen:function _requestFullscreen(){ // Either the container or the jPlayer div
var e=this.ancestorJq.length?this.ancestorJq[0]:this.element[0],fs=$.jPlayer.nativeFeatures.fullscreen; // This method needs the video element. For iOS and Android.
if(fs.used.webkitVideo){e = this.htmlElement.video;}if(fs.api.fullscreenEnabled){fs.api.requestFullscreen(e);}},_exitFullscreen:function _exitFullscreen(){var fs=$.jPlayer.nativeFeatures.fullscreen,e; // This method needs the video element. For iOS and Android.
if(fs.used.webkitVideo){e = this.htmlElement.video;}if(fs.api.fullscreenEnabled){fs.api.exitFullscreen(e);}},_html_initMedia:function _html_initMedia(media){ // Remove any existing track elements
var $media=$(this.htmlElement.media).empty(); // Create any track elements given with the media, as an Array of track Objects.
$.each(media.track || [],function(i,v){var track=document.createElement('track');track.setAttribute("kind",v.kind?v.kind:"");track.setAttribute("src",v.src?v.src:"");track.setAttribute("srclang",v.srclang?v.srclang:"");track.setAttribute("label",v.label?v.label:"");if(v.def){track.setAttribute("default",v.def);}$media.append(track);});this.htmlElement.media.src = this.status.src;if(this.options.preload !== 'none'){this._html_load(); // See function for comments
}this._trigger($.jPlayer.event.timeupdate); // The flash generates this event for its solution.
},_html_setFormat:function _html_setFormat(media){var self=this; // Always finds a format due to checks in setMedia()
$.each(this.formats,function(priority,format){if(self.html.support[format] && media[format]){self.status.src = media[format];self.status.format[format] = true;self.status.formatType = format;return false;}});},_html_setAudio:function _html_setAudio(media){this._html_setFormat(media);this.htmlElement.media = this.htmlElement.audio;this._html_initMedia(media);},_html_setVideo:function _html_setVideo(media){this._html_setFormat(media);if(this.status.nativeVideoControls){this.htmlElement.video.poster = this._validString(media.poster)?media.poster:"";}this.htmlElement.media = this.htmlElement.video;this._html_initMedia(media);},_html_resetMedia:function _html_resetMedia(){if(this.htmlElement.media){if(this.htmlElement.media.id === this.internal.video.id && !this.status.nativeVideoControls){this.internal.video.jq.css({'width':'0px','height':'0px'});}this.htmlElement.media.pause();}},_html_clearMedia:function _html_clearMedia(){if(this.htmlElement.media){this.htmlElement.media.src = "about:blank"; // The following load() is only required for Firefox 3.6 (PowerMacs).
// Recent HTMl5 browsers only require the src change. Due to changes in W3C spec and load() effect.
this.htmlElement.media.load(); // Stops an old, "in progress" download from continuing the download. Triggers the loadstart, error and emptied events, due to the empty src. Also an abort event if a download was in progress.
}},_html_load:function _html_load(){ // This function remains to allow the early HTML5 browsers to work, such as Firefox 3.6
// A change in the W3C spec for the media.load() command means that this is no longer necessary.
// This command should be removed and actually causes minor undesirable effects on some browsers. Such as loading the whole file and not only the metadata.
if(this.status.waitForLoad){this.status.waitForLoad = false;this.htmlElement.media.load();}clearTimeout(this.internal.htmlDlyCmdId);},_html_play:function _html_play(time){var self=this,media=this.htmlElement.media;this.androidFix.pause = false; // Cancel the pause fix.
this._html_load(); // Loads if required and clears any delayed commands.
// Setup the Android Fix.
if(this.androidFix.setMedia){this.androidFix.play = true;this.androidFix.time = time;}else if(!isNaN(time)){ // Attempt to play it, since iOS has been ignoring commands
if(this.internal.cmdsIgnored){media.play();}try{ // !media.seekable is for old HTML5 browsers, like Firefox 3.6.
// Checking seekable.length is important for iOS6 to work with setMedia().play(time)
if(!media.seekable || typeof media.seekable === "object" && media.seekable.length > 0){media.currentTime = time;media.play();}else {throw 1;}}catch(err) {this.internal.htmlDlyCmdId = setTimeout(function(){self.play(time);},250);return; // Cancel execution and wait for the delayed command.
}}else {media.play();}this._html_checkWaitForPlay();},_html_pause:function _html_pause(time){var self=this,media=this.htmlElement.media;this.androidFix.play = false; // Cancel the play fix.
if(time > 0){ // We do not want the stop() command, which does pause(0), causing a load operation.
this._html_load(); // Loads if required and clears any delayed commands.
}else {clearTimeout(this.internal.htmlDlyCmdId);} // Order of these commands is important for Safari (Win) and IE9. Pause then change currentTime.
media.pause(); // Setup the Android Fix.
if(this.androidFix.setMedia){this.androidFix.pause = true;this.androidFix.time = time;}else if(!isNaN(time)){try{if(!media.seekable || typeof media.seekable === "object" && media.seekable.length > 0){media.currentTime = time;}else {throw 1;}}catch(err) {this.internal.htmlDlyCmdId = setTimeout(function(){self.pause(time);},250);return; // Cancel execution and wait for the delayed command.
}}if(time > 0){ // Avoids a setMedia() followed by stop() or pause(0) hiding the video play button.
this._html_checkWaitForPlay();}},_html_playHead:function _html_playHead(percent){var self=this,media=this.htmlElement.media;this._html_load(); // Loads if required and clears any delayed commands.
// This playHead() method needs a refactor to apply the android fix.
try{if(typeof media.seekable === "object" && media.seekable.length > 0){media.currentTime = percent * media.seekable.end(media.seekable.length - 1) / 100;}else if(media.duration > 0 && !isNaN(media.duration)){media.currentTime = percent * media.duration / 100;}else {throw "e";}}catch(err) {this.internal.htmlDlyCmdId = setTimeout(function(){self.playHead(percent);},250);return; // Cancel execution and wait for the delayed command.
}if(!this.status.waitForLoad){this._html_checkWaitForPlay();}},_html_checkWaitForPlay:function _html_checkWaitForPlay(){if(this.status.waitForPlay){this.status.waitForPlay = false;if(this.css.jq.videoPlay.length){this.css.jq.videoPlay.hide();}if(this.status.video){this.internal.poster.jq.hide();this.internal.video.jq.css({'width':this.status.width,'height':this.status.height});}}},_html_setProperty:function _html_setProperty(property,value){if(this.html.audio.available){this.htmlElement.audio[property] = value;}if(this.html.video.available){this.htmlElement.video[property] = value;}},_aurora_setAudio:function _aurora_setAudio(media){var self=this; // Always finds a format due to checks in setMedia()
$.each(this.formats,function(priority,format){if(self.aurora.support[format] && media[format]){self.status.src = media[format];self.status.format[format] = true;self.status.formatType = format;return false;}});this.aurora.player = new AV.Player.fromURL(this.status.src);this._addAuroraEventListeners(this.aurora.player,this.aurora);if(this.options.preload === 'auto'){this._aurora_load();this.status.waitForLoad = false;}},_aurora_resetMedia:function _aurora_resetMedia(){if(this.aurora.player){this.aurora.player.stop();}},_aurora_clearMedia:function _aurora_clearMedia(){ // Nothing to clear.
},_aurora_load:function _aurora_load(){if(this.status.waitForLoad){this.status.waitForLoad = false;this.aurora.player.preload();}},_aurora_play:function _aurora_play(time){if(!this.status.waitForLoad){if(!isNaN(time)){this.aurora.player.seek(time);}}if(!this.aurora.player.playing){this.aurora.player.play();}this.status.waitForLoad = false;this._aurora_checkWaitForPlay(); // No event from the player, update UI now.
this._updateButtons(true);this._trigger($.jPlayer.event.play);},_aurora_pause:function _aurora_pause(time){if(!isNaN(time)){this.aurora.player.seek(time * 1000);}this.aurora.player.pause();if(time > 0){ // Avoids a setMedia() followed by stop() or pause(0) hiding the video play button.
this._aurora_checkWaitForPlay();} // No event from the player, update UI now.
this._updateButtons(false);this._trigger($.jPlayer.event.pause);},_aurora_playHead:function _aurora_playHead(percent){if(this.aurora.player.duration > 0){ // The seek() sould be in milliseconds, but the only codec that works with seek (aac.js) uses seconds.
this.aurora.player.seek(percent * this.aurora.player.duration / 100); // Using seconds
}if(!this.status.waitForLoad){this._aurora_checkWaitForPlay();}},_aurora_checkWaitForPlay:function _aurora_checkWaitForPlay(){if(this.status.waitForPlay){this.status.waitForPlay = false;}},_aurora_volume:function _aurora_volume(v){this.aurora.player.volume = v * 100;},_aurora_mute:function _aurora_mute(m){if(m){this.aurora.properties.lastvolume = this.aurora.player.volume;this.aurora.player.volume = 0;}else {this.aurora.player.volume = this.aurora.properties.lastvolume;}this.aurora.properties.muted = m;},_flash_setAudio:function _flash_setAudio(media){var self=this;try{ // Always finds a format due to checks in setMedia()
$.each(this.formats,function(priority,format){if(self.flash.support[format] && media[format]){switch(format){case "m4a":case "fla":self._getMovie().fl_setAudio_m4a(media[format]);break;case "mp3":self._getMovie().fl_setAudio_mp3(media[format]);break;case "rtmpa":self._getMovie().fl_setAudio_rtmp(media[format]);break;}self.status.src = media[format];self.status.format[format] = true;self.status.formatType = format;return false;}});if(this.options.preload === 'auto'){this._flash_load();this.status.waitForLoad = false;}}catch(err) {this._flashError(err);}},_flash_setVideo:function _flash_setVideo(media){var self=this;try{ // Always finds a format due to checks in setMedia()
$.each(this.formats,function(priority,format){if(self.flash.support[format] && media[format]){switch(format){case "m4v":case "flv":self._getMovie().fl_setVideo_m4v(media[format]);break;case "rtmpv":self._getMovie().fl_setVideo_rtmp(media[format]);break;}self.status.src = media[format];self.status.format[format] = true;self.status.formatType = format;return false;}});if(this.options.preload === 'auto'){this._flash_load();this.status.waitForLoad = false;}}catch(err) {this._flashError(err);}},_flash_resetMedia:function _flash_resetMedia(){this.internal.flash.jq.css({'width':'0px','height':'0px'}); // Must do via CSS as setting attr() to zero causes a jQuery error in IE.
this._flash_pause(NaN);},_flash_clearMedia:function _flash_clearMedia(){try{this._getMovie().fl_clearMedia();}catch(err) {this._flashError(err);}},_flash_load:function _flash_load(){try{this._getMovie().fl_load();}catch(err) {this._flashError(err);}this.status.waitForLoad = false;},_flash_play:function _flash_play(time){try{this._getMovie().fl_play(time);}catch(err) {this._flashError(err);}this.status.waitForLoad = false;this._flash_checkWaitForPlay();},_flash_pause:function _flash_pause(time){try{this._getMovie().fl_pause(time);}catch(err) {this._flashError(err);}if(time > 0){ // Avoids a setMedia() followed by stop() or pause(0) hiding the video play button.
this.status.waitForLoad = false;this._flash_checkWaitForPlay();}},_flash_playHead:function _flash_playHead(p){try{this._getMovie().fl_play_head(p);}catch(err) {this._flashError(err);}if(!this.status.waitForLoad){this._flash_checkWaitForPlay();}},_flash_checkWaitForPlay:function _flash_checkWaitForPlay(){if(this.status.waitForPlay){this.status.waitForPlay = false;if(this.css.jq.videoPlay.length){this.css.jq.videoPlay.hide();}if(this.status.video){this.internal.poster.jq.hide();this.internal.flash.jq.css({'width':this.status.width,'height':this.status.height});}}},_flash_volume:function _flash_volume(v){try{this._getMovie().fl_volume(v);}catch(err) {this._flashError(err);}},_flash_mute:function _flash_mute(m){try{this._getMovie().fl_mute(m);}catch(err) {this._flashError(err);}},_getMovie:function _getMovie(){return document[this.internal.flash.id];},_getFlashPluginVersion:function _getFlashPluginVersion(){ // _getFlashPluginVersion() code influenced by:
// - FlashReplace 1.01: http://code.google.com/p/flashreplace/
// - SWFObject 2.2: http://code.google.com/p/swfobject/
var version=0,flash;if(window.ActiveXObject){try{flash = new ActiveXObject("ShockwaveFlash.ShockwaveFlash");if(flash){ // flash will return null when ActiveX is disabled
var v=flash.GetVariable("$version");if(v){v = v.split(" ")[1].split(",");version = parseInt(v[0],10) + "." + parseInt(v[1],10);}}}catch(e) {}}else if(navigator.plugins && navigator.mimeTypes.length > 0){flash = navigator.plugins["Shockwave Flash"];if(flash){version = navigator.plugins["Shockwave Flash"].description.replace(/.*\s(\d+\.\d+).*/,"$1");}}return version * 1; // Converts to a number
},_checkForFlash:function _checkForFlash(version){var flashOk=false;if(this._getFlashPluginVersion() >= version){flashOk = true;}return flashOk;},_validString:function _validString(url){return url && typeof url === "string"; // Empty strings return false
},_limitValue:function _limitValue(value,min,max){return value < min?min:value > max?max:value;},_urlNotSetError:function _urlNotSetError(context){this._error({type:$.jPlayer.error.URL_NOT_SET,context:context,message:$.jPlayer.errorMsg.URL_NOT_SET,hint:$.jPlayer.errorHint.URL_NOT_SET});},_flashError:function _flashError(error){var errorType;if(!this.internal.ready){errorType = "FLASH";}else {errorType = "FLASH_DISABLED";}this._error({type:$.jPlayer.error[errorType],context:this.internal.flash.swf,message:$.jPlayer.errorMsg[errorType] + error.message,hint:$.jPlayer.errorHint[errorType]}); // Allow the audio player to recover if display:none and then shown again, or with position:fixed on Firefox.
// This really only affects audio in a media player, as an audio player could easily move the jPlayer element away from such issues.
this.internal.flash.jq.css({'width':'1px','height':'1px'});},_error:function _error(error){this._trigger($.jPlayer.event.error,error);if(this.options.errorAlerts){this._alert("Error!" + (error.message?"\n" + error.message:"") + (error.hint?"\n" + error.hint:"") + "\nContext: " + error.context);}},_warning:function _warning(warning){this._trigger($.jPlayer.event.warning,undefined,warning);if(this.options.warningAlerts){this._alert("Warning!" + (warning.message?"\n" + warning.message:"") + (warning.hint?"\n" + warning.hint:"") + "\nContext: " + warning.context);}},_alert:function _alert(message){var msg="jPlayer " + this.version.script + " : id='" + this.internal.self.id + "' : " + message;if(!this.options.consoleAlerts){alert(msg);}else if(window.console && window.console.log){window.console.log(msg);}},_emulateHtmlBridge:function _emulateHtmlBridge(){var self=this; // Emulate methods on jPlayer's DOM element.
$.each($.jPlayer.emulateMethods.split(/\s+/g),function(i,name){self.internal.domNode[name] = function(arg){self[name](arg);};}); // Bubble jPlayer events to its DOM element.
$.each($.jPlayer.event,function(eventName,eventType){var nativeEvent=true;$.each($.jPlayer.reservedEvent.split(/\s+/g),function(i,name){if(name === eventName){nativeEvent = false;return false;}});if(nativeEvent){self.element.bind(eventType + ".jPlayer.jPlayerHtml",function(){ // With .jPlayer & .jPlayerHtml namespaces.
self._emulateHtmlUpdate();var domEvent=document.createEvent("Event");domEvent.initEvent(eventName,false,true);self.internal.domNode.dispatchEvent(domEvent);});} // The error event would require a special case
}); // IE9 has a readyState property on all elements. The document should have it, but all (except media) elements inherit it in IE9. This conflicts with Popcorn, which polls the readyState.
},_emulateHtmlUpdate:function _emulateHtmlUpdate(){var self=this;$.each($.jPlayer.emulateStatus.split(/\s+/g),function(i,name){self.internal.domNode[name] = self.status[name];});$.each($.jPlayer.emulateOptions.split(/\s+/g),function(i,name){self.internal.domNode[name] = self.options[name];});},_destroyHtmlBridge:function _destroyHtmlBridge(){var self=this; // Bridge event handlers are also removed by destroy() through .jPlayer namespace.
this.element.unbind(".jPlayerHtml"); // Remove all event handlers created by the jPlayer bridge. So you can change the emulateHtml option.
// Remove the methods and properties
var emulated=$.jPlayer.emulateMethods + " " + $.jPlayer.emulateStatus + " " + $.jPlayer.emulateOptions;$.each(emulated.split(/\s+/g),function(i,name){delete self.internal.domNode[name];});}};$.jPlayer.error = {FLASH:"e_flash",FLASH_DISABLED:"e_flash_disabled",NO_SOLUTION:"e_no_solution",NO_SUPPORT:"e_no_support",URL:"e_url",URL_NOT_SET:"e_url_not_set",VERSION:"e_version"};$.jPlayer.errorMsg = {FLASH:"jPlayer's Flash fallback is not configured correctly, or a command was issued before the jPlayer Ready event. Details: ", // Used in: _flashError()
FLASH_DISABLED:"jPlayer's Flash fallback has been disabled by the browser due to the CSS rules you have used. Details: ", // Used in: _flashError()
NO_SOLUTION:"No solution can be found by jPlayer in this browser. Neither HTML nor Flash can be used.", // Used in: _init()
NO_SUPPORT:"It is not possible to play any media format provided in setMedia() on this browser using your current options.", // Used in: setMedia()
URL:"Media URL could not be loaded.", // Used in: jPlayerFlashEvent() and _addHtmlEventListeners()
URL_NOT_SET:"Attempt to issue media playback commands, while no media url is set.", // Used in: load(), play(), pause(), stop() and playHead()
VERSION:"jPlayer " + $.jPlayer.prototype.version.script + " needs Jplayer.swf version " + $.jPlayer.prototype.version.needFlash + " but found " // Used in: jPlayerReady()
};$.jPlayer.errorHint = {FLASH:"Check your swfPath option and that Jplayer.swf is there.",FLASH_DISABLED:"Check that you have not display:none; the jPlayer entity or any ancestor.",NO_SOLUTION:"Review the jPlayer options: support and supplied.",NO_SUPPORT:"Video or audio formats defined in the supplied option are missing.",URL:"Check media URL is valid.",URL_NOT_SET:"Use setMedia() to set the media URL.",VERSION:"Update jPlayer files."};$.jPlayer.warning = {CSS_SELECTOR_COUNT:"e_css_selector_count",CSS_SELECTOR_METHOD:"e_css_selector_method",CSS_SELECTOR_STRING:"e_css_selector_string",OPTION_KEY:"e_option_key"};$.jPlayer.warningMsg = {CSS_SELECTOR_COUNT:"The number of css selectors found did not equal one: ",CSS_SELECTOR_METHOD:"The methodName given in jPlayer('cssSelector') is not a valid jPlayer method.",CSS_SELECTOR_STRING:"The methodCssSelector given in jPlayer('cssSelector') is not a String or is empty.",OPTION_KEY:"The option requested in jPlayer('option') is undefined."};$.jPlayer.warningHint = {CSS_SELECTOR_COUNT:"Check your css selector and the ancestor.",CSS_SELECTOR_METHOD:"Check your method name.",CSS_SELECTOR_STRING:"Check your css selector is a string.",OPTION_KEY:"Check your option name."};})(window.jQuery); /* Support for Zepto 1.0 compiled with optional data module.
 * For AMD or NODE/CommonJS support, you will need to manually switch the related 2 lines in the code below.
 * Search terms: "jQuery Switch" and "Zepto Switch"
 */

},{}],3:[function(require,module,exports){
(function (global){
; var __browserify_shim_require__=require;(function browserifyShim(module, exports, require, define, browserify_shim__define__module__export__) {
/*!
 * jQuery JavaScript Library v1.11.3
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-04-28T16:19Z
 */"use strict";(function(global,factory){if(typeof module === "object" && typeof module.exports === "object"){ // For CommonJS and CommonJS-like environments where a proper window is present,
// execute the factory and get jQuery
// For environments that do not inherently posses a window with a document
// (such as Node.js), expose a jQuery-making factory as module.exports
// This accentuates the need for the creation of a real window
// e.g. var jQuery = require("jquery")(window);
// See ticket #14549 for more info
module.exports = global.document?factory(global,true):function(w){if(!w.document){throw new Error("jQuery requires a window with a document");}return factory(w);};}else {factory(global);} // Pass this if window is not defined yet
})(typeof window !== "undefined"?window:undefined,function(window,noGlobal){ // Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//
var deletedIds=[];var _slice=deletedIds.slice;var concat=deletedIds.concat;var push=deletedIds.push;var indexOf=deletedIds.indexOf;var class2type={};var toString=class2type.toString;var hasOwn=class2type.hasOwnProperty;var support={};var version="1.11.3", // Define a local copy of jQuery
jQuery=function jQuery(selector,context){ // The jQuery object is actually just the init constructor 'enhanced'
// Need init if jQuery is called (just allow error to be thrown if not included)
return new jQuery.fn.init(selector,context);}, // Support: Android<4.1, IE<9
// Make sure we trim BOM and NBSP
rtrim=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, // Matches dashed string for camelizing
rmsPrefix=/^-ms-/,rdashAlpha=/-([\da-z])/gi, // Used by jQuery.camelCase as callback to replace()
fcamelCase=function fcamelCase(all,letter){return letter.toUpperCase();};jQuery.fn = jQuery.prototype = { // The current version of jQuery being used
jquery:version,constructor:jQuery, // Start with an empty selector
selector:"", // The default length of a jQuery object is 0
length:0,toArray:function toArray(){return _slice.call(this);}, // Get the Nth element in the matched element set OR
// Get the whole matched element set as a clean array
get:function get(num){return num != null? // Return just the one element from the set
num < 0?this[num + this.length]:this[num]: // Return all the elements in a clean array
_slice.call(this);}, // Take an array of elements and push it onto the stack
// (returning the new matched element set)
pushStack:function pushStack(elems){ // Build a new jQuery matched element set
var ret=jQuery.merge(this.constructor(),elems); // Add the old object onto the stack (as a reference)
ret.prevObject = this;ret.context = this.context; // Return the newly-formed element set
return ret;}, // Execute a callback for every element in the matched set.
// (You can seed the arguments with an array of args, but this is
// only used internally.)
each:function each(callback,args){return jQuery.each(this,callback,args);},map:function map(callback){return this.pushStack(jQuery.map(this,function(elem,i){return callback.call(elem,i,elem);}));},slice:function slice(){return this.pushStack(_slice.apply(this,arguments));},first:function first(){return this.eq(0);},last:function last(){return this.eq(-1);},eq:function eq(i){var len=this.length,j=+i + (i < 0?len:0);return this.pushStack(j >= 0 && j < len?[this[j]]:[]);},end:function end(){return this.prevObject || this.constructor(null);}, // For internal use only.
// Behaves like an Array's method, not like a jQuery method.
push:push,sort:deletedIds.sort,splice:deletedIds.splice};jQuery.extend = jQuery.fn.extend = function(){var src,copyIsArray,copy,name,options,clone,target=arguments[0] || {},i=1,length=arguments.length,deep=false; // Handle a deep copy situation
if(typeof target === "boolean"){deep = target; // skip the boolean and the target
target = arguments[i] || {};i++;} // Handle case when target is a string or something (possible in deep copy)
if(typeof target !== "object" && !jQuery.isFunction(target)){target = {};} // extend jQuery itself if only one argument is passed
if(i === length){target = this;i--;}for(;i < length;i++) { // Only deal with non-null/undefined values
if((options = arguments[i]) != null){ // Extend the base object
for(name in options) {src = target[name];copy = options[name]; // Prevent never-ending loop
if(target === copy){continue;} // Recurse if we're merging plain objects or arrays
if(deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))){if(copyIsArray){copyIsArray = false;clone = src && jQuery.isArray(src)?src:[];}else {clone = src && jQuery.isPlainObject(src)?src:{};} // Never move original objects, clone them
target[name] = jQuery.extend(deep,clone,copy); // Don't bring in undefined values
}else if(copy !== undefined){target[name] = copy;}}}} // Return the modified object
return target;};jQuery.extend({ // Unique for each copy of jQuery on the page
expando:"jQuery" + (version + Math.random()).replace(/\D/g,""), // Assume jQuery is ready without the ready module
isReady:true,error:function error(msg){throw new Error(msg);},noop:function noop(){}, // See test/unit/core.js for details concerning isFunction.
// Since version 1.3, DOM methods and functions like alert
// aren't supported. They return false on IE (#2968).
isFunction:function isFunction(obj){return jQuery.type(obj) === "function";},isArray:Array.isArray || function(obj){return jQuery.type(obj) === "array";},isWindow:function isWindow(obj){ /* jshint eqeqeq: false */return obj != null && obj == obj.window;},isNumeric:function isNumeric(obj){ // parseFloat NaNs numeric-cast false positives (null|true|false|"")
// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
// subtraction forces infinities to NaN
// adding 1 corrects loss of precision from parseFloat (#15100)
return !jQuery.isArray(obj) && obj - parseFloat(obj) + 1 >= 0;},isEmptyObject:function isEmptyObject(obj){var name;for(name in obj) {return false;}return true;},isPlainObject:function isPlainObject(obj){var key; // Must be an Object.
// Because of IE, we also have to check the presence of the constructor property.
// Make sure that DOM nodes and window objects don't pass through, as well
if(!obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow(obj)){return false;}try{ // Not own constructor property must be Object
if(obj.constructor && !hasOwn.call(obj,"constructor") && !hasOwn.call(obj.constructor.prototype,"isPrototypeOf")){return false;}}catch(e) { // IE8,9 Will throw exceptions on certain host objects #9897
return false;} // Support: IE<9
// Handle iteration over inherited properties before own properties.
if(support.ownLast){for(key in obj) {return hasOwn.call(obj,key);}} // Own properties are enumerated firstly, so to speed up,
// if last one is own, then all properties are own.
for(key in obj) {}return key === undefined || hasOwn.call(obj,key);},type:function type(obj){if(obj == null){return obj + "";}return typeof obj === "object" || typeof obj === "function"?class2type[toString.call(obj)] || "object":typeof obj;}, // Evaluates a script in a global context
// Workarounds based on findings by Jim Driscoll
// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
globalEval:function globalEval(data){if(data && jQuery.trim(data)){ // We use execScript on Internet Explorer
// We use an anonymous function so that context is window
// rather than jQuery in Firefox
(window.execScript || function(data){window["eval"].call(window,data);})(data);}}, // Convert dashed to camelCase; used by the css and data modules
// Microsoft forgot to hump their vendor prefix (#9572)
camelCase:function camelCase(string){return string.replace(rmsPrefix,"ms-").replace(rdashAlpha,fcamelCase);},nodeName:function nodeName(elem,name){return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();}, // args is for internal usage only
each:function each(obj,callback,args){var value,i=0,length=obj.length,isArray=isArraylike(obj);if(args){if(isArray){for(;i < length;i++) {value = callback.apply(obj[i],args);if(value === false){break;}}}else {for(i in obj) {value = callback.apply(obj[i],args);if(value === false){break;}}} // A special, fast, case for the most common use of each
}else {if(isArray){for(;i < length;i++) {value = callback.call(obj[i],i,obj[i]);if(value === false){break;}}}else {for(i in obj) {value = callback.call(obj[i],i,obj[i]);if(value === false){break;}}}}return obj;}, // Support: Android<4.1, IE<9
trim:function trim(text){return text == null?"":(text + "").replace(rtrim,"");}, // results is for internal usage only
makeArray:function makeArray(arr,results){var ret=results || [];if(arr != null){if(isArraylike(Object(arr))){jQuery.merge(ret,typeof arr === "string"?[arr]:arr);}else {push.call(ret,arr);}}return ret;},inArray:function inArray(elem,arr,i){var len;if(arr){if(indexOf){return indexOf.call(arr,elem,i);}len = arr.length;i = i?i < 0?Math.max(0,len + i):i:0;for(;i < len;i++) { // Skip accessing in sparse arrays
if(i in arr && arr[i] === elem){return i;}}}return -1;},merge:function merge(first,second){var len=+second.length,j=0,i=first.length;while(j < len) {first[i++] = second[j++];} // Support: IE<9
// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)
if(len !== len){while(second[j] !== undefined) {first[i++] = second[j++];}}first.length = i;return first;},grep:function grep(elems,callback,invert){var callbackInverse,matches=[],i=0,length=elems.length,callbackExpect=!invert; // Go through the array, only saving the items
// that pass the validator function
for(;i < length;i++) {callbackInverse = !callback(elems[i],i);if(callbackInverse !== callbackExpect){matches.push(elems[i]);}}return matches;}, // arg is for internal usage only
map:function map(elems,callback,arg){var value,i=0,length=elems.length,isArray=isArraylike(elems),ret=[]; // Go through the array, translating each of the items to their new values
if(isArray){for(;i < length;i++) {value = callback(elems[i],i,arg);if(value != null){ret.push(value);}} // Go through every key on the object,
}else {for(i in elems) {value = callback(elems[i],i,arg);if(value != null){ret.push(value);}}} // Flatten any nested arrays
return concat.apply([],ret);}, // A global GUID counter for objects
guid:1, // Bind a function to a context, optionally partially applying any
// arguments.
proxy:function proxy(fn,context){var args,proxy,tmp;if(typeof context === "string"){tmp = fn[context];context = fn;fn = tmp;} // Quick check to determine if target is callable, in the spec
// this throws a TypeError, but we will just return undefined.
if(!jQuery.isFunction(fn)){return undefined;} // Simulated bind
args = _slice.call(arguments,2);proxy = function(){return fn.apply(context || this,args.concat(_slice.call(arguments)));}; // Set the guid of unique handler to the same of original handler, so it can be removed
proxy.guid = fn.guid = fn.guid || jQuery.guid++;return proxy;},now:function now(){return +new Date();}, // jQuery.support is not used in Core but other projects attach their
// properties to it so it needs to exist.
support:support}); // Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(i,name){class2type["[object " + name + "]"] = name.toLowerCase();});function isArraylike(obj){ // Support: iOS 8.2 (not reproducible in simulator)
// `in` check used to prevent JIT error (gh-2145)
// hasOwn isn't used here due to false negatives
// regarding Nodelist length in IE
var length="length" in obj && obj.length,type=jQuery.type(obj);if(type === "function" || jQuery.isWindow(obj)){return false;}if(obj.nodeType === 1 && length){return true;}return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;}var Sizzle= /*!
 * Sizzle CSS Selector Engine v2.2.0-pre
 * http://sizzlejs.com/
 *
 * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-12-16
 */(function(window){var i,support,Expr,getText,isXML,tokenize,compile,select,outermostContext,sortInput,hasDuplicate, // Local document vars
setDocument,document,docElem,documentIsHTML,rbuggyQSA,rbuggyMatches,matches,contains, // Instance-specific data
expando="sizzle" + 1 * new Date(),preferredDoc=window.document,dirruns=0,done=0,classCache=createCache(),tokenCache=createCache(),compilerCache=createCache(),sortOrder=function sortOrder(a,b){if(a === b){hasDuplicate = true;}return 0;}, // General-purpose constants
MAX_NEGATIVE=1 << 31, // Instance methods
hasOwn=({}).hasOwnProperty,arr=[],pop=arr.pop,push_native=arr.push,push=arr.push,slice=arr.slice, // Use a stripped-down indexOf as it's faster than native
// http://jsperf.com/thor-indexof-vs-for/5
indexOf=function indexOf(list,elem){var i=0,len=list.length;for(;i < len;i++) {if(list[i] === elem){return i;}}return -1;},booleans="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", // Regular expressions
// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
whitespace="[\\x20\\t\\r\\n\\f]", // http://www.w3.org/TR/css3-syntax/#characters
characterEncoding="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+", // Loosely modeled on CSS identifier characters
// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
identifier=characterEncoding.replace("w","w#"), // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
attributes="\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +  // Operator (capture 2)
"*([*^$|!~]?=)" + whitespace +  // "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",pseudos=":(" + characterEncoding + ")(?:\\((" +  // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
// 1. quoted (capture 3; capture 4 or capture 5)
"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +  // 2. simple (capture 6)
"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +  // 3. anything else (capture 2)
".*" + ")\\)|)", // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
rwhitespace=new RegExp(whitespace + "+","g"),rtrim=new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$","g"),rcomma=new RegExp("^" + whitespace + "*," + whitespace + "*"),rcombinators=new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),rattributeQuotes=new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]","g"),rpseudo=new RegExp(pseudos),ridentifier=new RegExp("^" + identifier + "$"),matchExpr={"ID":new RegExp("^#(" + characterEncoding + ")"),"CLASS":new RegExp("^\\.(" + characterEncoding + ")"),"TAG":new RegExp("^(" + characterEncoding.replace("w","w*") + ")"),"ATTR":new RegExp("^" + attributes),"PSEUDO":new RegExp("^" + pseudos),"CHILD":new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)","i"),"bool":new RegExp("^(?:" + booleans + ")$","i"), // For use in libraries implementing .is()
// We use this for POS matching in `select`
"needsContext":new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)","i")},rinputs=/^(?:input|select|textarea|button)$/i,rheader=/^h\d$/i,rnative=/^[^{]+\{\s*\[native \w/, // Easily-parseable/retrievable ID or TAG or CLASS selectors
rquickExpr=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,rsibling=/[+~]/,rescape=/'|\\/g, // CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
runescape=new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)","ig"),funescape=function funescape(_,escaped,escapedWhitespace){var high="0x" + escaped - 0x10000; // NaN means non-codepoint
// Support: Firefox<24
// Workaround erroneous numeric interpretation of +"0x"
return high !== high || escapedWhitespace?escaped:high < 0? // BMP codepoint
String.fromCharCode(high + 0x10000): // Supplemental Plane codepoint (surrogate pair)
String.fromCharCode(high >> 10 | 0xD800,high & 0x3FF | 0xDC00);}, // Used for iframes
// See setDocument()
// Removing the function wrapper causes a "Permission Denied"
// error in IE
unloadHandler=function unloadHandler(){setDocument();}; // Optimize for push.apply( _, NodeList )
try{push.apply(arr = slice.call(preferredDoc.childNodes),preferredDoc.childNodes); // Support: Android<4.0
// Detect silently failing push.apply
arr[preferredDoc.childNodes.length].nodeType;}catch(e) {push = {apply:arr.length? // Leverage slice if possible
function(target,els){push_native.apply(target,slice.call(els));}: // Support: IE<9
function(target,els){var j=target.length,i=0; // Can't trust NodeList.length
while(target[j++] = els[i++]) {}target.length = j - 1;}};}function Sizzle(selector,context,results,seed){var match,elem,m,nodeType, // QSA vars
i,groups,old,nid,newContext,newSelector;if((context?context.ownerDocument || context:preferredDoc) !== document){setDocument(context);}context = context || document;results = results || [];nodeType = context.nodeType;if(typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11){return results;}if(!seed && documentIsHTML){ // Try to shortcut find operations when possible (e.g., not under DocumentFragment)
if(nodeType !== 11 && (match = rquickExpr.exec(selector))){ // Speed-up: Sizzle("#ID")
if(m = match[1]){if(nodeType === 9){elem = context.getElementById(m); // Check parentNode to catch when Blackberry 4.6 returns
// nodes that are no longer in the document (jQuery #6963)
if(elem && elem.parentNode){ // Handle the case where IE, Opera, and Webkit return items
// by name instead of ID
if(elem.id === m){results.push(elem);return results;}}else {return results;}}else { // Context is not a document
if(context.ownerDocument && (elem = context.ownerDocument.getElementById(m)) && contains(context,elem) && elem.id === m){results.push(elem);return results;}} // Speed-up: Sizzle("TAG")
}else if(match[2]){push.apply(results,context.getElementsByTagName(selector));return results; // Speed-up: Sizzle(".CLASS")
}else if((m = match[3]) && support.getElementsByClassName){push.apply(results,context.getElementsByClassName(m));return results;}} // QSA path
if(support.qsa && (!rbuggyQSA || !rbuggyQSA.test(selector))){nid = old = expando;newContext = context;newSelector = nodeType !== 1 && selector; // qSA works strangely on Element-rooted queries
// We can work around this by specifying an extra ID on the root
// and working up from there (Thanks to Andrew Dupont for the technique)
// IE 8 doesn't work on object elements
if(nodeType === 1 && context.nodeName.toLowerCase() !== "object"){groups = tokenize(selector);if(old = context.getAttribute("id")){nid = old.replace(rescape,"\\$&");}else {context.setAttribute("id",nid);}nid = "[id='" + nid + "'] ";i = groups.length;while(i--) {groups[i] = nid + toSelector(groups[i]);}newContext = rsibling.test(selector) && testContext(context.parentNode) || context;newSelector = groups.join(",");}if(newSelector){try{push.apply(results,newContext.querySelectorAll(newSelector));return results;}catch(qsaError) {}finally {if(!old){context.removeAttribute("id");}}}}} // All others
return select(selector.replace(rtrim,"$1"),context,results,seed);} /**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */function createCache(){var keys=[];function cache(key,value){ // Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
if(keys.push(key + " ") > Expr.cacheLength){ // Only keep the most recent entries
delete cache[keys.shift()];}return cache[key + " "] = value;}return cache;} /**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */function markFunction(fn){fn[expando] = true;return fn;} /**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */function assert(fn){var div=document.createElement("div");try{return !!fn(div);}catch(e) {return false;}finally { // Remove from its parent by default
if(div.parentNode){div.parentNode.removeChild(div);} // release memory in IE
div = null;}} /**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */function addHandle(attrs,handler){var arr=attrs.split("|"),i=attrs.length;while(i--) {Expr.attrHandle[arr[i]] = handler;}} /**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */function siblingCheck(a,b){var cur=b && a,diff=cur && a.nodeType === 1 && b.nodeType === 1 && (~b.sourceIndex || MAX_NEGATIVE) - (~a.sourceIndex || MAX_NEGATIVE); // Use IE sourceIndex if available on both nodes
if(diff){return diff;} // Check if b follows a
if(cur){while(cur = cur.nextSibling) {if(cur === b){return -1;}}}return a?1:-1;} /**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */function createInputPseudo(type){return function(elem){var name=elem.nodeName.toLowerCase();return name === "input" && elem.type === type;};} /**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */function createButtonPseudo(type){return function(elem){var name=elem.nodeName.toLowerCase();return (name === "input" || name === "button") && elem.type === type;};} /**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */function createPositionalPseudo(fn){return markFunction(function(argument){argument = +argument;return markFunction(function(seed,matches){var j,matchIndexes=fn([],seed.length,argument),i=matchIndexes.length; // Match elements found at the specified indexes
while(i--) {if(seed[j = matchIndexes[i]]){seed[j] = !(matches[j] = seed[j]);}}});});} /**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */function testContext(context){return context && typeof context.getElementsByTagName !== "undefined" && context;} // Expose support vars for convenience
support = Sizzle.support = {}; /**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */isXML = Sizzle.isXML = function(elem){ // documentElement is verified for cases where it doesn't yet exist
// (such as loading iframes in IE - #4833)
var documentElement=elem && (elem.ownerDocument || elem).documentElement;return documentElement?documentElement.nodeName !== "HTML":false;}; /**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */setDocument = Sizzle.setDocument = function(node){var hasCompare,parent,doc=node?node.ownerDocument || node:preferredDoc; // If no document and documentElement is available, return
if(doc === document || doc.nodeType !== 9 || !doc.documentElement){return document;} // Set our document
document = doc;docElem = doc.documentElement;parent = doc.defaultView; // Support: IE>8
// If iframe document is assigned to "document" variable and if iframe has been reloaded,
// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
// IE6-8 do not support the defaultView property so parent will be undefined
if(parent && parent !== parent.top){ // IE11 does not have attachEvent, so all must suffer
if(parent.addEventListener){parent.addEventListener("unload",unloadHandler,false);}else if(parent.attachEvent){parent.attachEvent("onunload",unloadHandler);}} /* Support tests
	---------------------------------------------------------------------- */documentIsHTML = !isXML(doc); /* Attributes
	---------------------------------------------------------------------- */ // Support: IE<8
// Verify that getAttribute really returns attributes and not properties
// (excepting IE8 booleans)
support.attributes = assert(function(div){div.className = "i";return !div.getAttribute("className");}); /* getElement(s)By*
	---------------------------------------------------------------------- */ // Check if getElementsByTagName("*") returns only elements
support.getElementsByTagName = assert(function(div){div.appendChild(doc.createComment(""));return !div.getElementsByTagName("*").length;}); // Support: IE<9
support.getElementsByClassName = rnative.test(doc.getElementsByClassName); // Support: IE<10
// Check if getElementById returns elements by name
// The broken getElementById methods don't pick up programatically-set names,
// so use a roundabout getElementsByName test
support.getById = assert(function(div){docElem.appendChild(div).id = expando;return !doc.getElementsByName || !doc.getElementsByName(expando).length;}); // ID find and filter
if(support.getById){Expr.find["ID"] = function(id,context){if(typeof context.getElementById !== "undefined" && documentIsHTML){var m=context.getElementById(id); // Check parentNode to catch when Blackberry 4.6 returns
// nodes that are no longer in the document #6963
return m && m.parentNode?[m]:[];}};Expr.filter["ID"] = function(id){var attrId=id.replace(runescape,funescape);return function(elem){return elem.getAttribute("id") === attrId;};};}else { // Support: IE6/7
// getElementById is not reliable as a find shortcut
delete Expr.find["ID"];Expr.filter["ID"] = function(id){var attrId=id.replace(runescape,funescape);return function(elem){var node=typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");return node && node.value === attrId;};};} // Tag
Expr.find["TAG"] = support.getElementsByTagName?function(tag,context){if(typeof context.getElementsByTagName !== "undefined"){return context.getElementsByTagName(tag); // DocumentFragment nodes don't have gEBTN
}else if(support.qsa){return context.querySelectorAll(tag);}}:function(tag,context){var elem,tmp=[],i=0, // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
results=context.getElementsByTagName(tag); // Filter out possible comments
if(tag === "*"){while(elem = results[i++]) {if(elem.nodeType === 1){tmp.push(elem);}}return tmp;}return results;}; // Class
Expr.find["CLASS"] = support.getElementsByClassName && function(className,context){if(documentIsHTML){return context.getElementsByClassName(className);}}; /* QSA/matchesSelector
	---------------------------------------------------------------------- */ // QSA and matchesSelector support
// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
rbuggyMatches = []; // qSa(:focus) reports false when true (Chrome 21)
// We allow this because of a bug in IE8/9 that throws an error
// whenever `document.activeElement` is accessed on an iframe
// So, we allow :focus to pass through QSA all the time to avoid the IE error
// See http://bugs.jquery.com/ticket/13378
rbuggyQSA = [];if(support.qsa = rnative.test(doc.querySelectorAll)){ // Build QSA regex
// Regex strategy adopted from Diego Perini
assert(function(div){ // Select is set to empty string on purpose
// This is to test IE's treatment of not explicitly
// setting a boolean content attribute,
// since its presence should be enough
// http://bugs.jquery.com/ticket/12359
docElem.appendChild(div).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\f]' msallowcapture=''>" + "<option selected=''></option></select>"; // Support: IE8, Opera 11-12.16
// Nothing should be selected when empty strings follow ^= or $= or *=
// The test attribute must be unknown in Opera but "safe" for WinRT
// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
if(div.querySelectorAll("[msallowcapture^='']").length){rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");} // Support: IE8
// Boolean attributes and "value" are not treated correctly
if(!div.querySelectorAll("[selected]").length){rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");} // Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
if(!div.querySelectorAll("[id~=" + expando + "-]").length){rbuggyQSA.push("~=");} // Webkit/Opera - :checked should return selected option elements
// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
// IE8 throws error here and will not see later tests
if(!div.querySelectorAll(":checked").length){rbuggyQSA.push(":checked");} // Support: Safari 8+, iOS 8+
// https://bugs.webkit.org/show_bug.cgi?id=136851
// In-page `selector#id sibing-combinator selector` fails
if(!div.querySelectorAll("a#" + expando + "+*").length){rbuggyQSA.push(".#.+[+~]");}});assert(function(div){ // Support: Windows 8 Native Apps
// The type and name attributes are restricted during .innerHTML assignment
var input=doc.createElement("input");input.setAttribute("type","hidden");div.appendChild(input).setAttribute("name","D"); // Support: IE8
// Enforce case-sensitivity of name attribute
if(div.querySelectorAll("[name=d]").length){rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");} // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
// IE8 throws error here and will not see later tests
if(!div.querySelectorAll(":enabled").length){rbuggyQSA.push(":enabled",":disabled");} // Opera 10-11 does not throw on post-comma invalid pseudos
div.querySelectorAll("*,:x");rbuggyQSA.push(",.*:");});}if(support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)){assert(function(div){ // Check to see if it's possible to do matchesSelector
// on a disconnected node (IE 9)
support.disconnectedMatch = matches.call(div,"div"); // This should fail with an exception
// Gecko does not error, returns false instead
matches.call(div,"[s!='']:x");rbuggyMatches.push("!=",pseudos);});}rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|")); /* Contains
	---------------------------------------------------------------------- */hasCompare = rnative.test(docElem.compareDocumentPosition); // Element contains another
// Purposefully does not implement inclusive descendent
// As in, an element does not contain itself
contains = hasCompare || rnative.test(docElem.contains)?function(a,b){var adown=a.nodeType === 9?a.documentElement:a,bup=b && b.parentNode;return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains?adown.contains(bup):a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));}:function(a,b){if(b){while(b = b.parentNode) {if(b === a){return true;}}}return false;}; /* Sorting
	---------------------------------------------------------------------- */ // Document order sorting
sortOrder = hasCompare?function(a,b){ // Flag for duplicate removal
if(a === b){hasDuplicate = true;return 0;} // Sort on method existence if only one input has compareDocumentPosition
var compare=!a.compareDocumentPosition - !b.compareDocumentPosition;if(compare){return compare;} // Calculate position if both inputs belong to the same document
compare = (a.ownerDocument || a) === (b.ownerDocument || b)?a.compareDocumentPosition(b): // Otherwise we know they are disconnected
1; // Disconnected nodes
if(compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare){ // Choose the first element that is related to our preferred document
if(a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc,a)){return -1;}if(b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc,b)){return 1;} // Maintain original order
return sortInput?indexOf(sortInput,a) - indexOf(sortInput,b):0;}return compare & 4?-1:1;}:function(a,b){ // Exit early if the nodes are identical
if(a === b){hasDuplicate = true;return 0;}var cur,i=0,aup=a.parentNode,bup=b.parentNode,ap=[a],bp=[b]; // Parentless nodes are either documents or disconnected
if(!aup || !bup){return a === doc?-1:b === doc?1:aup?-1:bup?1:sortInput?indexOf(sortInput,a) - indexOf(sortInput,b):0; // If the nodes are siblings, we can do a quick check
}else if(aup === bup){return siblingCheck(a,b);} // Otherwise we need full lists of their ancestors for comparison
cur = a;while(cur = cur.parentNode) {ap.unshift(cur);}cur = b;while(cur = cur.parentNode) {bp.unshift(cur);} // Walk down the tree looking for a discrepancy
while(ap[i] === bp[i]) {i++;}return i? // Do a sibling check if the nodes have a common ancestor
siblingCheck(ap[i],bp[i]): // Otherwise nodes in our document sort first
ap[i] === preferredDoc?-1:bp[i] === preferredDoc?1:0;};return doc;};Sizzle.matches = function(expr,elements){return Sizzle(expr,null,null,elements);};Sizzle.matchesSelector = function(elem,expr){ // Set document vars if needed
if((elem.ownerDocument || elem) !== document){setDocument(elem);} // Make sure that attribute selectors are quoted
expr = expr.replace(rattributeQuotes,"='$1']");if(support.matchesSelector && documentIsHTML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))){try{var ret=matches.call(elem,expr); // IE 9's matchesSelector returns false on disconnected nodes
if(ret || support.disconnectedMatch ||  // As well, disconnected nodes are said to be in a document
// fragment in IE 9
elem.document && elem.document.nodeType !== 11){return ret;}}catch(e) {}}return Sizzle(expr,document,null,[elem]).length > 0;};Sizzle.contains = function(context,elem){ // Set document vars if needed
if((context.ownerDocument || context) !== document){setDocument(context);}return contains(context,elem);};Sizzle.attr = function(elem,name){ // Set document vars if needed
if((elem.ownerDocument || elem) !== document){setDocument(elem);}var fn=Expr.attrHandle[name.toLowerCase()], // Don't get fooled by Object.prototype properties (jQuery #13807)
val=fn && hasOwn.call(Expr.attrHandle,name.toLowerCase())?fn(elem,name,!documentIsHTML):undefined;return val !== undefined?val:support.attributes || !documentIsHTML?elem.getAttribute(name):(val = elem.getAttributeNode(name)) && val.specified?val.value:null;};Sizzle.error = function(msg){throw new Error("Syntax error, unrecognized expression: " + msg);}; /**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */Sizzle.uniqueSort = function(results){var elem,duplicates=[],j=0,i=0; // Unless we *know* we can detect duplicates, assume their presence
hasDuplicate = !support.detectDuplicates;sortInput = !support.sortStable && results.slice(0);results.sort(sortOrder);if(hasDuplicate){while(elem = results[i++]) {if(elem === results[i]){j = duplicates.push(i);}}while(j--) {results.splice(duplicates[j],1);}} // Clear input after sorting to release objects
// See https://github.com/jquery/sizzle/pull/225
sortInput = null;return results;}; /**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */getText = Sizzle.getText = function(elem){var node,ret="",i=0,nodeType=elem.nodeType;if(!nodeType){ // If no nodeType, this is expected to be an array
while(node = elem[i++]) { // Do not traverse comment nodes
ret += getText(node);}}else if(nodeType === 1 || nodeType === 9 || nodeType === 11){ // Use textContent for elements
// innerText usage removed for consistency of new lines (jQuery #11153)
if(typeof elem.textContent === "string"){return elem.textContent;}else { // Traverse its children
for(elem = elem.firstChild;elem;elem = elem.nextSibling) {ret += getText(elem);}}}else if(nodeType === 3 || nodeType === 4){return elem.nodeValue;} // Do not include comment or processing instruction nodes
return ret;};Expr = Sizzle.selectors = { // Can be adjusted by the user
cacheLength:50,createPseudo:markFunction,match:matchExpr,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:true}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:true},"~":{dir:"previousSibling"}},preFilter:{"ATTR":function ATTR(match){match[1] = match[1].replace(runescape,funescape); // Move the given value to match[3] whether quoted or unquoted
match[3] = (match[3] || match[4] || match[5] || "").replace(runescape,funescape);if(match[2] === "~="){match[3] = " " + match[3] + " ";}return match.slice(0,4);},"CHILD":function CHILD(match){ /* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/match[1] = match[1].toLowerCase();if(match[1].slice(0,3) === "nth"){ // nth-* requires argument
if(!match[3]){Sizzle.error(match[0]);} // numeric x and y parameters for Expr.filter.CHILD
// remember that false/true cast respectively to 0/1
match[4] = +(match[4]?match[5] + (match[6] || 1):2 * (match[3] === "even" || match[3] === "odd"));match[5] = +(match[7] + match[8] || match[3] === "odd"); // other types prohibit arguments
}else if(match[3]){Sizzle.error(match[0]);}return match;},"PSEUDO":function PSEUDO(match){var excess,unquoted=!match[6] && match[2];if(matchExpr["CHILD"].test(match[0])){return null;} // Accept quoted arguments as-is
if(match[3]){match[2] = match[4] || match[5] || ""; // Strip excess characters from unquoted arguments
}else if(unquoted && rpseudo.test(unquoted) && ( // Get excess from tokenize (recursively)
excess = tokenize(unquoted,true)) && ( // advance to the next closing parenthesis
excess = unquoted.indexOf(")",unquoted.length - excess) - unquoted.length)){ // excess is a negative index
match[0] = match[0].slice(0,excess);match[2] = unquoted.slice(0,excess);} // Return only captures needed by the pseudo filter method (type and argument)
return match.slice(0,3);}},filter:{"TAG":function TAG(nodeNameSelector){var nodeName=nodeNameSelector.replace(runescape,funescape).toLowerCase();return nodeNameSelector === "*"?function(){return true;}:function(elem){return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;};},"CLASS":function CLASS(className){var pattern=classCache[className + " "];return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className,function(elem){return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");});},"ATTR":function ATTR(name,operator,check){return function(elem){var result=Sizzle.attr(elem,name);if(result == null){return operator === "!=";}if(!operator){return true;}result += "";return operator === "="?result === check:operator === "!="?result !== check:operator === "^="?check && result.indexOf(check) === 0:operator === "*="?check && result.indexOf(check) > -1:operator === "$="?check && result.slice(-check.length) === check:operator === "~="?(" " + result.replace(rwhitespace," ") + " ").indexOf(check) > -1:operator === "|="?result === check || result.slice(0,check.length + 1) === check + "-":false;};},"CHILD":function CHILD(type,what,argument,first,last){var simple=type.slice(0,3) !== "nth",forward=type.slice(-4) !== "last",ofType=what === "of-type";return first === 1 && last === 0? // Shortcut for :nth-*(n)
function(elem){return !!elem.parentNode;}:function(elem,context,xml){var cache,outerCache,node,diff,nodeIndex,start,dir=simple !== forward?"nextSibling":"previousSibling",parent=elem.parentNode,name=ofType && elem.nodeName.toLowerCase(),useCache=!xml && !ofType;if(parent){ // :(first|last|only)-(child|of-type)
if(simple){while(dir) {node = elem;while(node = node[dir]) {if(ofType?node.nodeName.toLowerCase() === name:node.nodeType === 1){return false;}} // Reverse direction for :only-* (if we haven't yet done so)
start = dir = type === "only" && !start && "nextSibling";}return true;}start = [forward?parent.firstChild:parent.lastChild]; // non-xml :nth-child(...) stores cache data on `parent`
if(forward && useCache){ // Seek `elem` from a previously-cached index
outerCache = parent[expando] || (parent[expando] = {});cache = outerCache[type] || [];nodeIndex = cache[0] === dirruns && cache[1];diff = cache[0] === dirruns && cache[2];node = nodeIndex && parent.childNodes[nodeIndex];while(node = ++nodeIndex && node && node[dir] || ( // Fallback to seeking `elem` from the start
diff = nodeIndex = 0) || start.pop()) { // When found, cache indexes on `parent` and break
if(node.nodeType === 1 && ++diff && node === elem){outerCache[type] = [dirruns,nodeIndex,diff];break;}} // Use previously-cached element index if available
}else if(useCache && (cache = (elem[expando] || (elem[expando] = {}))[type]) && cache[0] === dirruns){diff = cache[1]; // xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
}else { // Use the same loop as above to seek `elem` from the start
while(node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {if((ofType?node.nodeName.toLowerCase() === name:node.nodeType === 1) && ++diff){ // Cache the index of each encountered element
if(useCache){(node[expando] || (node[expando] = {}))[type] = [dirruns,diff];}if(node === elem){break;}}}} // Incorporate the offset, then check against cycle size
diff -= last;return diff === first || diff % first === 0 && diff / first >= 0;}};},"PSEUDO":function PSEUDO(pseudo,argument){ // pseudo-class names are case-insensitive
// http://www.w3.org/TR/selectors/#pseudo-classes
// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
// Remember that setFilters inherits from pseudos
var args,fn=Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo); // The user may use createPseudo to indicate that
// arguments are needed to create the filter function
// just as Sizzle does
if(fn[expando]){return fn(argument);} // But maintain support for old signatures
if(fn.length > 1){args = [pseudo,pseudo,"",argument];return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase())?markFunction(function(seed,matches){var idx,matched=fn(seed,argument),i=matched.length;while(i--) {idx = indexOf(seed,matched[i]);seed[idx] = !(matches[idx] = matched[i]);}}):function(elem){return fn(elem,0,args);};}return fn;}},pseudos:{ // Potentially complex pseudos
"not":markFunction(function(selector){ // Trim the selector passed to compile
// to avoid treating leading and trailing
// spaces as combinators
var input=[],results=[],matcher=compile(selector.replace(rtrim,"$1"));return matcher[expando]?markFunction(function(seed,matches,context,xml){var elem,unmatched=matcher(seed,null,xml,[]),i=seed.length; // Match elements unmatched by `matcher`
while(i--) {if(elem = unmatched[i]){seed[i] = !(matches[i] = elem);}}}):function(elem,context,xml){input[0] = elem;matcher(input,null,xml,results); // Don't keep the element (issue #299)
input[0] = null;return !results.pop();};}),"has":markFunction(function(selector){return function(elem){return Sizzle(selector,elem).length > 0;};}),"contains":markFunction(function(text){text = text.replace(runescape,funescape);return function(elem){return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;};}), // "Whether an element is represented by a :lang() selector
// is based solely on the element's language value
// being equal to the identifier C,
// or beginning with the identifier C immediately followed by "-".
// The matching of C against the element's language value is performed case-insensitively.
// The identifier C does not have to be a valid language name."
// http://www.w3.org/TR/selectors/#lang-pseudo
"lang":markFunction(function(lang){ // lang value must be a valid identifier
if(!ridentifier.test(lang || "")){Sizzle.error("unsupported lang: " + lang);}lang = lang.replace(runescape,funescape).toLowerCase();return function(elem){var elemLang;do {if(elemLang = documentIsHTML?elem.lang:elem.getAttribute("xml:lang") || elem.getAttribute("lang")){elemLang = elemLang.toLowerCase();return elemLang === lang || elemLang.indexOf(lang + "-") === 0;}}while((elem = elem.parentNode) && elem.nodeType === 1);return false;};}), // Miscellaneous
"target":function target(elem){var hash=window.location && window.location.hash;return hash && hash.slice(1) === elem.id;},"root":function root(elem){return elem === docElem;},"focus":function focus(elem){return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);}, // Boolean properties
"enabled":function enabled(elem){return elem.disabled === false;},"disabled":function disabled(elem){return elem.disabled === true;},"checked":function checked(elem){ // In CSS3, :checked should return both checked and selected elements
// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
var nodeName=elem.nodeName.toLowerCase();return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;},"selected":function selected(elem){ // Accessing this property makes selected-by-default
// options in Safari work properly
if(elem.parentNode){elem.parentNode.selectedIndex;}return elem.selected === true;}, // Contents
"empty":function empty(elem){ // http://www.w3.org/TR/selectors/#empty-pseudo
// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
//   but not by others (comment: 8; processing instruction: 7; etc.)
// nodeType < 6 works because attributes (2) do not appear as children
for(elem = elem.firstChild;elem;elem = elem.nextSibling) {if(elem.nodeType < 6){return false;}}return true;},"parent":function parent(elem){return !Expr.pseudos["empty"](elem);}, // Element/input types
"header":function header(elem){return rheader.test(elem.nodeName);},"input":function input(elem){return rinputs.test(elem.nodeName);},"button":function button(elem){var name=elem.nodeName.toLowerCase();return name === "input" && elem.type === "button" || name === "button";},"text":function text(elem){var attr;return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && ( // Support: IE<8
// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
(attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");}, // Position-in-collection
"first":createPositionalPseudo(function(){return [0];}),"last":createPositionalPseudo(function(matchIndexes,length){return [length - 1];}),"eq":createPositionalPseudo(function(matchIndexes,length,argument){return [argument < 0?argument + length:argument];}),"even":createPositionalPseudo(function(matchIndexes,length){var i=0;for(;i < length;i += 2) {matchIndexes.push(i);}return matchIndexes;}),"odd":createPositionalPseudo(function(matchIndexes,length){var i=1;for(;i < length;i += 2) {matchIndexes.push(i);}return matchIndexes;}),"lt":createPositionalPseudo(function(matchIndexes,length,argument){var i=argument < 0?argument + length:argument;for(;--i >= 0;) {matchIndexes.push(i);}return matchIndexes;}),"gt":createPositionalPseudo(function(matchIndexes,length,argument){var i=argument < 0?argument + length:argument;for(;++i < length;) {matchIndexes.push(i);}return matchIndexes;})}};Expr.pseudos["nth"] = Expr.pseudos["eq"]; // Add button/input type pseudos
for(i in {radio:true,checkbox:true,file:true,password:true,image:true}) {Expr.pseudos[i] = createInputPseudo(i);}for(i in {submit:true,reset:true}) {Expr.pseudos[i] = createButtonPseudo(i);} // Easy API for creating new setFilters
function setFilters(){}setFilters.prototype = Expr.filters = Expr.pseudos;Expr.setFilters = new setFilters();tokenize = Sizzle.tokenize = function(selector,parseOnly){var matched,match,tokens,type,soFar,groups,preFilters,cached=tokenCache[selector + " "];if(cached){return parseOnly?0:cached.slice(0);}soFar = selector;groups = [];preFilters = Expr.preFilter;while(soFar) { // Comma and first run
if(!matched || (match = rcomma.exec(soFar))){if(match){ // Don't consume trailing commas as valid
soFar = soFar.slice(match[0].length) || soFar;}groups.push(tokens = []);}matched = false; // Combinators
if(match = rcombinators.exec(soFar)){matched = match.shift();tokens.push({value:matched, // Cast descendant combinators to space
type:match[0].replace(rtrim," ")});soFar = soFar.slice(matched.length);} // Filters
for(type in Expr.filter) {if((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))){matched = match.shift();tokens.push({value:matched,type:type,matches:match});soFar = soFar.slice(matched.length);}}if(!matched){break;}} // Return the length of the invalid excess
// if we're just parsing
// Otherwise, throw an error or return tokens
return parseOnly?soFar.length:soFar?Sizzle.error(selector): // Cache the tokens
tokenCache(selector,groups).slice(0);};function toSelector(tokens){var i=0,len=tokens.length,selector="";for(;i < len;i++) {selector += tokens[i].value;}return selector;}function addCombinator(matcher,combinator,base){var dir=combinator.dir,checkNonElements=base && dir === "parentNode",doneName=done++;return combinator.first? // Check against closest ancestor/preceding element
function(elem,context,xml){while(elem = elem[dir]) {if(elem.nodeType === 1 || checkNonElements){return matcher(elem,context,xml);}}}: // Check against all ancestor/preceding elements
function(elem,context,xml){var oldCache,outerCache,newCache=[dirruns,doneName]; // We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
if(xml){while(elem = elem[dir]) {if(elem.nodeType === 1 || checkNonElements){if(matcher(elem,context,xml)){return true;}}}}else {while(elem = elem[dir]) {if(elem.nodeType === 1 || checkNonElements){outerCache = elem[expando] || (elem[expando] = {});if((oldCache = outerCache[dir]) && oldCache[0] === dirruns && oldCache[1] === doneName){ // Assign to newCache so results back-propagate to previous elements
return newCache[2] = oldCache[2];}else { // Reuse newcache so results back-propagate to previous elements
outerCache[dir] = newCache; // A match means we're done; a fail means we have to keep checking
if(newCache[2] = matcher(elem,context,xml)){return true;}}}}}};}function elementMatcher(matchers){return matchers.length > 1?function(elem,context,xml){var i=matchers.length;while(i--) {if(!matchers[i](elem,context,xml)){return false;}}return true;}:matchers[0];}function multipleContexts(selector,contexts,results){var i=0,len=contexts.length;for(;i < len;i++) {Sizzle(selector,contexts[i],results);}return results;}function condense(unmatched,map,filter,context,xml){var elem,newUnmatched=[],i=0,len=unmatched.length,mapped=map != null;for(;i < len;i++) {if(elem = unmatched[i]){if(!filter || filter(elem,context,xml)){newUnmatched.push(elem);if(mapped){map.push(i);}}}}return newUnmatched;}function setMatcher(preFilter,selector,matcher,postFilter,postFinder,postSelector){if(postFilter && !postFilter[expando]){postFilter = setMatcher(postFilter);}if(postFinder && !postFinder[expando]){postFinder = setMatcher(postFinder,postSelector);}return markFunction(function(seed,results,context,xml){var temp,i,elem,preMap=[],postMap=[],preexisting=results.length, // Get initial elements from seed or context
elems=seed || multipleContexts(selector || "*",context.nodeType?[context]:context,[]), // Prefilter to get matcher input, preserving a map for seed-results synchronization
matcherIn=preFilter && (seed || !selector)?condense(elems,preMap,preFilter,context,xml):elems,matcherOut=matcher? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
postFinder || (seed?preFilter:preexisting || postFilter)? // ...intermediate processing is necessary
[]: // ...otherwise use results directly
results:matcherIn; // Find primary matches
if(matcher){matcher(matcherIn,matcherOut,context,xml);} // Apply postFilter
if(postFilter){temp = condense(matcherOut,postMap);postFilter(temp,[],context,xml); // Un-match failing elements by moving them back to matcherIn
i = temp.length;while(i--) {if(elem = temp[i]){matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);}}}if(seed){if(postFinder || preFilter){if(postFinder){ // Get the final matcherOut by condensing this intermediate into postFinder contexts
temp = [];i = matcherOut.length;while(i--) {if(elem = matcherOut[i]){ // Restore matcherIn since elem is not yet a final match
temp.push(matcherIn[i] = elem);}}postFinder(null,matcherOut = [],temp,xml);} // Move matched elements from seed to results to keep them synchronized
i = matcherOut.length;while(i--) {if((elem = matcherOut[i]) && (temp = postFinder?indexOf(seed,elem):preMap[i]) > -1){seed[temp] = !(results[temp] = elem);}}} // Add elements to results, through postFinder if defined
}else {matcherOut = condense(matcherOut === results?matcherOut.splice(preexisting,matcherOut.length):matcherOut);if(postFinder){postFinder(null,results,matcherOut,xml);}else {push.apply(results,matcherOut);}}});}function matcherFromTokens(tokens){var checkContext,matcher,j,len=tokens.length,leadingRelative=Expr.relative[tokens[0].type],implicitRelative=leadingRelative || Expr.relative[" "],i=leadingRelative?1:0, // The foundational matcher ensures that elements are reachable from top-level context(s)
matchContext=addCombinator(function(elem){return elem === checkContext;},implicitRelative,true),matchAnyContext=addCombinator(function(elem){return indexOf(checkContext,elem) > -1;},implicitRelative,true),matchers=[function(elem,context,xml){var ret=!leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType?matchContext(elem,context,xml):matchAnyContext(elem,context,xml)); // Avoid hanging onto element (issue #299)
checkContext = null;return ret;}];for(;i < len;i++) {if(matcher = Expr.relative[tokens[i].type]){matchers = [addCombinator(elementMatcher(matchers),matcher)];}else {matcher = Expr.filter[tokens[i].type].apply(null,tokens[i].matches); // Return special upon seeing a positional matcher
if(matcher[expando]){ // Find the next relative operator (if any) for proper handling
j = ++i;for(;j < len;j++) {if(Expr.relative[tokens[j].type]){break;}}return setMatcher(i > 1 && elementMatcher(matchers),i > 1 && toSelector( // If the preceding token was a descendant combinator, insert an implicit any-element `*`
tokens.slice(0,i - 1).concat({value:tokens[i - 2].type === " "?"*":""})).replace(rtrim,"$1"),matcher,i < j && matcherFromTokens(tokens.slice(i,j)),j < len && matcherFromTokens(tokens = tokens.slice(j)),j < len && toSelector(tokens));}matchers.push(matcher);}}return elementMatcher(matchers);}function matcherFromGroupMatchers(elementMatchers,setMatchers){var bySet=setMatchers.length > 0,byElement=elementMatchers.length > 0,superMatcher=function superMatcher(seed,context,xml,results,outermost){var elem,j,matcher,matchedCount=0,i="0",unmatched=seed && [],setMatched=[],contextBackup=outermostContext, // We must always have either seed elements or outermost context
elems=seed || byElement && Expr.find["TAG"]("*",outermost), // Use integer dirruns iff this is the outermost matcher
dirrunsUnique=dirruns += contextBackup == null?1:Math.random() || 0.1,len=elems.length;if(outermost){outermostContext = context !== document && context;} // Add elements passing elementMatchers directly to results
// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
// Support: IE<9, Safari
// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
for(;i !== len && (elem = elems[i]) != null;i++) {if(byElement && elem){j = 0;while(matcher = elementMatchers[j++]) {if(matcher(elem,context,xml)){results.push(elem);break;}}if(outermost){dirruns = dirrunsUnique;}} // Track unmatched elements for set filters
if(bySet){ // They will have gone through all possible matchers
if(elem = !matcher && elem){matchedCount--;} // Lengthen the array for every element, matched or not
if(seed){unmatched.push(elem);}}} // Apply set filters to unmatched elements
matchedCount += i;if(bySet && i !== matchedCount){j = 0;while(matcher = setMatchers[j++]) {matcher(unmatched,setMatched,context,xml);}if(seed){ // Reintegrate element matches to eliminate the need for sorting
if(matchedCount > 0){while(i--) {if(!(unmatched[i] || setMatched[i])){setMatched[i] = pop.call(results);}}} // Discard index placeholder values to get only actual matches
setMatched = condense(setMatched);} // Add matches to results
push.apply(results,setMatched); // Seedless set matches succeeding multiple successful matchers stipulate sorting
if(outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1){Sizzle.uniqueSort(results);}} // Override manipulation of globals by nested matchers
if(outermost){dirruns = dirrunsUnique;outermostContext = contextBackup;}return unmatched;};return bySet?markFunction(superMatcher):superMatcher;}compile = Sizzle.compile = function(selector,match /* Internal Use Only */){var i,setMatchers=[],elementMatchers=[],cached=compilerCache[selector + " "];if(!cached){ // Generate a function of recursive functions that can be used to check each element
if(!match){match = tokenize(selector);}i = match.length;while(i--) {cached = matcherFromTokens(match[i]);if(cached[expando]){setMatchers.push(cached);}else {elementMatchers.push(cached);}} // Cache the compiled function
cached = compilerCache(selector,matcherFromGroupMatchers(elementMatchers,setMatchers)); // Save selector and tokenization
cached.selector = selector;}return cached;}; /**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */select = Sizzle.select = function(selector,context,results,seed){var i,tokens,token,type,find,compiled=typeof selector === "function" && selector,match=!seed && tokenize(selector = compiled.selector || selector);results = results || []; // Try to minimize operations if there is no seed and only one group
if(match.length === 1){ // Take a shortcut and set the context if the root selector is an ID
tokens = match[0] = match[0].slice(0);if(tokens.length > 2 && (token = tokens[0]).type === "ID" && support.getById && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]){context = (Expr.find["ID"](token.matches[0].replace(runescape,funescape),context) || [])[0];if(!context){return results; // Precompiled matchers will still verify ancestry, so step up a level
}else if(compiled){context = context.parentNode;}selector = selector.slice(tokens.shift().value.length);} // Fetch a seed set for right-to-left matching
i = matchExpr["needsContext"].test(selector)?0:tokens.length;while(i--) {token = tokens[i]; // Abort if we hit a combinator
if(Expr.relative[type = token.type]){break;}if(find = Expr.find[type]){ // Search, expanding context for leading sibling combinators
if(seed = find(token.matches[0].replace(runescape,funescape),rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)){ // If seed is empty or no tokens remain, we can return early
tokens.splice(i,1);selector = seed.length && toSelector(tokens);if(!selector){push.apply(results,seed);return results;}break;}}}} // Compile and execute a filtering function if one is not provided
// Provide `match` to avoid retokenization if we modified the selector above
(compiled || compile(selector,match))(seed,context,!documentIsHTML,results,rsibling.test(selector) && testContext(context.parentNode) || context);return results;}; // One-time assignments
// Sort stability
support.sortStable = expando.split("").sort(sortOrder).join("") === expando; // Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate; // Initialize against the default document
setDocument(); // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function(div1){ // Should return 1, but returns 4 (following)
return div1.compareDocumentPosition(document.createElement("div")) & 1;}); // Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if(!assert(function(div){div.innerHTML = "<a href='#'></a>";return div.firstChild.getAttribute("href") === "#";})){addHandle("type|href|height|width",function(elem,name,isXML){if(!isXML){return elem.getAttribute(name,name.toLowerCase() === "type"?1:2);}});} // Support: IE<9
// Use defaultValue in place of getAttribute("value")
if(!support.attributes || !assert(function(div){div.innerHTML = "<input/>";div.firstChild.setAttribute("value","");return div.firstChild.getAttribute("value") === "";})){addHandle("value",function(elem,name,isXML){if(!isXML && elem.nodeName.toLowerCase() === "input"){return elem.defaultValue;}});} // Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if(!assert(function(div){return div.getAttribute("disabled") == null;})){addHandle(booleans,function(elem,name,isXML){var val;if(!isXML){return elem[name] === true?name.toLowerCase():(val = elem.getAttributeNode(name)) && val.specified?val.value:null;}});}return Sizzle;})(window);jQuery.find = Sizzle;jQuery.expr = Sizzle.selectors;jQuery.expr[":"] = jQuery.expr.pseudos;jQuery.unique = Sizzle.uniqueSort;jQuery.text = Sizzle.getText;jQuery.isXMLDoc = Sizzle.isXML;jQuery.contains = Sizzle.contains;var rneedsContext=jQuery.expr.match.needsContext;var rsingleTag=/^<(\w+)\s*\/?>(?:<\/\1>|)$/;var risSimple=/^.[^:#\[\.,]*$/; // Implement the identical functionality for filter and not
function winnow(elements,qualifier,not){if(jQuery.isFunction(qualifier)){return jQuery.grep(elements,function(elem,i){ /* jshint -W018 */return !!qualifier.call(elem,i,elem) !== not;});}if(qualifier.nodeType){return jQuery.grep(elements,function(elem){return elem === qualifier !== not;});}if(typeof qualifier === "string"){if(risSimple.test(qualifier)){return jQuery.filter(qualifier,elements,not);}qualifier = jQuery.filter(qualifier,elements);}return jQuery.grep(elements,function(elem){return jQuery.inArray(elem,qualifier) >= 0 !== not;});}jQuery.filter = function(expr,elems,not){var elem=elems[0];if(not){expr = ":not(" + expr + ")";}return elems.length === 1 && elem.nodeType === 1?jQuery.find.matchesSelector(elem,expr)?[elem]:[]:jQuery.find.matches(expr,jQuery.grep(elems,function(elem){return elem.nodeType === 1;}));};jQuery.fn.extend({find:function find(selector){var i,ret=[],self=this,len=self.length;if(typeof selector !== "string"){return this.pushStack(jQuery(selector).filter(function(){for(i = 0;i < len;i++) {if(jQuery.contains(self[i],this)){return true;}}}));}for(i = 0;i < len;i++) {jQuery.find(selector,self[i],ret);} // Needed because $( selector, context ) becomes $( context ).find( selector )
ret = this.pushStack(len > 1?jQuery.unique(ret):ret);ret.selector = this.selector?this.selector + " " + selector:selector;return ret;},filter:function filter(selector){return this.pushStack(winnow(this,selector || [],false));},not:function not(selector){return this.pushStack(winnow(this,selector || [],true));},is:function is(selector){return !!winnow(this, // If this is a positional/relative selector, check membership in the returned set
// so $("p:first").is("p:last") won't return true for a doc with two "p".
typeof selector === "string" && rneedsContext.test(selector)?jQuery(selector):selector || [],false).length;}}); // Initialize a jQuery object
// A central reference to the root jQuery(document)
var rootjQuery, // Use the correct document accordingly with window argument (sandbox)
document=window.document, // A simple way to check for HTML strings
// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
// Strict HTML recognition (#11290: must start with <)
rquickExpr=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,init=jQuery.fn.init = function(selector,context){var match,elem; // HANDLE: $(""), $(null), $(undefined), $(false)
if(!selector){return this;} // Handle HTML strings
if(typeof selector === "string"){if(selector.charAt(0) === "<" && selector.charAt(selector.length - 1) === ">" && selector.length >= 3){ // Assume that strings that start and end with <> are HTML and skip the regex check
match = [null,selector,null];}else {match = rquickExpr.exec(selector);} // Match html or make sure no context is specified for #id
if(match && (match[1] || !context)){ // HANDLE: $(html) -> $(array)
if(match[1]){context = context instanceof jQuery?context[0]:context; // scripts is true for back-compat
// Intentionally let the error be thrown if parseHTML is not present
jQuery.merge(this,jQuery.parseHTML(match[1],context && context.nodeType?context.ownerDocument || context:document,true)); // HANDLE: $(html, props)
if(rsingleTag.test(match[1]) && jQuery.isPlainObject(context)){for(match in context) { // Properties of context are called as methods if possible
if(jQuery.isFunction(this[match])){this[match](context[match]); // ...and otherwise set as attributes
}else {this.attr(match,context[match]);}}}return this; // HANDLE: $(#id)
}else {elem = document.getElementById(match[2]); // Check parentNode to catch when Blackberry 4.6 returns
// nodes that are no longer in the document #6963
if(elem && elem.parentNode){ // Handle the case where IE and Opera return items
// by name instead of ID
if(elem.id !== match[2]){return rootjQuery.find(selector);} // Otherwise, we inject the element directly into the jQuery object
this.length = 1;this[0] = elem;}this.context = document;this.selector = selector;return this;} // HANDLE: $(expr, $(...))
}else if(!context || context.jquery){return (context || rootjQuery).find(selector); // HANDLE: $(expr, context)
// (which is just equivalent to: $(context).find(expr)
}else {return this.constructor(context).find(selector);} // HANDLE: $(DOMElement)
}else if(selector.nodeType){this.context = this[0] = selector;this.length = 1;return this; // HANDLE: $(function)
// Shortcut for document ready
}else if(jQuery.isFunction(selector)){return typeof rootjQuery.ready !== "undefined"?rootjQuery.ready(selector): // Execute immediately if ready is not present
selector(jQuery);}if(selector.selector !== undefined){this.selector = selector.selector;this.context = selector.context;}return jQuery.makeArray(selector,this);}; // Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn; // Initialize central reference
rootjQuery = jQuery(document);var rparentsprev=/^(?:parents|prev(?:Until|All))/, // methods guaranteed to produce a unique set when starting from a unique set
guaranteedUnique={children:true,contents:true,next:true,prev:true};jQuery.extend({dir:function dir(elem,_dir,until){var matched=[],cur=elem[_dir];while(cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery(cur).is(until))) {if(cur.nodeType === 1){matched.push(cur);}cur = cur[_dir];}return matched;},sibling:function sibling(n,elem){var r=[];for(;n;n = n.nextSibling) {if(n.nodeType === 1 && n !== elem){r.push(n);}}return r;}});jQuery.fn.extend({has:function has(target){var i,targets=jQuery(target,this),len=targets.length;return this.filter(function(){for(i = 0;i < len;i++) {if(jQuery.contains(this,targets[i])){return true;}}});},closest:function closest(selectors,context){var cur,i=0,l=this.length,matched=[],pos=rneedsContext.test(selectors) || typeof selectors !== "string"?jQuery(selectors,context || this.context):0;for(;i < l;i++) {for(cur = this[i];cur && cur !== context;cur = cur.parentNode) { // Always skip document fragments
if(cur.nodeType < 11 && (pos?pos.index(cur) > -1: // Don't pass non-elements to Sizzle
cur.nodeType === 1 && jQuery.find.matchesSelector(cur,selectors))){matched.push(cur);break;}}}return this.pushStack(matched.length > 1?jQuery.unique(matched):matched);}, // Determine the position of an element within
// the matched set of elements
index:function index(elem){ // No argument, return index in parent
if(!elem){return this[0] && this[0].parentNode?this.first().prevAll().length:-1;} // index in selector
if(typeof elem === "string"){return jQuery.inArray(this[0],jQuery(elem));} // Locate the position of the desired element
return jQuery.inArray( // If it receives a jQuery object, the first element is used
elem.jquery?elem[0]:elem,this);},add:function add(selector,context){return this.pushStack(jQuery.unique(jQuery.merge(this.get(),jQuery(selector,context))));},addBack:function addBack(selector){return this.add(selector == null?this.prevObject:this.prevObject.filter(selector));}});function sibling(cur,dir){do {cur = cur[dir];}while(cur && cur.nodeType !== 1);return cur;}jQuery.each({parent:function parent(elem){var parent=elem.parentNode;return parent && parent.nodeType !== 11?parent:null;},parents:function parents(elem){return jQuery.dir(elem,"parentNode");},parentsUntil:function parentsUntil(elem,i,until){return jQuery.dir(elem,"parentNode",until);},next:function next(elem){return sibling(elem,"nextSibling");},prev:function prev(elem){return sibling(elem,"previousSibling");},nextAll:function nextAll(elem){return jQuery.dir(elem,"nextSibling");},prevAll:function prevAll(elem){return jQuery.dir(elem,"previousSibling");},nextUntil:function nextUntil(elem,i,until){return jQuery.dir(elem,"nextSibling",until);},prevUntil:function prevUntil(elem,i,until){return jQuery.dir(elem,"previousSibling",until);},siblings:function siblings(elem){return jQuery.sibling((elem.parentNode || {}).firstChild,elem);},children:function children(elem){return jQuery.sibling(elem.firstChild);},contents:function contents(elem){return jQuery.nodeName(elem,"iframe")?elem.contentDocument || elem.contentWindow.document:jQuery.merge([],elem.childNodes);}},function(name,fn){jQuery.fn[name] = function(until,selector){var ret=jQuery.map(this,fn,until);if(name.slice(-5) !== "Until"){selector = until;}if(selector && typeof selector === "string"){ret = jQuery.filter(selector,ret);}if(this.length > 1){ // Remove duplicates
if(!guaranteedUnique[name]){ret = jQuery.unique(ret);} // Reverse order for parents* and prev-derivatives
if(rparentsprev.test(name)){ret = ret.reverse();}}return this.pushStack(ret);};});var rnotwhite=/\S+/g; // String to Object options format cache
var optionsCache={}; // Convert String-formatted options into Object-formatted ones and store in cache
function createOptions(options){var object=optionsCache[options] = {};jQuery.each(options.match(rnotwhite) || [],function(_,flag){object[flag] = true;});return object;} /*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */jQuery.Callbacks = function(options){ // Convert options from String-formatted to Object-formatted if needed
// (we check in cache first)
options = typeof options === "string"?optionsCache[options] || createOptions(options):jQuery.extend({},options);var  // Flag to know if list is currently firing
firing, // Last fire value (for non-forgettable lists)
memory, // Flag to know if list was already fired
_fired, // End of the loop when firing
firingLength, // Index of currently firing callback (modified by remove if needed)
firingIndex, // First callback to fire (used internally by add and fireWith)
firingStart, // Actual callback list
list=[], // Stack of fire calls for repeatable lists
stack=!options.once && [], // Fire callbacks
fire=function fire(data){memory = options.memory && data;_fired = true;firingIndex = firingStart || 0;firingStart = 0;firingLength = list.length;firing = true;for(;list && firingIndex < firingLength;firingIndex++) {if(list[firingIndex].apply(data[0],data[1]) === false && options.stopOnFalse){memory = false; // To prevent further calls using add
break;}}firing = false;if(list){if(stack){if(stack.length){fire(stack.shift());}}else if(memory){list = [];}else {self.disable();}}}, // Actual Callbacks object
self={ // Add a callback or a collection of callbacks to the list
add:function add(){if(list){ // First, we save the current length
var start=list.length;(function add(args){jQuery.each(args,function(_,arg){var type=jQuery.type(arg);if(type === "function"){if(!options.unique || !self.has(arg)){list.push(arg);}}else if(arg && arg.length && type !== "string"){ // Inspect recursively
add(arg);}});})(arguments); // Do we need to add the callbacks to the
// current firing batch?
if(firing){firingLength = list.length; // With memory, if we're not firing then
// we should call right away
}else if(memory){firingStart = start;fire(memory);}}return this;}, // Remove a callback from the list
remove:function remove(){if(list){jQuery.each(arguments,function(_,arg){var index;while((index = jQuery.inArray(arg,list,index)) > -1) {list.splice(index,1); // Handle firing indexes
if(firing){if(index <= firingLength){firingLength--;}if(index <= firingIndex){firingIndex--;}}}});}return this;}, // Check if a given callback is in the list.
// If no argument is given, return whether or not list has callbacks attached.
has:function has(fn){return fn?jQuery.inArray(fn,list) > -1:!!(list && list.length);}, // Remove all callbacks from the list
empty:function empty(){list = [];firingLength = 0;return this;}, // Have the list do nothing anymore
disable:function disable(){list = stack = memory = undefined;return this;}, // Is it disabled?
disabled:function disabled(){return !list;}, // Lock the list in its current state
lock:function lock(){stack = undefined;if(!memory){self.disable();}return this;}, // Is it locked?
locked:function locked(){return !stack;}, // Call all callbacks with the given context and arguments
fireWith:function fireWith(context,args){if(list && (!_fired || stack)){args = args || [];args = [context,args.slice?args.slice():args];if(firing){stack.push(args);}else {fire(args);}}return this;}, // Call all the callbacks with the given arguments
fire:function fire(){self.fireWith(this,arguments);return this;}, // To know if the callbacks have already been called at least once
fired:function fired(){return !!_fired;}};return self;};jQuery.extend({Deferred:function Deferred(func){var tuples=[ // action, add listener, listener list, final state
["resolve","done",jQuery.Callbacks("once memory"),"resolved"],["reject","fail",jQuery.Callbacks("once memory"),"rejected"],["notify","progress",jQuery.Callbacks("memory")]],_state="pending",_promise={state:function state(){return _state;},always:function always(){deferred.done(arguments).fail(arguments);return this;},then:function then() /* fnDone, fnFail, fnProgress */{var fns=arguments;return jQuery.Deferred(function(newDefer){jQuery.each(tuples,function(i,tuple){var fn=jQuery.isFunction(fns[i]) && fns[i]; // deferred[ done | fail | progress ] for forwarding actions to newDefer
deferred[tuple[1]](function(){var returned=fn && fn.apply(this,arguments);if(returned && jQuery.isFunction(returned.promise)){returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);}else {newDefer[tuple[0] + "With"](this === _promise?newDefer.promise():this,fn?[returned]:arguments);}});});fns = null;}).promise();}, // Get a promise for this deferred
// If obj is provided, the promise aspect is added to the object
promise:function promise(obj){return obj != null?jQuery.extend(obj,_promise):_promise;}},deferred={}; // Keep pipe for back-compat
_promise.pipe = _promise.then; // Add list-specific methods
jQuery.each(tuples,function(i,tuple){var list=tuple[2],stateString=tuple[3]; // promise[ done | fail | progress ] = list.add
_promise[tuple[1]] = list.add; // Handle state
if(stateString){list.add(function(){ // state = [ resolved | rejected ]
_state = stateString; // [ reject_list | resolve_list ].disable; progress_list.lock
},tuples[i ^ 1][2].disable,tuples[2][2].lock);} // deferred[ resolve | reject | notify ]
deferred[tuple[0]] = function(){deferred[tuple[0] + "With"](this === deferred?_promise:this,arguments);return this;};deferred[tuple[0] + "With"] = list.fireWith;}); // Make the deferred a promise
_promise.promise(deferred); // Call given func if any
if(func){func.call(deferred,deferred);} // All done!
return deferred;}, // Deferred helper
when:function when(subordinate /* , ..., subordinateN */){var i=0,resolveValues=_slice.call(arguments),length=resolveValues.length, // the count of uncompleted subordinates
remaining=length !== 1 || subordinate && jQuery.isFunction(subordinate.promise)?length:0, // the master Deferred. If resolveValues consist of only a single Deferred, just use that.
deferred=remaining === 1?subordinate:jQuery.Deferred(), // Update function for both resolve and progress values
updateFunc=function updateFunc(i,contexts,values){return function(value){contexts[i] = this;values[i] = arguments.length > 1?_slice.call(arguments):value;if(values === progressValues){deferred.notifyWith(contexts,values);}else if(! --remaining){deferred.resolveWith(contexts,values);}};},progressValues,progressContexts,resolveContexts; // add listeners to Deferred subordinates; treat others as resolved
if(length > 1){progressValues = new Array(length);progressContexts = new Array(length);resolveContexts = new Array(length);for(;i < length;i++) {if(resolveValues[i] && jQuery.isFunction(resolveValues[i].promise)){resolveValues[i].promise().done(updateFunc(i,resolveContexts,resolveValues)).fail(deferred.reject).progress(updateFunc(i,progressContexts,progressValues));}else {--remaining;}}} // if we're not waiting on anything, resolve the master
if(!remaining){deferred.resolveWith(resolveContexts,resolveValues);}return deferred.promise();}}); // The deferred used on DOM ready
var readyList;jQuery.fn.ready = function(fn){ // Add the callback
jQuery.ready.promise().done(fn);return this;};jQuery.extend({ // Is the DOM ready to be used? Set to true once it occurs.
isReady:false, // A counter to track how many items to wait for before
// the ready event fires. See #6781
readyWait:1, // Hold (or release) the ready event
holdReady:function holdReady(hold){if(hold){jQuery.readyWait++;}else {jQuery.ready(true);}}, // Handle when the DOM is ready
ready:function ready(wait){ // Abort if there are pending holds or we're already ready
if(wait === true?--jQuery.readyWait:jQuery.isReady){return;} // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
if(!document.body){return setTimeout(jQuery.ready);} // Remember that the DOM is ready
jQuery.isReady = true; // If a normal DOM Ready event fired, decrement, and wait if need be
if(wait !== true && --jQuery.readyWait > 0){return;} // If there are functions bound, to execute
readyList.resolveWith(document,[jQuery]); // Trigger any bound ready events
if(jQuery.fn.triggerHandler){jQuery(document).triggerHandler("ready");jQuery(document).off("ready");}}}); /**
 * Clean-up method for dom ready events
 */function detach(){if(document.addEventListener){document.removeEventListener("DOMContentLoaded",completed,false);window.removeEventListener("load",completed,false);}else {document.detachEvent("onreadystatechange",completed);window.detachEvent("onload",completed);}} /**
 * The ready event handler and self cleanup method
 */function completed(){ // readyState === "complete" is good enough for us to call the dom ready in oldIE
if(document.addEventListener || event.type === "load" || document.readyState === "complete"){detach();jQuery.ready();}}jQuery.ready.promise = function(obj){if(!readyList){readyList = jQuery.Deferred(); // Catch cases where $(document).ready() is called after the browser event has already occurred.
// we once tried to use readyState "interactive" here, but it caused issues like the one
// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
if(document.readyState === "complete"){ // Handle it asynchronously to allow scripts the opportunity to delay ready
setTimeout(jQuery.ready); // Standards-based browsers support DOMContentLoaded
}else if(document.addEventListener){ // Use the handy event callback
document.addEventListener("DOMContentLoaded",completed,false); // A fallback to window.onload, that will always work
window.addEventListener("load",completed,false); // If IE event model is used
}else { // Ensure firing before onload, maybe late but safe also for iframes
document.attachEvent("onreadystatechange",completed); // A fallback to window.onload, that will always work
window.attachEvent("onload",completed); // If IE and not a frame
// continually check to see if the document is ready
var top=false;try{top = window.frameElement == null && document.documentElement;}catch(e) {}if(top && top.doScroll){(function doScrollCheck(){if(!jQuery.isReady){try{ // Use the trick by Diego Perini
// http://javascript.nwbox.com/IEContentLoaded/
top.doScroll("left");}catch(e) {return setTimeout(doScrollCheck,50);} // detach all dom ready events
detach(); // and execute any waiting functions
jQuery.ready();}})();}}}return readyList.promise(obj);};var strundefined=typeof undefined; // Support: IE<9
// Iteration over object's inherited properties before its own
var i;for(i in jQuery(support)) {break;}support.ownLast = i !== "0"; // Note: most support tests are defined in their respective modules.
// false until the test is run
support.inlineBlockNeedsLayout = false; // Execute ASAP in case we need to set body.style.zoom
jQuery(function(){ // Minified: var a,b,c,d
var val,div,body,container;body = document.getElementsByTagName("body")[0];if(!body || !body.style){ // Return for frameset docs that don't have a body
return;} // Setup
div = document.createElement("div");container = document.createElement("div");container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";body.appendChild(container).appendChild(div);if(typeof div.style.zoom !== strundefined){ // Support: IE<8
// Check if natively block-level elements act like inline-block
// elements when setting their display to 'inline' and giving
// them layout
div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;if(val){ // Prevent IE 6 from affecting layout for positioned elements #11048
// Prevent IE from shrinking the body in IE 7 mode #12869
// Support: IE<8
body.style.zoom = 1;}}body.removeChild(container);});(function(){var div=document.createElement("div"); // Execute the test only if not already executed in another module.
if(support.deleteExpando == null){ // Support: IE<9
support.deleteExpando = true;try{delete div.test;}catch(e) {support.deleteExpando = false;}} // Null elements to avoid leaks in IE.
div = null;})(); /**
 * Determines whether an object can have data
 */jQuery.acceptData = function(elem){var noData=jQuery.noData[(elem.nodeName + " ").toLowerCase()],nodeType=+elem.nodeType || 1; // Do not set data on non-element DOM nodes because it will not be cleared (#8335).
return nodeType !== 1 && nodeType !== 9?false: // Nodes accept data unless otherwise specified; rejection can be conditional
!noData || noData !== true && elem.getAttribute("classid") === noData;};var rbrace=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,rmultiDash=/([A-Z])/g;function dataAttr(elem,key,data){ // If nothing was found internally, try to fetch any
// data from the HTML5 data-* attribute
if(data === undefined && elem.nodeType === 1){var name="data-" + key.replace(rmultiDash,"-$1").toLowerCase();data = elem.getAttribute(name);if(typeof data === "string"){try{data = data === "true"?true:data === "false"?false:data === "null"?null: // Only convert to a number if it doesn't change the string
+data + "" === data?+data:rbrace.test(data)?jQuery.parseJSON(data):data;}catch(e) {} // Make sure we set the data so it isn't changed later
jQuery.data(elem,key,data);}else {data = undefined;}}return data;} // checks a cache object for emptiness
function isEmptyDataObject(obj){var name;for(name in obj) { // if the public data object is empty, the private is still empty
if(name === "data" && jQuery.isEmptyObject(obj[name])){continue;}if(name !== "toJSON"){return false;}}return true;}function internalData(elem,name,data,pvt /* Internal Use Only */){if(!jQuery.acceptData(elem)){return;}var ret,thisCache,internalKey=jQuery.expando, // We have to handle DOM nodes and JS objects differently because IE6-7
// can't GC object references properly across the DOM-JS boundary
isNode=elem.nodeType, // Only DOM nodes need the global jQuery cache; JS object data is
// attached directly to the object so GC can occur automatically
cache=isNode?jQuery.cache:elem, // Only defining an ID for JS objects if its cache already exists allows
// the code to shortcut on the same path as a DOM node with no cache
id=isNode?elem[internalKey]:elem[internalKey] && internalKey; // Avoid doing any more work than we need to when trying to get data on an
// object that has no data at all
if((!id || !cache[id] || !pvt && !cache[id].data) && data === undefined && typeof name === "string"){return;}if(!id){ // Only DOM nodes need a new unique ID for each element since their data
// ends up in the global cache
if(isNode){id = elem[internalKey] = deletedIds.pop() || jQuery.guid++;}else {id = internalKey;}}if(!cache[id]){ // Avoid exposing jQuery metadata on plain JS objects when the object
// is serialized using JSON.stringify
cache[id] = isNode?{}:{toJSON:jQuery.noop};} // An object can be passed to jQuery.data instead of a key/value pair; this gets
// shallow copied over onto the existing cache
if(typeof name === "object" || typeof name === "function"){if(pvt){cache[id] = jQuery.extend(cache[id],name);}else {cache[id].data = jQuery.extend(cache[id].data,name);}}thisCache = cache[id]; // jQuery data() is stored in a separate object inside the object's internal data
// cache in order to avoid key collisions between internal data and user-defined
// data.
if(!pvt){if(!thisCache.data){thisCache.data = {};}thisCache = thisCache.data;}if(data !== undefined){thisCache[jQuery.camelCase(name)] = data;} // Check for both converted-to-camel and non-converted data property names
// If a data property was specified
if(typeof name === "string"){ // First Try to find as-is property data
ret = thisCache[name]; // Test for null|undefined property data
if(ret == null){ // Try to find the camelCased property
ret = thisCache[jQuery.camelCase(name)];}}else {ret = thisCache;}return ret;}function internalRemoveData(elem,name,pvt){if(!jQuery.acceptData(elem)){return;}var thisCache,i,isNode=elem.nodeType, // See jQuery.data for more information
cache=isNode?jQuery.cache:elem,id=isNode?elem[jQuery.expando]:jQuery.expando; // If there is already no cache entry for this object, there is no
// purpose in continuing
if(!cache[id]){return;}if(name){thisCache = pvt?cache[id]:cache[id].data;if(thisCache){ // Support array or space separated string names for data keys
if(!jQuery.isArray(name)){ // try the string as a key before any manipulation
if(name in thisCache){name = [name];}else { // split the camel cased version by spaces unless a key with the spaces exists
name = jQuery.camelCase(name);if(name in thisCache){name = [name];}else {name = name.split(" ");}}}else { // If "name" is an array of keys...
// When data is initially created, via ("key", "val") signature,
// keys will be converted to camelCase.
// Since there is no way to tell _how_ a key was added, remove
// both plain key and camelCase key. #12786
// This will only penalize the array argument path.
name = name.concat(jQuery.map(name,jQuery.camelCase));}i = name.length;while(i--) {delete thisCache[name[i]];} // If there is no data left in the cache, we want to continue
// and let the cache object itself get destroyed
if(pvt?!isEmptyDataObject(thisCache):!jQuery.isEmptyObject(thisCache)){return;}}} // See jQuery.data for more information
if(!pvt){delete cache[id].data; // Don't destroy the parent cache unless the internal data object
// had been the only thing left in it
if(!isEmptyDataObject(cache[id])){return;}} // Destroy the cache
if(isNode){jQuery.cleanData([elem],true); // Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
/* jshint eqeqeq: false */}else if(support.deleteExpando || cache != cache.window){ /* jshint eqeqeq: true */delete cache[id]; // When all else fails, null
}else {cache[id] = null;}}jQuery.extend({cache:{}, // The following elements (space-suffixed to avoid Object.prototype collisions)
// throw uncatchable exceptions if you attempt to set expando properties
noData:{"applet ":true,"embed ":true, // ...but Flash objects (which have this classid) *can* handle expandos
"object ":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"},hasData:function hasData(elem){elem = elem.nodeType?jQuery.cache[elem[jQuery.expando]]:elem[jQuery.expando];return !!elem && !isEmptyDataObject(elem);},data:function data(elem,name,_data){return internalData(elem,name,_data);},removeData:function removeData(elem,name){return internalRemoveData(elem,name);}, // For internal use only.
_data:function _data(elem,name,data){return internalData(elem,name,data,true);},_removeData:function _removeData(elem,name){return internalRemoveData(elem,name,true);}});jQuery.fn.extend({data:function data(key,value){var i,name,data,elem=this[0],attrs=elem && elem.attributes; // Special expections of .data basically thwart jQuery.access,
// so implement the relevant behavior ourselves
// Gets all values
if(key === undefined){if(this.length){data = jQuery.data(elem);if(elem.nodeType === 1 && !jQuery._data(elem,"parsedAttrs")){i = attrs.length;while(i--) { // Support: IE11+
// The attrs elements can be null (#14894)
if(attrs[i]){name = attrs[i].name;if(name.indexOf("data-") === 0){name = jQuery.camelCase(name.slice(5));dataAttr(elem,name,data[name]);}}}jQuery._data(elem,"parsedAttrs",true);}}return data;} // Sets multiple values
if(typeof key === "object"){return this.each(function(){jQuery.data(this,key);});}return arguments.length > 1? // Sets one value
this.each(function(){jQuery.data(this,key,value);}): // Gets one value
// Try to fetch any internally stored data first
elem?dataAttr(elem,key,jQuery.data(elem,key)):undefined;},removeData:function removeData(key){return this.each(function(){jQuery.removeData(this,key);});}});jQuery.extend({queue:function queue(elem,type,data){var queue;if(elem){type = (type || "fx") + "queue";queue = jQuery._data(elem,type); // Speed up dequeue by getting out quickly if this is just a lookup
if(data){if(!queue || jQuery.isArray(data)){queue = jQuery._data(elem,type,jQuery.makeArray(data));}else {queue.push(data);}}return queue || [];}},dequeue:function dequeue(elem,type){type = type || "fx";var queue=jQuery.queue(elem,type),startLength=queue.length,fn=queue.shift(),hooks=jQuery._queueHooks(elem,type),next=function next(){jQuery.dequeue(elem,type);}; // If the fx queue is dequeued, always remove the progress sentinel
if(fn === "inprogress"){fn = queue.shift();startLength--;}if(fn){ // Add a progress sentinel to prevent the fx queue from being
// automatically dequeued
if(type === "fx"){queue.unshift("inprogress");} // clear up the last queue stop function
delete hooks.stop;fn.call(elem,next,hooks);}if(!startLength && hooks){hooks.empty.fire();}}, // not intended for public consumption - generates a queueHooks object, or returns the current one
_queueHooks:function _queueHooks(elem,type){var key=type + "queueHooks";return jQuery._data(elem,key) || jQuery._data(elem,key,{empty:jQuery.Callbacks("once memory").add(function(){jQuery._removeData(elem,type + "queue");jQuery._removeData(elem,key);})});}});jQuery.fn.extend({queue:function queue(type,data){var setter=2;if(typeof type !== "string"){data = type;type = "fx";setter--;}if(arguments.length < setter){return jQuery.queue(this[0],type);}return data === undefined?this:this.each(function(){var queue=jQuery.queue(this,type,data); // ensure a hooks for this queue
jQuery._queueHooks(this,type);if(type === "fx" && queue[0] !== "inprogress"){jQuery.dequeue(this,type);}});},dequeue:function dequeue(type){return this.each(function(){jQuery.dequeue(this,type);});},clearQueue:function clearQueue(type){return this.queue(type || "fx",[]);}, // Get a promise resolved when queues of a certain type
// are emptied (fx is the type by default)
promise:function promise(type,obj){var tmp,count=1,defer=jQuery.Deferred(),elements=this,i=this.length,resolve=function resolve(){if(! --count){defer.resolveWith(elements,[elements]);}};if(typeof type !== "string"){obj = type;type = undefined;}type = type || "fx";while(i--) {tmp = jQuery._data(elements[i],type + "queueHooks");if(tmp && tmp.empty){count++;tmp.empty.add(resolve);}}resolve();return defer.promise(obj);}});var pnum=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;var cssExpand=["Top","Right","Bottom","Left"];var isHidden=function isHidden(elem,el){ // isHidden might be called from jQuery#filter function;
// in that case, element will be second argument
elem = el || elem;return jQuery.css(elem,"display") === "none" || !jQuery.contains(elem.ownerDocument,elem);}; // Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access=jQuery.access = function(elems,fn,key,value,chainable,emptyGet,raw){var i=0,length=elems.length,bulk=key == null; // Sets many values
if(jQuery.type(key) === "object"){chainable = true;for(i in key) {jQuery.access(elems,fn,i,key[i],true,emptyGet,raw);} // Sets one value
}else if(value !== undefined){chainable = true;if(!jQuery.isFunction(value)){raw = true;}if(bulk){ // Bulk operations run against the entire set
if(raw){fn.call(elems,value);fn = null; // ...except when executing function values
}else {bulk = fn;fn = function(elem,key,value){return bulk.call(jQuery(elem),value);};}}if(fn){for(;i < length;i++) {fn(elems[i],key,raw?value:value.call(elems[i],i,fn(elems[i],key)));}}}return chainable?elems: // Gets
bulk?fn.call(elems):length?fn(elems[0],key):emptyGet;};var rcheckableType=/^(?:checkbox|radio)$/i;(function(){ // Minified: var a,b,c
var input=document.createElement("input"),div=document.createElement("div"),fragment=document.createDocumentFragment(); // Setup
div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>"; // IE strips leading whitespace when .innerHTML is used
support.leadingWhitespace = div.firstChild.nodeType === 3; // Make sure that tbody elements aren't automatically inserted
// IE will insert them into empty tables
support.tbody = !div.getElementsByTagName("tbody").length; // Make sure that link elements get serialized correctly by innerHTML
// This requires a wrapper element in IE
support.htmlSerialize = !!div.getElementsByTagName("link").length; // Makes sure cloning an html5 element does not cause problems
// Where outerHTML is undefined, this still works
support.html5Clone = document.createElement("nav").cloneNode(true).outerHTML !== "<:nav></:nav>"; // Check if a disconnected checkbox will retain its checked
// value of true after appended to the DOM (IE6/7)
input.type = "checkbox";input.checked = true;fragment.appendChild(input);support.appendChecked = input.checked; // Make sure textarea (and checkbox) defaultValue is properly cloned
// Support: IE6-IE11+
div.innerHTML = "<textarea>x</textarea>";support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue; // #11217 - WebKit loses check when the name is after the checked attribute
fragment.appendChild(div);div.innerHTML = "<input type='radio' checked='checked' name='t'/>"; // Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
// old WebKit doesn't clone checked state correctly in fragments
support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked; // Support: IE<9
// Opera does not clone events (and typeof div.attachEvent === undefined).
// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
support.noCloneEvent = true;if(div.attachEvent){div.attachEvent("onclick",function(){support.noCloneEvent = false;});div.cloneNode(true).click();} // Execute the test only if not already executed in another module.
if(support.deleteExpando == null){ // Support: IE<9
support.deleteExpando = true;try{delete div.test;}catch(e) {support.deleteExpando = false;}}})();(function(){var i,eventName,div=document.createElement("div"); // Support: IE<9 (lack submit/change bubble), Firefox 23+ (lack focusin event)
for(i in {submit:true,change:true,focusin:true}) {eventName = "on" + i;if(!(support[i + "Bubbles"] = eventName in window)){ // Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
div.setAttribute(eventName,"t");support[i + "Bubbles"] = div.attributes[eventName].expando === false;}} // Null elements to avoid leaks in IE.
div = null;})();var rformElems=/^(?:input|select|textarea)$/i,rkeyEvent=/^key/,rmouseEvent=/^(?:mouse|pointer|contextmenu)|click/,rfocusMorph=/^(?:focusinfocus|focusoutblur)$/,rtypenamespace=/^([^.]*)(?:\.(.+)|)$/;function returnTrue(){return true;}function returnFalse(){return false;}function safeActiveElement(){try{return document.activeElement;}catch(err) {}} /*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */jQuery.event = {global:{},add:function add(elem,types,handler,data,selector){var tmp,events,t,handleObjIn,special,eventHandle,handleObj,handlers,type,namespaces,origType,elemData=jQuery._data(elem); // Don't attach events to noData or text/comment nodes (but allow plain objects)
if(!elemData){return;} // Caller can pass in an object of custom data in lieu of the handler
if(handler.handler){handleObjIn = handler;handler = handleObjIn.handler;selector = handleObjIn.selector;} // Make sure that the handler has a unique ID, used to find/remove it later
if(!handler.guid){handler.guid = jQuery.guid++;} // Init the element's event structure and main handler, if this is the first
if(!(events = elemData.events)){events = elemData.events = {};}if(!(eventHandle = elemData.handle)){eventHandle = elemData.handle = function(e){ // Discard the second event of a jQuery.event.trigger() and
// when an event is called after a page has unloaded
return typeof jQuery !== strundefined && (!e || jQuery.event.triggered !== e.type)?jQuery.event.dispatch.apply(eventHandle.elem,arguments):undefined;}; // Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
eventHandle.elem = elem;} // Handle multiple events separated by a space
types = (types || "").match(rnotwhite) || [""];t = types.length;while(t--) {tmp = rtypenamespace.exec(types[t]) || [];type = origType = tmp[1];namespaces = (tmp[2] || "").split(".").sort(); // There *must* be a type, no attaching namespace-only handlers
if(!type){continue;} // If event changes its type, use the special event handlers for the changed type
special = jQuery.event.special[type] || {}; // If selector defined, determine special event api type, otherwise given type
type = (selector?special.delegateType:special.bindType) || type; // Update special based on newly reset type
special = jQuery.event.special[type] || {}; // handleObj is passed to all event handlers
handleObj = jQuery.extend({type:type,origType:origType,data:data,handler:handler,guid:handler.guid,selector:selector,needsContext:selector && jQuery.expr.match.needsContext.test(selector),namespace:namespaces.join(".")},handleObjIn); // Init the event handler queue if we're the first
if(!(handlers = events[type])){handlers = events[type] = [];handlers.delegateCount = 0; // Only use addEventListener/attachEvent if the special events handler returns false
if(!special.setup || special.setup.call(elem,data,namespaces,eventHandle) === false){ // Bind the global event handler to the element
if(elem.addEventListener){elem.addEventListener(type,eventHandle,false);}else if(elem.attachEvent){elem.attachEvent("on" + type,eventHandle);}}}if(special.add){special.add.call(elem,handleObj);if(!handleObj.handler.guid){handleObj.handler.guid = handler.guid;}} // Add to the element's handler list, delegates in front
if(selector){handlers.splice(handlers.delegateCount++,0,handleObj);}else {handlers.push(handleObj);} // Keep track of which events have ever been used, for event optimization
jQuery.event.global[type] = true;} // Nullify elem to prevent memory leaks in IE
elem = null;}, // Detach an event or set of events from an element
remove:function remove(elem,types,handler,selector,mappedTypes){var j,handleObj,tmp,origCount,t,events,special,handlers,type,namespaces,origType,elemData=jQuery.hasData(elem) && jQuery._data(elem);if(!elemData || !(events = elemData.events)){return;} // Once for each type.namespace in types; type may be omitted
types = (types || "").match(rnotwhite) || [""];t = types.length;while(t--) {tmp = rtypenamespace.exec(types[t]) || [];type = origType = tmp[1];namespaces = (tmp[2] || "").split(".").sort(); // Unbind all events (on this namespace, if provided) for the element
if(!type){for(type in events) {jQuery.event.remove(elem,type + types[t],handler,selector,true);}continue;}special = jQuery.event.special[type] || {};type = (selector?special.delegateType:special.bindType) || type;handlers = events[type] || [];tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)"); // Remove matching events
origCount = j = handlers.length;while(j--) {handleObj = handlers[j];if((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)){handlers.splice(j,1);if(handleObj.selector){handlers.delegateCount--;}if(special.remove){special.remove.call(elem,handleObj);}}} // Remove generic event handler if we removed something and no more handlers exist
// (avoids potential for endless recursion during removal of special event handlers)
if(origCount && !handlers.length){if(!special.teardown || special.teardown.call(elem,namespaces,elemData.handle) === false){jQuery.removeEvent(elem,type,elemData.handle);}delete events[type];}} // Remove the expando if it's no longer used
if(jQuery.isEmptyObject(events)){delete elemData.handle; // removeData also checks for emptiness and clears the expando if empty
// so use it instead of delete
jQuery._removeData(elem,"events");}},trigger:function trigger(event,data,elem,onlyHandlers){var handle,ontype,cur,bubbleType,special,tmp,i,eventPath=[elem || document],type=hasOwn.call(event,"type")?event.type:event,namespaces=hasOwn.call(event,"namespace")?event.namespace.split("."):[];cur = tmp = elem = elem || document; // Don't do events on text and comment nodes
if(elem.nodeType === 3 || elem.nodeType === 8){return;} // focus/blur morphs to focusin/out; ensure we're not firing them right now
if(rfocusMorph.test(type + jQuery.event.triggered)){return;}if(type.indexOf(".") >= 0){ // Namespaced trigger; create a regexp to match event type in handle()
namespaces = type.split(".");type = namespaces.shift();namespaces.sort();}ontype = type.indexOf(":") < 0 && "on" + type; // Caller can pass in a jQuery.Event object, Object, or just an event type string
event = event[jQuery.expando]?event:new jQuery.Event(type,typeof event === "object" && event); // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
event.isTrigger = onlyHandlers?2:3;event.namespace = namespaces.join(".");event.namespace_re = event.namespace?new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)"):null; // Clean up the event in case it is being reused
event.result = undefined;if(!event.target){event.target = elem;} // Clone any incoming data and prepend the event, creating the handler arg list
data = data == null?[event]:jQuery.makeArray(data,[event]); // Allow special events to draw outside the lines
special = jQuery.event.special[type] || {};if(!onlyHandlers && special.trigger && special.trigger.apply(elem,data) === false){return;} // Determine event propagation path in advance, per W3C events spec (#9951)
// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
if(!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)){bubbleType = special.delegateType || type;if(!rfocusMorph.test(bubbleType + type)){cur = cur.parentNode;}for(;cur;cur = cur.parentNode) {eventPath.push(cur);tmp = cur;} // Only add window if we got to document (e.g., not plain obj or detached DOM)
if(tmp === (elem.ownerDocument || document)){eventPath.push(tmp.defaultView || tmp.parentWindow || window);}} // Fire handlers on the event path
i = 0;while((cur = eventPath[i++]) && !event.isPropagationStopped()) {event.type = i > 1?bubbleType:special.bindType || type; // jQuery handler
handle = (jQuery._data(cur,"events") || {})[event.type] && jQuery._data(cur,"handle");if(handle){handle.apply(cur,data);} // Native handler
handle = ontype && cur[ontype];if(handle && handle.apply && jQuery.acceptData(cur)){event.result = handle.apply(cur,data);if(event.result === false){event.preventDefault();}}}event.type = type; // If nobody prevented the default action, do it now
if(!onlyHandlers && !event.isDefaultPrevented()){if((!special._default || special._default.apply(eventPath.pop(),data) === false) && jQuery.acceptData(elem)){ // Call a native DOM method on the target with the same name name as the event.
// Can't use an .isFunction() check here because IE6/7 fails that test.
// Don't do default actions on window, that's where global variables be (#6170)
if(ontype && elem[type] && !jQuery.isWindow(elem)){ // Don't re-trigger an onFOO event when we call its FOO() method
tmp = elem[ontype];if(tmp){elem[ontype] = null;} // Prevent re-triggering of the same event, since we already bubbled it above
jQuery.event.triggered = type;try{elem[type]();}catch(e) { // IE<9 dies on focus/blur to hidden element (#1486,#12518)
// only reproducible on winXP IE8 native, not IE9 in IE8 mode
}jQuery.event.triggered = undefined;if(tmp){elem[ontype] = tmp;}}}}return event.result;},dispatch:function dispatch(event){ // Make a writable jQuery.Event from the native event object
event = jQuery.event.fix(event);var i,ret,handleObj,matched,j,handlerQueue=[],args=_slice.call(arguments),handlers=(jQuery._data(this,"events") || {})[event.type] || [],special=jQuery.event.special[event.type] || {}; // Use the fix-ed jQuery.Event rather than the (read-only) native event
args[0] = event;event.delegateTarget = this; // Call the preDispatch hook for the mapped type, and let it bail if desired
if(special.preDispatch && special.preDispatch.call(this,event) === false){return;} // Determine handlers
handlerQueue = jQuery.event.handlers.call(this,event,handlers); // Run delegates first; they may want to stop propagation beneath us
i = 0;while((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {event.currentTarget = matched.elem;j = 0;while((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) { // Triggered event must either 1) have no namespace, or
// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
if(!event.namespace_re || event.namespace_re.test(handleObj.namespace)){event.handleObj = handleObj;event.data = handleObj.data;ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem,args);if(ret !== undefined){if((event.result = ret) === false){event.preventDefault();event.stopPropagation();}}}}} // Call the postDispatch hook for the mapped type
if(special.postDispatch){special.postDispatch.call(this,event);}return event.result;},handlers:function handlers(event,_handlers){var sel,handleObj,matches,i,handlerQueue=[],delegateCount=_handlers.delegateCount,cur=event.target; // Find delegate handlers
// Black-hole SVG <use> instance trees (#13180)
// Avoid non-left-click bubbling in Firefox (#3861)
if(delegateCount && cur.nodeType && (!event.button || event.type !== "click")){ /* jshint eqeqeq: false */for(;cur != this;cur = cur.parentNode || this) { /* jshint eqeqeq: true */ // Don't check non-elements (#13208)
// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
if(cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click")){matches = [];for(i = 0;i < delegateCount;i++) {handleObj = _handlers[i]; // Don't conflict with Object.prototype properties (#13203)
sel = handleObj.selector + " ";if(matches[sel] === undefined){matches[sel] = handleObj.needsContext?jQuery(sel,this).index(cur) >= 0:jQuery.find(sel,this,null,[cur]).length;}if(matches[sel]){matches.push(handleObj);}}if(matches.length){handlerQueue.push({elem:cur,handlers:matches});}}}} // Add the remaining (directly-bound) handlers
if(delegateCount < _handlers.length){handlerQueue.push({elem:this,handlers:_handlers.slice(delegateCount)});}return handlerQueue;},fix:function fix(event){if(event[jQuery.expando]){return event;} // Create a writable copy of the event object and normalize some properties
var i,prop,copy,type=event.type,originalEvent=event,fixHook=this.fixHooks[type];if(!fixHook){this.fixHooks[type] = fixHook = rmouseEvent.test(type)?this.mouseHooks:rkeyEvent.test(type)?this.keyHooks:{};}copy = fixHook.props?this.props.concat(fixHook.props):this.props;event = new jQuery.Event(originalEvent);i = copy.length;while(i--) {prop = copy[i];event[prop] = originalEvent[prop];} // Support: IE<9
// Fix target property (#1925)
if(!event.target){event.target = originalEvent.srcElement || document;} // Support: Chrome 23+, Safari?
// Target should not be a text node (#504, #13143)
if(event.target.nodeType === 3){event.target = event.target.parentNode;} // Support: IE<9
// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
event.metaKey = !!event.metaKey;return fixHook.filter?fixHook.filter(event,originalEvent):event;}, // Includes some event props shared by KeyEvent and MouseEvent
props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function filter(event,original){ // Add which for key events
if(event.which == null){event.which = original.charCode != null?original.charCode:original.keyCode;}return event;}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function filter(event,original){var body,eventDoc,doc,button=original.button,fromElement=original.fromElement; // Calculate pageX/Y if missing and clientX/Y available
if(event.pageX == null && original.clientX != null){eventDoc = event.target.ownerDocument || document;doc = eventDoc.documentElement;body = eventDoc.body;event.pageX = original.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);event.pageY = original.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);} // Add relatedTarget, if necessary
if(!event.relatedTarget && fromElement){event.relatedTarget = fromElement === event.target?original.toElement:fromElement;} // Add which for click: 1 === left; 2 === middle; 3 === right
// Note: button is not normalized, so don't use it
if(!event.which && button !== undefined){event.which = button & 1?1:button & 2?3:button & 4?2:0;}return event;}},special:{load:{ // Prevent triggered image.load events from bubbling to window.load
noBubble:true},focus:{ // Fire native event if possible so blur/focus sequence is correct
trigger:function trigger(){if(this !== safeActiveElement() && this.focus){try{this.focus();return false;}catch(e) { // Support: IE<9
// If we error on focus to hidden element (#1486, #12518),
// let .trigger() run the handlers
}}},delegateType:"focusin"},blur:{trigger:function trigger(){if(this === safeActiveElement() && this.blur){this.blur();return false;}},delegateType:"focusout"},click:{ // For checkbox, fire native event so checked state will be right
trigger:function trigger(){if(jQuery.nodeName(this,"input") && this.type === "checkbox" && this.click){this.click();return false;}}, // For cross-browser consistency, don't fire native .click() on links
_default:function _default(event){return jQuery.nodeName(event.target,"a");}},beforeunload:{postDispatch:function postDispatch(event){ // Support: Firefox 20+
// Firefox doesn't alert if the returnValue field is not set.
if(event.result !== undefined && event.originalEvent){event.originalEvent.returnValue = event.result;}}}},simulate:function simulate(type,elem,event,bubble){ // Piggyback on a donor event to simulate a different one.
// Fake originalEvent to avoid donor's stopPropagation, but if the
// simulated event prevents default then we do the same on the donor.
var e=jQuery.extend(new jQuery.Event(),event,{type:type,isSimulated:true,originalEvent:{}});if(bubble){jQuery.event.trigger(e,null,elem);}else {jQuery.event.dispatch.call(elem,e);}if(e.isDefaultPrevented()){event.preventDefault();}}};jQuery.removeEvent = document.removeEventListener?function(elem,type,handle){if(elem.removeEventListener){elem.removeEventListener(type,handle,false);}}:function(elem,type,handle){var name="on" + type;if(elem.detachEvent){ // #8545, #7054, preventing memory leaks for custom events in IE6-8
// detachEvent needed property on element, by name of that event, to properly expose it to GC
if(typeof elem[name] === strundefined){elem[name] = null;}elem.detachEvent(name,handle);}};jQuery.Event = function(src,props){ // Allow instantiation without the 'new' keyword
if(!(this instanceof jQuery.Event)){return new jQuery.Event(src,props);} // Event object
if(src && src.type){this.originalEvent = src;this.type = src.type; // Events bubbling up the document may have been marked as prevented
// by a handler lower down the tree; reflect the correct value.
this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined &&  // Support: IE < 9, Android < 4.0
src.returnValue === false?returnTrue:returnFalse; // Event type
}else {this.type = src;} // Put explicitly provided properties onto the event object
if(props){jQuery.extend(this,props);} // Create a timestamp if incoming event doesn't have one
this.timeStamp = src && src.timeStamp || jQuery.now(); // Mark it as fixed
this[jQuery.expando] = true;}; // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {isDefaultPrevented:returnFalse,isPropagationStopped:returnFalse,isImmediatePropagationStopped:returnFalse,preventDefault:function preventDefault(){var e=this.originalEvent;this.isDefaultPrevented = returnTrue;if(!e){return;} // If preventDefault exists, run it on the original event
if(e.preventDefault){e.preventDefault(); // Support: IE
// Otherwise set the returnValue property of the original event to false
}else {e.returnValue = false;}},stopPropagation:function stopPropagation(){var e=this.originalEvent;this.isPropagationStopped = returnTrue;if(!e){return;} // If stopPropagation exists, run it on the original event
if(e.stopPropagation){e.stopPropagation();} // Support: IE
// Set the cancelBubble property of the original event to true
e.cancelBubble = true;},stopImmediatePropagation:function stopImmediatePropagation(){var e=this.originalEvent;this.isImmediatePropagationStopped = returnTrue;if(e && e.stopImmediatePropagation){e.stopImmediatePropagation();}this.stopPropagation();}}; // Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(orig,fix){jQuery.event.special[orig] = {delegateType:fix,bindType:fix,handle:function handle(event){var ret,target=this,related=event.relatedTarget,handleObj=event.handleObj; // For mousenter/leave call the handler if related is outside the target.
// NB: No relatedTarget if the mouse left/entered the browser window
if(!related || related !== target && !jQuery.contains(target,related)){event.type = handleObj.origType;ret = handleObj.handler.apply(this,arguments);event.type = fix;}return ret;}};}); // IE submit delegation
if(!support.submitBubbles){jQuery.event.special.submit = {setup:function setup(){ // Only need this for delegated form submit events
if(jQuery.nodeName(this,"form")){return false;} // Lazy-add a submit handler when a descendant form may potentially be submitted
jQuery.event.add(this,"click._submit keypress._submit",function(e){ // Node name check avoids a VML-related crash in IE (#9807)
var elem=e.target,form=jQuery.nodeName(elem,"input") || jQuery.nodeName(elem,"button")?elem.form:undefined;if(form && !jQuery._data(form,"submitBubbles")){jQuery.event.add(form,"submit._submit",function(event){event._submit_bubble = true;});jQuery._data(form,"submitBubbles",true);}}); // return undefined since we don't need an event listener
},postDispatch:function postDispatch(event){ // If form was submitted by the user, bubble the event up the tree
if(event._submit_bubble){delete event._submit_bubble;if(this.parentNode && !event.isTrigger){jQuery.event.simulate("submit",this.parentNode,event,true);}}},teardown:function teardown(){ // Only need this for delegated form submit events
if(jQuery.nodeName(this,"form")){return false;} // Remove delegated handlers; cleanData eventually reaps submit handlers attached above
jQuery.event.remove(this,"._submit");}};} // IE change delegation and checkbox/radio fix
if(!support.changeBubbles){jQuery.event.special.change = {setup:function setup(){if(rformElems.test(this.nodeName)){ // IE doesn't fire change on a check/radio until blur; trigger it on click
// after a propertychange. Eat the blur-change in special.change.handle.
// This still fires onchange a second time for check/radio after blur.
if(this.type === "checkbox" || this.type === "radio"){jQuery.event.add(this,"propertychange._change",function(event){if(event.originalEvent.propertyName === "checked"){this._just_changed = true;}});jQuery.event.add(this,"click._change",function(event){if(this._just_changed && !event.isTrigger){this._just_changed = false;} // Allow triggered, simulated change events (#11500)
jQuery.event.simulate("change",this,event,true);});}return false;} // Delegated event; lazy-add a change handler on descendant inputs
jQuery.event.add(this,"beforeactivate._change",function(e){var elem=e.target;if(rformElems.test(elem.nodeName) && !jQuery._data(elem,"changeBubbles")){jQuery.event.add(elem,"change._change",function(event){if(this.parentNode && !event.isSimulated && !event.isTrigger){jQuery.event.simulate("change",this.parentNode,event,true);}});jQuery._data(elem,"changeBubbles",true);}});},handle:function handle(event){var elem=event.target; // Swallow native change events from checkbox/radio, we already triggered them above
if(this !== elem || event.isSimulated || event.isTrigger || elem.type !== "radio" && elem.type !== "checkbox"){return event.handleObj.handler.apply(this,arguments);}},teardown:function teardown(){jQuery.event.remove(this,"._change");return !rformElems.test(this.nodeName);}};} // Create "bubbling" focus and blur events
if(!support.focusinBubbles){jQuery.each({focus:"focusin",blur:"focusout"},function(orig,fix){ // Attach a single capturing handler on the document while someone wants focusin/focusout
var handler=function handler(event){jQuery.event.simulate(fix,event.target,jQuery.event.fix(event),true);};jQuery.event.special[fix] = {setup:function setup(){var doc=this.ownerDocument || this,attaches=jQuery._data(doc,fix);if(!attaches){doc.addEventListener(orig,handler,true);}jQuery._data(doc,fix,(attaches || 0) + 1);},teardown:function teardown(){var doc=this.ownerDocument || this,attaches=jQuery._data(doc,fix) - 1;if(!attaches){doc.removeEventListener(orig,handler,true);jQuery._removeData(doc,fix);}else {jQuery._data(doc,fix,attaches);}}};});}jQuery.fn.extend({on:function on(types,selector,data,fn, /*INTERNAL*/one){var type,origFn; // Types can be a map of types/handlers
if(typeof types === "object"){ // ( types-Object, selector, data )
if(typeof selector !== "string"){ // ( types-Object, data )
data = data || selector;selector = undefined;}for(type in types) {this.on(type,selector,data,types[type],one);}return this;}if(data == null && fn == null){ // ( types, fn )
fn = selector;data = selector = undefined;}else if(fn == null){if(typeof selector === "string"){ // ( types, selector, fn )
fn = data;data = undefined;}else { // ( types, data, fn )
fn = data;data = selector;selector = undefined;}}if(fn === false){fn = returnFalse;}else if(!fn){return this;}if(one === 1){origFn = fn;fn = function(event){ // Can use an empty set, since event contains the info
jQuery().off(event);return origFn.apply(this,arguments);}; // Use same guid so caller can remove using origFn
fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);}return this.each(function(){jQuery.event.add(this,types,fn,data,selector);});},one:function one(types,selector,data,fn){return this.on(types,selector,data,fn,1);},off:function off(types,selector,fn){var handleObj,type;if(types && types.preventDefault && types.handleObj){ // ( event )  dispatched jQuery.Event
handleObj = types.handleObj;jQuery(types.delegateTarget).off(handleObj.namespace?handleObj.origType + "." + handleObj.namespace:handleObj.origType,handleObj.selector,handleObj.handler);return this;}if(typeof types === "object"){ // ( types-object [, selector] )
for(type in types) {this.off(type,selector,types[type]);}return this;}if(selector === false || typeof selector === "function"){ // ( types [, fn] )
fn = selector;selector = undefined;}if(fn === false){fn = returnFalse;}return this.each(function(){jQuery.event.remove(this,types,fn,selector);});},trigger:function trigger(type,data){return this.each(function(){jQuery.event.trigger(type,data,this);});},triggerHandler:function triggerHandler(type,data){var elem=this[0];if(elem){return jQuery.event.trigger(type,data,elem,true);}}});function createSafeFragment(document){var list=nodeNames.split("|"),safeFrag=document.createDocumentFragment();if(safeFrag.createElement){while(list.length) {safeFrag.createElement(list.pop());}}return safeFrag;}var nodeNames="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" + "header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",rinlinejQuery=/ jQuery\d+="(?:null|\d+)"/g,rnoshimcache=new RegExp("<(?:" + nodeNames + ")[\\s/>]","i"),rleadingWhitespace=/^\s+/,rxhtmlTag=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,rtagName=/<([\w:]+)/,rtbody=/<tbody/i,rhtml=/<|&#?\w+;/,rnoInnerhtml=/<(?:script|style|link)/i, // checked="checked" or checked
rchecked=/checked\s*(?:[^=]|=\s*.checked.)/i,rscriptType=/^$|\/(?:java|ecma)script/i,rscriptTypeMasked=/^true\/(.*)/,rcleanScript=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g, // We have to close these tags to support XHTML (#13200)
wrapMap={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],area:[1,"<map>","</map>"],param:[1,"<object>","</object>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"], // IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
// unless wrapped in a div with non-breaking characters in front of it.
_default:support.htmlSerialize?[0,"",""]:[1,"X<div>","</div>"]},safeFragment=createSafeFragment(document),fragmentDiv=safeFragment.appendChild(document.createElement("div"));wrapMap.optgroup = wrapMap.option;wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;wrapMap.th = wrapMap.td;function getAll(context,tag){var elems,elem,i=0,found=typeof context.getElementsByTagName !== strundefined?context.getElementsByTagName(tag || "*"):typeof context.querySelectorAll !== strundefined?context.querySelectorAll(tag || "*"):undefined;if(!found){for(found = [],elems = context.childNodes || context;(elem = elems[i]) != null;i++) {if(!tag || jQuery.nodeName(elem,tag)){found.push(elem);}else {jQuery.merge(found,getAll(elem,tag));}}}return tag === undefined || tag && jQuery.nodeName(context,tag)?jQuery.merge([context],found):found;} // Used in buildFragment, fixes the defaultChecked property
function fixDefaultChecked(elem){if(rcheckableType.test(elem.type)){elem.defaultChecked = elem.checked;}} // Support: IE<8
// Manipulating tables requires a tbody
function manipulationTarget(elem,content){return jQuery.nodeName(elem,"table") && jQuery.nodeName(content.nodeType !== 11?content:content.firstChild,"tr")?elem.getElementsByTagName("tbody")[0] || elem.appendChild(elem.ownerDocument.createElement("tbody")):elem;} // Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript(elem){elem.type = (jQuery.find.attr(elem,"type") !== null) + "/" + elem.type;return elem;}function restoreScript(elem){var match=rscriptTypeMasked.exec(elem.type);if(match){elem.type = match[1];}else {elem.removeAttribute("type");}return elem;} // Mark scripts as having already been evaluated
function setGlobalEval(elems,refElements){var elem,i=0;for(;(elem = elems[i]) != null;i++) {jQuery._data(elem,"globalEval",!refElements || jQuery._data(refElements[i],"globalEval"));}}function cloneCopyEvent(src,dest){if(dest.nodeType !== 1 || !jQuery.hasData(src)){return;}var type,i,l,oldData=jQuery._data(src),curData=jQuery._data(dest,oldData),events=oldData.events;if(events){delete curData.handle;curData.events = {};for(type in events) {for(i = 0,l = events[type].length;i < l;i++) {jQuery.event.add(dest,type,events[type][i]);}}} // make the cloned public data object a copy from the original
if(curData.data){curData.data = jQuery.extend({},curData.data);}}function fixCloneNodeIssues(src,dest){var nodeName,e,data; // We do not need to do anything for non-Elements
if(dest.nodeType !== 1){return;}nodeName = dest.nodeName.toLowerCase(); // IE6-8 copies events bound via attachEvent when using cloneNode.
if(!support.noCloneEvent && dest[jQuery.expando]){data = jQuery._data(dest);for(e in data.events) {jQuery.removeEvent(dest,e,data.handle);} // Event data gets referenced instead of copied if the expando gets copied too
dest.removeAttribute(jQuery.expando);} // IE blanks contents when cloning scripts, and tries to evaluate newly-set text
if(nodeName === "script" && dest.text !== src.text){disableScript(dest).text = src.text;restoreScript(dest); // IE6-10 improperly clones children of object elements using classid.
// IE10 throws NoModificationAllowedError if parent is null, #12132.
}else if(nodeName === "object"){if(dest.parentNode){dest.outerHTML = src.outerHTML;} // This path appears unavoidable for IE9. When cloning an object
// element in IE9, the outerHTML strategy above is not sufficient.
// If the src has innerHTML and the destination does not,
// copy the src.innerHTML into the dest.innerHTML. #10324
if(support.html5Clone && (src.innerHTML && !jQuery.trim(dest.innerHTML))){dest.innerHTML = src.innerHTML;}}else if(nodeName === "input" && rcheckableType.test(src.type)){ // IE6-8 fails to persist the checked state of a cloned checkbox
// or radio button. Worse, IE6-7 fail to give the cloned element
// a checked appearance if the defaultChecked value isn't also set
dest.defaultChecked = dest.checked = src.checked; // IE6-7 get confused and end up setting the value of a cloned
// checkbox/radio button to an empty string instead of "on"
if(dest.value !== src.value){dest.value = src.value;} // IE6-8 fails to return the selected option to the default selected
// state when cloning options
}else if(nodeName === "option"){dest.defaultSelected = dest.selected = src.defaultSelected; // IE6-8 fails to set the defaultValue to the correct value when
// cloning other types of input fields
}else if(nodeName === "input" || nodeName === "textarea"){dest.defaultValue = src.defaultValue;}}jQuery.extend({clone:function clone(elem,dataAndEvents,deepDataAndEvents){var destElements,node,clone,i,srcElements,inPage=jQuery.contains(elem.ownerDocument,elem);if(support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test("<" + elem.nodeName + ">")){clone = elem.cloneNode(true); // IE<=8 does not properly clone detached, unknown element nodes
}else {fragmentDiv.innerHTML = elem.outerHTML;fragmentDiv.removeChild(clone = fragmentDiv.firstChild);}if((!support.noCloneEvent || !support.noCloneChecked) && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)){ // We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
destElements = getAll(clone);srcElements = getAll(elem); // Fix all IE cloning issues
for(i = 0;(node = srcElements[i]) != null;++i) { // Ensure that the destination node is not null; Fixes #9587
if(destElements[i]){fixCloneNodeIssues(node,destElements[i]);}}} // Copy the events from the original to the clone
if(dataAndEvents){if(deepDataAndEvents){srcElements = srcElements || getAll(elem);destElements = destElements || getAll(clone);for(i = 0;(node = srcElements[i]) != null;i++) {cloneCopyEvent(node,destElements[i]);}}else {cloneCopyEvent(elem,clone);}} // Preserve script evaluation history
destElements = getAll(clone,"script");if(destElements.length > 0){setGlobalEval(destElements,!inPage && getAll(elem,"script"));}destElements = srcElements = node = null; // Return the cloned set
return clone;},buildFragment:function buildFragment(elems,context,scripts,selection){var j,elem,contains,tmp,tag,tbody,wrap,l=elems.length, // Ensure a safe fragment
safe=createSafeFragment(context),nodes=[],i=0;for(;i < l;i++) {elem = elems[i];if(elem || elem === 0){ // Add nodes directly
if(jQuery.type(elem) === "object"){jQuery.merge(nodes,elem.nodeType?[elem]:elem); // Convert non-html into a text node
}else if(!rhtml.test(elem)){nodes.push(context.createTextNode(elem)); // Convert html into DOM nodes
}else {tmp = tmp || safe.appendChild(context.createElement("div")); // Deserialize a standard representation
tag = (rtagName.exec(elem) || ["",""])[1].toLowerCase();wrap = wrapMap[tag] || wrapMap._default;tmp.innerHTML = wrap[1] + elem.replace(rxhtmlTag,"<$1></$2>") + wrap[2]; // Descend through wrappers to the right content
j = wrap[0];while(j--) {tmp = tmp.lastChild;} // Manually add leading whitespace removed by IE
if(!support.leadingWhitespace && rleadingWhitespace.test(elem)){nodes.push(context.createTextNode(rleadingWhitespace.exec(elem)[0]));} // Remove IE's autoinserted <tbody> from table fragments
if(!support.tbody){ // String was a <table>, *may* have spurious <tbody>
elem = tag === "table" && !rtbody.test(elem)?tmp.firstChild: // String was a bare <thead> or <tfoot>
wrap[1] === "<table>" && !rtbody.test(elem)?tmp:0;j = elem && elem.childNodes.length;while(j--) {if(jQuery.nodeName(tbody = elem.childNodes[j],"tbody") && !tbody.childNodes.length){elem.removeChild(tbody);}}}jQuery.merge(nodes,tmp.childNodes); // Fix #12392 for WebKit and IE > 9
tmp.textContent = ""; // Fix #12392 for oldIE
while(tmp.firstChild) {tmp.removeChild(tmp.firstChild);} // Remember the top-level container for proper cleanup
tmp = safe.lastChild;}}} // Fix #11356: Clear elements from fragment
if(tmp){safe.removeChild(tmp);} // Reset defaultChecked for any radios and checkboxes
// about to be appended to the DOM in IE 6/7 (#8060)
if(!support.appendChecked){jQuery.grep(getAll(nodes,"input"),fixDefaultChecked);}i = 0;while(elem = nodes[i++]) { // #4087 - If origin and destination elements are the same, and this is
// that element, do not do anything
if(selection && jQuery.inArray(elem,selection) !== -1){continue;}contains = jQuery.contains(elem.ownerDocument,elem); // Append to fragment
tmp = getAll(safe.appendChild(elem),"script"); // Preserve script evaluation history
if(contains){setGlobalEval(tmp);} // Capture executables
if(scripts){j = 0;while(elem = tmp[j++]) {if(rscriptType.test(elem.type || "")){scripts.push(elem);}}}}tmp = null;return safe;},cleanData:function cleanData(elems, /* internal */acceptData){var elem,type,id,data,i=0,internalKey=jQuery.expando,cache=jQuery.cache,deleteExpando=support.deleteExpando,special=jQuery.event.special;for(;(elem = elems[i]) != null;i++) {if(acceptData || jQuery.acceptData(elem)){id = elem[internalKey];data = id && cache[id];if(data){if(data.events){for(type in data.events) {if(special[type]){jQuery.event.remove(elem,type); // This is a shortcut to avoid jQuery.event.remove's overhead
}else {jQuery.removeEvent(elem,type,data.handle);}}} // Remove cache only if it was not already removed by jQuery.event.remove
if(cache[id]){delete cache[id]; // IE does not allow us to delete expando properties from nodes,
// nor does it have a removeAttribute function on Document nodes;
// we must handle all of these cases
if(deleteExpando){delete elem[internalKey];}else if(typeof elem.removeAttribute !== strundefined){elem.removeAttribute(internalKey);}else {elem[internalKey] = null;}deletedIds.push(id);}}}}}});jQuery.fn.extend({text:function text(value){return access(this,function(value){return value === undefined?jQuery.text(this):this.empty().append((this[0] && this[0].ownerDocument || document).createTextNode(value));},null,value,arguments.length);},append:function append(){return this.domManip(arguments,function(elem){if(this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9){var target=manipulationTarget(this,elem);target.appendChild(elem);}});},prepend:function prepend(){return this.domManip(arguments,function(elem){if(this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9){var target=manipulationTarget(this,elem);target.insertBefore(elem,target.firstChild);}});},before:function before(){return this.domManip(arguments,function(elem){if(this.parentNode){this.parentNode.insertBefore(elem,this);}});},after:function after(){return this.domManip(arguments,function(elem){if(this.parentNode){this.parentNode.insertBefore(elem,this.nextSibling);}});},remove:function remove(selector,keepData /* Internal Use Only */){var elem,elems=selector?jQuery.filter(selector,this):this,i=0;for(;(elem = elems[i]) != null;i++) {if(!keepData && elem.nodeType === 1){jQuery.cleanData(getAll(elem));}if(elem.parentNode){if(keepData && jQuery.contains(elem.ownerDocument,elem)){setGlobalEval(getAll(elem,"script"));}elem.parentNode.removeChild(elem);}}return this;},empty:function empty(){var elem,i=0;for(;(elem = this[i]) != null;i++) { // Remove element nodes and prevent memory leaks
if(elem.nodeType === 1){jQuery.cleanData(getAll(elem,false));} // Remove any remaining nodes
while(elem.firstChild) {elem.removeChild(elem.firstChild);} // If this is a select, ensure that it displays empty (#12336)
// Support: IE<9
if(elem.options && jQuery.nodeName(elem,"select")){elem.options.length = 0;}}return this;},clone:function clone(dataAndEvents,deepDataAndEvents){dataAndEvents = dataAndEvents == null?false:dataAndEvents;deepDataAndEvents = deepDataAndEvents == null?dataAndEvents:deepDataAndEvents;return this.map(function(){return jQuery.clone(this,dataAndEvents,deepDataAndEvents);});},html:function html(value){return access(this,function(value){var elem=this[0] || {},i=0,l=this.length;if(value === undefined){return elem.nodeType === 1?elem.innerHTML.replace(rinlinejQuery,""):undefined;} // See if we can take a shortcut and just use innerHTML
if(typeof value === "string" && !rnoInnerhtml.test(value) && (support.htmlSerialize || !rnoshimcache.test(value)) && (support.leadingWhitespace || !rleadingWhitespace.test(value)) && !wrapMap[(rtagName.exec(value) || ["",""])[1].toLowerCase()]){value = value.replace(rxhtmlTag,"<$1></$2>");try{for(;i < l;i++) { // Remove element nodes and prevent memory leaks
elem = this[i] || {};if(elem.nodeType === 1){jQuery.cleanData(getAll(elem,false));elem.innerHTML = value;}}elem = 0; // If using innerHTML throws an exception, use the fallback method
}catch(e) {}}if(elem){this.empty().append(value);}},null,value,arguments.length);},replaceWith:function replaceWith(){var arg=arguments[0]; // Make the changes, replacing each context element with the new content
this.domManip(arguments,function(elem){arg = this.parentNode;jQuery.cleanData(getAll(this));if(arg){arg.replaceChild(elem,this);}}); // Force removal if there was no new content (e.g., from empty arguments)
return arg && (arg.length || arg.nodeType)?this:this.remove();},detach:function detach(selector){return this.remove(selector,true);},domManip:function domManip(args,callback){ // Flatten any nested arrays
args = concat.apply([],args);var first,node,hasScripts,scripts,doc,fragment,i=0,l=this.length,set=this,iNoClone=l - 1,value=args[0],isFunction=jQuery.isFunction(value); // We can't cloneNode fragments that contain checked, in WebKit
if(isFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)){return this.each(function(index){var self=set.eq(index);if(isFunction){args[0] = value.call(this,index,self.html());}self.domManip(args,callback);});}if(l){fragment = jQuery.buildFragment(args,this[0].ownerDocument,false,this);first = fragment.firstChild;if(fragment.childNodes.length === 1){fragment = first;}if(first){scripts = jQuery.map(getAll(fragment,"script"),disableScript);hasScripts = scripts.length; // Use the original fragment for the last item instead of the first because it can end up
// being emptied incorrectly in certain situations (#8070).
for(;i < l;i++) {node = fragment;if(i !== iNoClone){node = jQuery.clone(node,true,true); // Keep references to cloned scripts for later restoration
if(hasScripts){jQuery.merge(scripts,getAll(node,"script"));}}callback.call(this[i],node,i);}if(hasScripts){doc = scripts[scripts.length - 1].ownerDocument; // Reenable scripts
jQuery.map(scripts,restoreScript); // Evaluate executable scripts on first document insertion
for(i = 0;i < hasScripts;i++) {node = scripts[i];if(rscriptType.test(node.type || "") && !jQuery._data(node,"globalEval") && jQuery.contains(doc,node)){if(node.src){ // Optional AJAX dependency, but won't run scripts if not present
if(jQuery._evalUrl){jQuery._evalUrl(node.src);}}else {jQuery.globalEval((node.text || node.textContent || node.innerHTML || "").replace(rcleanScript,""));}}}} // Fix #11809: Avoid leaking memory
fragment = first = null;}}return this;}});jQuery.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(name,original){jQuery.fn[name] = function(selector){var elems,i=0,ret=[],insert=jQuery(selector),last=insert.length - 1;for(;i <= last;i++) {elems = i === last?this:this.clone(true);jQuery(insert[i])[original](elems); // Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
push.apply(ret,elems.get());}return this.pushStack(ret);};});var iframe,elemdisplay={}; /**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */ // Called only from within defaultDisplay
function actualDisplay(name,doc){var style,elem=jQuery(doc.createElement(name)).appendTo(doc.body), // getDefaultComputedStyle might be reliably used only on attached element
display=window.getDefaultComputedStyle && (style = window.getDefaultComputedStyle(elem[0]))? // Use of this method is a temporary fix (more like optmization) until something better comes along,
// since it was removed from specification and supported only in FF
style.display:jQuery.css(elem[0],"display"); // We don't have any data stored on the element,
// so use "detach" method as fast way to get rid of the element
elem.detach();return display;} /**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */function defaultDisplay(nodeName){var doc=document,display=elemdisplay[nodeName];if(!display){display = actualDisplay(nodeName,doc); // If the simple way fails, read from inside an iframe
if(display === "none" || !display){ // Use the already-created iframe if possible
iframe = (iframe || jQuery("<iframe frameborder='0' width='0' height='0'/>")).appendTo(doc.documentElement); // Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
doc = (iframe[0].contentWindow || iframe[0].contentDocument).document; // Support: IE
doc.write();doc.close();display = actualDisplay(nodeName,doc);iframe.detach();} // Store the correct default display
elemdisplay[nodeName] = display;}return display;}(function(){var shrinkWrapBlocksVal;support.shrinkWrapBlocks = function(){if(shrinkWrapBlocksVal != null){return shrinkWrapBlocksVal;} // Will be changed later if needed.
shrinkWrapBlocksVal = false; // Minified: var b,c,d
var div,body,container;body = document.getElementsByTagName("body")[0];if(!body || !body.style){ // Test fired too early or in an unsupported environment, exit.
return;} // Setup
div = document.createElement("div");container = document.createElement("div");container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";body.appendChild(container).appendChild(div); // Support: IE6
// Check if elements with layout shrink-wrap their children
if(typeof div.style.zoom !== strundefined){ // Reset CSS: box-sizing; display; margin; border
div.style.cssText =  // Support: Firefox<29, Android 2.3
// Vendor-prefix box-sizing
"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" + "box-sizing:content-box;display:block;margin:0;border:0;" + "padding:1px;width:1px;zoom:1";div.appendChild(document.createElement("div")).style.width = "5px";shrinkWrapBlocksVal = div.offsetWidth !== 3;}body.removeChild(container);return shrinkWrapBlocksVal;};})();var rmargin=/^margin/;var rnumnonpx=new RegExp("^(" + pnum + ")(?!px)[a-z%]+$","i");var getStyles,curCSS,rposition=/^(top|right|bottom|left)$/;if(window.getComputedStyle){getStyles = function(elem){ // Support: IE<=11+, Firefox<=30+ (#15098, #14150)
// IE throws on elements created in popups
// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
if(elem.ownerDocument.defaultView.opener){return elem.ownerDocument.defaultView.getComputedStyle(elem,null);}return window.getComputedStyle(elem,null);};curCSS = function(elem,name,computed){var width,minWidth,maxWidth,ret,style=elem.style;computed = computed || getStyles(elem); // getPropertyValue is only needed for .css('filter') in IE9, see #12537
ret = computed?computed.getPropertyValue(name) || computed[name]:undefined;if(computed){if(ret === "" && !jQuery.contains(elem.ownerDocument,elem)){ret = jQuery.style(elem,name);} // A tribute to the "awesome hack by Dean Edwards"
// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
if(rnumnonpx.test(ret) && rmargin.test(name)){ // Remember the original values
width = style.width;minWidth = style.minWidth;maxWidth = style.maxWidth; // Put in the new values to get a computed value out
style.minWidth = style.maxWidth = style.width = ret;ret = computed.width; // Revert the changed values
style.width = width;style.minWidth = minWidth;style.maxWidth = maxWidth;}} // Support: IE
// IE returns zIndex value as an integer.
return ret === undefined?ret:ret + "";};}else if(document.documentElement.currentStyle){getStyles = function(elem){return elem.currentStyle;};curCSS = function(elem,name,computed){var left,rs,rsLeft,ret,style=elem.style;computed = computed || getStyles(elem);ret = computed?computed[name]:undefined; // Avoid setting ret to empty string here
// so we don't default to auto
if(ret == null && style && style[name]){ret = style[name];} // From the awesome hack by Dean Edwards
// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291
// If we're not dealing with a regular pixel number
// but a number that has a weird ending, we need to convert it to pixels
// but not position css attributes, as those are proportional to the parent element instead
// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
if(rnumnonpx.test(ret) && !rposition.test(name)){ // Remember the original values
left = style.left;rs = elem.runtimeStyle;rsLeft = rs && rs.left; // Put in the new values to get a computed value out
if(rsLeft){rs.left = elem.currentStyle.left;}style.left = name === "fontSize"?"1em":ret;ret = style.pixelLeft + "px"; // Revert the changed values
style.left = left;if(rsLeft){rs.left = rsLeft;}} // Support: IE
// IE returns zIndex value as an integer.
return ret === undefined?ret:ret + "" || "auto";};}function addGetHookIf(conditionFn,hookFn){ // Define the hook, we'll check on the first run if it's really needed.
return {get:function get(){var condition=conditionFn();if(condition == null){ // The test was not ready at this point; screw the hook this time
// but check again when needed next time.
return;}if(condition){ // Hook not needed (or it's not possible to use it due to missing dependency),
// remove it.
// Since there are no other hooks for marginRight, remove the whole object.
delete this.get;return;} // Hook needed; redefine it so that the support test is not executed again.
return (this.get = hookFn).apply(this,arguments);}};}(function(){ // Minified: var b,c,d,e,f,g, h,i
var div,style,a,pixelPositionVal,boxSizingReliableVal,reliableHiddenOffsetsVal,reliableMarginRightVal; // Setup
div = document.createElement("div");div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";a = div.getElementsByTagName("a")[0];style = a && a.style; // Finish early in limited (non-browser) environments
if(!style){return;}style.cssText = "float:left;opacity:.5"; // Support: IE<9
// Make sure that element opacity exists (as opposed to filter)
support.opacity = style.opacity === "0.5"; // Verify style float existence
// (IE uses styleFloat instead of cssFloat)
support.cssFloat = !!style.cssFloat;div.style.backgroundClip = "content-box";div.cloneNode(true).style.backgroundClip = "";support.clearCloneStyle = div.style.backgroundClip === "content-box"; // Support: Firefox<29, Android 2.3
// Vendor-prefix box-sizing
support.boxSizing = style.boxSizing === "" || style.MozBoxSizing === "" || style.WebkitBoxSizing === "";jQuery.extend(support,{reliableHiddenOffsets:function reliableHiddenOffsets(){if(reliableHiddenOffsetsVal == null){computeStyleTests();}return reliableHiddenOffsetsVal;},boxSizingReliable:function boxSizingReliable(){if(boxSizingReliableVal == null){computeStyleTests();}return boxSizingReliableVal;},pixelPosition:function pixelPosition(){if(pixelPositionVal == null){computeStyleTests();}return pixelPositionVal;}, // Support: Android 2.3
reliableMarginRight:function reliableMarginRight(){if(reliableMarginRightVal == null){computeStyleTests();}return reliableMarginRightVal;}});function computeStyleTests(){ // Minified: var b,c,d,j
var div,body,container,contents;body = document.getElementsByTagName("body")[0];if(!body || !body.style){ // Test fired too early or in an unsupported environment, exit.
return;} // Setup
div = document.createElement("div");container = document.createElement("div");container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";body.appendChild(container).appendChild(div);div.style.cssText =  // Support: Firefox<29, Android 2.3
// Vendor-prefix box-sizing
"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" + "box-sizing:border-box;display:block;margin-top:1%;top:1%;" + "border:1px;padding:1px;width:4px;position:absolute"; // Support: IE<9
// Assume reasonable values in the absence of getComputedStyle
pixelPositionVal = boxSizingReliableVal = false;reliableMarginRightVal = true; // Check for getComputedStyle so that this code is not run in IE<9.
if(window.getComputedStyle){pixelPositionVal = (window.getComputedStyle(div,null) || {}).top !== "1%";boxSizingReliableVal = (window.getComputedStyle(div,null) || {width:"4px"}).width === "4px"; // Support: Android 2.3
// Div with explicit width and no margin-right incorrectly
// gets computed margin-right based on width of container (#3333)
// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
contents = div.appendChild(document.createElement("div")); // Reset CSS: box-sizing; display; margin; border; padding
contents.style.cssText = div.style.cssText =  // Support: Firefox<29, Android 2.3
// Vendor-prefix box-sizing
"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" + "box-sizing:content-box;display:block;margin:0;border:0;padding:0";contents.style.marginRight = contents.style.width = "0";div.style.width = "1px";reliableMarginRightVal = !parseFloat((window.getComputedStyle(contents,null) || {}).marginRight);div.removeChild(contents);} // Support: IE8
// Check if table cells still have offsetWidth/Height when they are set
// to display:none and there are still other visible table cells in a
// table row; if so, offsetWidth/Height are not reliable for use when
// determining if an element has been hidden directly using
// display:none (it is still safe to use offsets if a parent element is
// hidden; don safety goggles and see bug #4512 for more information).
div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";contents = div.getElementsByTagName("td");contents[0].style.cssText = "margin:0;border:0;padding:0;display:none";reliableHiddenOffsetsVal = contents[0].offsetHeight === 0;if(reliableHiddenOffsetsVal){contents[0].style.display = "";contents[1].style.display = "none";reliableHiddenOffsetsVal = contents[0].offsetHeight === 0;}body.removeChild(container);}})(); // A method for quickly swapping in/out CSS properties to get correct calculations.
jQuery.swap = function(elem,options,callback,args){var ret,name,old={}; // Remember the old values, and insert the new ones
for(name in options) {old[name] = elem.style[name];elem.style[name] = options[name];}ret = callback.apply(elem,args || []); // Revert the old values
for(name in options) {elem.style[name] = old[name];}return ret;};var ralpha=/alpha\([^)]*\)/i,ropacity=/opacity\s*=\s*([^)]*)/, // swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
rdisplayswap=/^(none|table(?!-c[ea]).+)/,rnumsplit=new RegExp("^(" + pnum + ")(.*)$","i"),rrelNum=new RegExp("^([+-])=(" + pnum + ")","i"),cssShow={position:"absolute",visibility:"hidden",display:"block"},cssNormalTransform={letterSpacing:"0",fontWeight:"400"},cssPrefixes=["Webkit","O","Moz","ms"]; // return a css property mapped to a potentially vendor prefixed property
function vendorPropName(style,name){ // shortcut for names that are not vendor prefixed
if(name in style){return name;} // check for vendor prefixed names
var capName=name.charAt(0).toUpperCase() + name.slice(1),origName=name,i=cssPrefixes.length;while(i--) {name = cssPrefixes[i] + capName;if(name in style){return name;}}return origName;}function showHide(elements,show){var display,elem,hidden,values=[],index=0,length=elements.length;for(;index < length;index++) {elem = elements[index];if(!elem.style){continue;}values[index] = jQuery._data(elem,"olddisplay");display = elem.style.display;if(show){ // Reset the inline display of this element to learn if it is
// being hidden by cascaded rules or not
if(!values[index] && display === "none"){elem.style.display = "";} // Set elements which have been overridden with display: none
// in a stylesheet to whatever the default browser style is
// for such an element
if(elem.style.display === "" && isHidden(elem)){values[index] = jQuery._data(elem,"olddisplay",defaultDisplay(elem.nodeName));}}else {hidden = isHidden(elem);if(display && display !== "none" || !hidden){jQuery._data(elem,"olddisplay",hidden?display:jQuery.css(elem,"display"));}}} // Set the display of most of the elements in a second loop
// to avoid the constant reflow
for(index = 0;index < length;index++) {elem = elements[index];if(!elem.style){continue;}if(!show || elem.style.display === "none" || elem.style.display === ""){elem.style.display = show?values[index] || "":"none";}}return elements;}function setPositiveNumber(elem,value,subtract){var matches=rnumsplit.exec(value);return matches? // Guard against undefined "subtract", e.g., when used as in cssHooks
Math.max(0,matches[1] - (subtract || 0)) + (matches[2] || "px"):value;}function augmentWidthOrHeight(elem,name,extra,isBorderBox,styles){var i=extra === (isBorderBox?"border":"content")? // If we already have the right measurement, avoid augmentation
4: // Otherwise initialize for horizontal or vertical properties
name === "width"?1:0,val=0;for(;i < 4;i += 2) { // both box models exclude margin, so add it if we want it
if(extra === "margin"){val += jQuery.css(elem,extra + cssExpand[i],true,styles);}if(isBorderBox){ // border-box includes padding, so remove it if we want content
if(extra === "content"){val -= jQuery.css(elem,"padding" + cssExpand[i],true,styles);} // at this point, extra isn't border nor margin, so remove border
if(extra !== "margin"){val -= jQuery.css(elem,"border" + cssExpand[i] + "Width",true,styles);}}else { // at this point, extra isn't content, so add padding
val += jQuery.css(elem,"padding" + cssExpand[i],true,styles); // at this point, extra isn't content nor padding, so add border
if(extra !== "padding"){val += jQuery.css(elem,"border" + cssExpand[i] + "Width",true,styles);}}}return val;}function getWidthOrHeight(elem,name,extra){ // Start with offset property, which is equivalent to the border-box value
var valueIsBorderBox=true,val=name === "width"?elem.offsetWidth:elem.offsetHeight,styles=getStyles(elem),isBorderBox=support.boxSizing && jQuery.css(elem,"boxSizing",false,styles) === "border-box"; // some non-html elements return undefined for offsetWidth, so check for null/undefined
// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
if(val <= 0 || val == null){ // Fall back to computed then uncomputed css if necessary
val = curCSS(elem,name,styles);if(val < 0 || val == null){val = elem.style[name];} // Computed unit is not pixels. Stop here and return.
if(rnumnonpx.test(val)){return val;} // we need the check for style in case a browser which returns unreliable values
// for getComputedStyle silently falls back to the reliable elem.style
valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]); // Normalize "", auto, and prepare for extra
val = parseFloat(val) || 0;} // use the active box-sizing model to add/subtract irrelevant styles
return val + augmentWidthOrHeight(elem,name,extra || (isBorderBox?"border":"content"),valueIsBorderBox,styles) + "px";}jQuery.extend({ // Add in style property hooks for overriding the default
// behavior of getting and setting a style property
cssHooks:{opacity:{get:function get(elem,computed){if(computed){ // We should always get a number back from opacity
var ret=curCSS(elem,"opacity");return ret === ""?"1":ret;}}}}, // Don't automatically add "px" to these possibly-unitless properties
cssNumber:{"columnCount":true,"fillOpacity":true,"flexGrow":true,"flexShrink":true,"fontWeight":true,"lineHeight":true,"opacity":true,"order":true,"orphans":true,"widows":true,"zIndex":true,"zoom":true}, // Add in properties whose names you wish to fix before
// setting or getting the value
cssProps:{ // normalize float css property
"float":support.cssFloat?"cssFloat":"styleFloat"}, // Get and set the style property on a DOM Node
style:function style(elem,name,value,extra){ // Don't set styles on text and comment nodes
if(!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style){return;} // Make sure that we're working with the right name
var ret,type,hooks,origName=jQuery.camelCase(name),style=elem.style;name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(style,origName)); // gets hook for the prefixed version
// followed by the unprefixed version
hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // Check if we're setting a value
if(value !== undefined){type = typeof value; // convert relative number strings (+= or -=) to relative numbers. #7345
if(type === "string" && (ret = rrelNum.exec(value))){value = (ret[1] + 1) * ret[2] + parseFloat(jQuery.css(elem,name)); // Fixes bug #9237
type = "number";} // Make sure that null and NaN values aren't set. See: #7116
if(value == null || value !== value){return;} // If a number was passed in, add 'px' to the (except for certain CSS properties)
if(type === "number" && !jQuery.cssNumber[origName]){value += "px";} // Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
// but it would mean to define eight (for every problematic property) identical functions
if(!support.clearCloneStyle && value === "" && name.indexOf("background") === 0){style[name] = "inherit";} // If a hook was provided, use that value, otherwise just set the specified value
if(!hooks || !("set" in hooks) || (value = hooks.set(elem,value,extra)) !== undefined){ // Support: IE
// Swallow errors from 'invalid' CSS values (#5509)
try{style[name] = value;}catch(e) {}}}else { // If a hook was provided get the non-computed value from there
if(hooks && "get" in hooks && (ret = hooks.get(elem,false,extra)) !== undefined){return ret;} // Otherwise just get the value from the style object
return style[name];}},css:function css(elem,name,extra,styles){var num,val,hooks,origName=jQuery.camelCase(name); // Make sure that we're working with the right name
name = jQuery.cssProps[origName] || (jQuery.cssProps[origName] = vendorPropName(elem.style,origName)); // gets hook for the prefixed version
// followed by the unprefixed version
hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // If a hook was provided get the computed value from there
if(hooks && "get" in hooks){val = hooks.get(elem,true,extra);} // Otherwise, if a way to get the computed value exists, use that
if(val === undefined){val = curCSS(elem,name,styles);} //convert "normal" to computed value
if(val === "normal" && name in cssNormalTransform){val = cssNormalTransform[name];} // Return, converting to number if forced or a qualifier was provided and val looks numeric
if(extra === "" || extra){num = parseFloat(val);return extra === true || jQuery.isNumeric(num)?num || 0:val;}return val;}});jQuery.each(["height","width"],function(i,name){jQuery.cssHooks[name] = {get:function get(elem,computed,extra){if(computed){ // certain elements can have dimension info if we invisibly show them
// however, it must have a current display style that would benefit from this
return rdisplayswap.test(jQuery.css(elem,"display")) && elem.offsetWidth === 0?jQuery.swap(elem,cssShow,function(){return getWidthOrHeight(elem,name,extra);}):getWidthOrHeight(elem,name,extra);}},set:function set(elem,value,extra){var styles=extra && getStyles(elem);return setPositiveNumber(elem,value,extra?augmentWidthOrHeight(elem,name,extra,support.boxSizing && jQuery.css(elem,"boxSizing",false,styles) === "border-box",styles):0);}};});if(!support.opacity){jQuery.cssHooks.opacity = {get:function get(elem,computed){ // IE uses filters for opacity
return ropacity.test((computed && elem.currentStyle?elem.currentStyle.filter:elem.style.filter) || "")?0.01 * parseFloat(RegExp.$1) + "":computed?"1":"";},set:function set(elem,value){var style=elem.style,currentStyle=elem.currentStyle,opacity=jQuery.isNumeric(value)?"alpha(opacity=" + value * 100 + ")":"",filter=currentStyle && currentStyle.filter || style.filter || ""; // IE has trouble with opacity if it does not have layout
// Force it by setting the zoom level
style.zoom = 1; // if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
// if value === "", then remove inline opacity #12685
if((value >= 1 || value === "") && jQuery.trim(filter.replace(ralpha,"")) === "" && style.removeAttribute){ // Setting style.filter to null, "" & " " still leave "filter:" in the cssText
// if "filter:" is present at all, clearType is disabled, we want to avoid this
// style.removeAttribute is IE Only, but so apparently is this code path...
style.removeAttribute("filter"); // if there is no filter style applied in a css rule or unset inline opacity, we are done
if(value === "" || currentStyle && !currentStyle.filter){return;}} // otherwise, set new filter values
style.filter = ralpha.test(filter)?filter.replace(ralpha,opacity):filter + " " + opacity;}};}jQuery.cssHooks.marginRight = addGetHookIf(support.reliableMarginRight,function(elem,computed){if(computed){ // WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
// Work around by temporarily setting element display to inline-block
return jQuery.swap(elem,{"display":"inline-block"},curCSS,[elem,"marginRight"]);}}); // These hooks are used by animate to expand properties
jQuery.each({margin:"",padding:"",border:"Width"},function(prefix,suffix){jQuery.cssHooks[prefix + suffix] = {expand:function expand(value){var i=0,expanded={}, // assumes a single number if not a string
parts=typeof value === "string"?value.split(" "):[value];for(;i < 4;i++) {expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];}return expanded;}};if(!rmargin.test(prefix)){jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;}});jQuery.fn.extend({css:function css(name,value){return access(this,function(elem,name,value){var styles,len,map={},i=0;if(jQuery.isArray(name)){styles = getStyles(elem);len = name.length;for(;i < len;i++) {map[name[i]] = jQuery.css(elem,name[i],false,styles);}return map;}return value !== undefined?jQuery.style(elem,name,value):jQuery.css(elem,name);},name,value,arguments.length > 1);},show:function show(){return showHide(this,true);},hide:function hide(){return showHide(this);},toggle:function toggle(state){if(typeof state === "boolean"){return state?this.show():this.hide();}return this.each(function(){if(isHidden(this)){jQuery(this).show();}else {jQuery(this).hide();}});}});function Tween(elem,options,prop,end,easing){return new Tween.prototype.init(elem,options,prop,end,easing);}jQuery.Tween = Tween;Tween.prototype = {constructor:Tween,init:function init(elem,options,prop,end,easing,unit){this.elem = elem;this.prop = prop;this.easing = easing || "swing";this.options = options;this.start = this.now = this.cur();this.end = end;this.unit = unit || (jQuery.cssNumber[prop]?"":"px");},cur:function cur(){var hooks=Tween.propHooks[this.prop];return hooks && hooks.get?hooks.get(this):Tween.propHooks._default.get(this);},run:function run(percent){var eased,hooks=Tween.propHooks[this.prop];if(this.options.duration){this.pos = eased = jQuery.easing[this.easing](percent,this.options.duration * percent,0,1,this.options.duration);}else {this.pos = eased = percent;}this.now = (this.end - this.start) * eased + this.start;if(this.options.step){this.options.step.call(this.elem,this.now,this);}if(hooks && hooks.set){hooks.set(this);}else {Tween.propHooks._default.set(this);}return this;}};Tween.prototype.init.prototype = Tween.prototype;Tween.propHooks = {_default:{get:function get(tween){var result;if(tween.elem[tween.prop] != null && (!tween.elem.style || tween.elem.style[tween.prop] == null)){return tween.elem[tween.prop];} // passing an empty string as a 3rd parameter to .css will automatically
// attempt a parseFloat and fallback to a string if the parse fails
// so, simple values such as "10px" are parsed to Float.
// complex values such as "rotate(1rad)" are returned as is.
result = jQuery.css(tween.elem,tween.prop,""); // Empty strings, null, undefined and "auto" are converted to 0.
return !result || result === "auto"?0:result;},set:function set(tween){ // use step hook for back compat - use cssHook if its there - use .style if its
// available and use plain properties where available
if(jQuery.fx.step[tween.prop]){jQuery.fx.step[tween.prop](tween);}else if(tween.elem.style && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])){jQuery.style(tween.elem,tween.prop,tween.now + tween.unit);}else {tween.elem[tween.prop] = tween.now;}}}}; // Support: IE <=9
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {set:function set(tween){if(tween.elem.nodeType && tween.elem.parentNode){tween.elem[tween.prop] = tween.now;}}};jQuery.easing = {linear:function linear(p){return p;},swing:function swing(p){return 0.5 - Math.cos(p * Math.PI) / 2;}};jQuery.fx = Tween.prototype.init; // Back Compat <1.8 extension point
jQuery.fx.step = {};var fxNow,timerId,rfxtypes=/^(?:toggle|show|hide)$/,rfxnum=new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$","i"),rrun=/queueHooks$/,animationPrefilters=[defaultPrefilter],tweeners={"*":[function(prop,value){var tween=this.createTween(prop,value),target=tween.cur(),parts=rfxnum.exec(value),unit=parts && parts[3] || (jQuery.cssNumber[prop]?"":"px"), // Starting value computation is required for potential unit mismatches
start=(jQuery.cssNumber[prop] || unit !== "px" && +target) && rfxnum.exec(jQuery.css(tween.elem,prop)),scale=1,maxIterations=20;if(start && start[3] !== unit){ // Trust units reported by jQuery.css
unit = unit || start[3]; // Make sure we update the tween properties later on
parts = parts || []; // Iteratively approximate from a nonzero starting point
start = +target || 1;do { // If previous iteration zeroed out, double until we get *something*
// Use a string for doubling factor so we don't accidentally see scale as unchanged below
scale = scale || ".5"; // Adjust and apply
start = start / scale;jQuery.style(tween.elem,prop,start + unit); // Update scale, tolerating zero or NaN from tween.cur()
// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
}while(scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations);} // Update tween properties
if(parts){start = tween.start = +start || +target || 0;tween.unit = unit; // If a +=/-= token was provided, we're doing a relative animation
tween.end = parts[1]?start + (parts[1] + 1) * parts[2]:+parts[2];}return tween;}]}; // Animations created synchronously will run synchronously
function createFxNow(){setTimeout(function(){fxNow = undefined;});return fxNow = jQuery.now();} // Generate parameters to create a standard animation
function genFx(type,includeWidth){var which,attrs={height:type},i=0; // if we include width, step value is 1 to do all cssExpand values,
// if we don't include width, step value is 2 to skip over Left and Right
includeWidth = includeWidth?1:0;for(;i < 4;i += 2 - includeWidth) {which = cssExpand[i];attrs["margin" + which] = attrs["padding" + which] = type;}if(includeWidth){attrs.opacity = attrs.width = type;}return attrs;}function createTween(value,prop,animation){var tween,collection=(tweeners[prop] || []).concat(tweeners["*"]),index=0,length=collection.length;for(;index < length;index++) {if(tween = collection[index].call(animation,prop,value)){ // we're done with this property
return tween;}}}function defaultPrefilter(elem,props,opts){ /* jshint validthis: true */var prop,value,toggle,tween,hooks,oldfire,display,checkDisplay,anim=this,orig={},style=elem.style,hidden=elem.nodeType && isHidden(elem),dataShow=jQuery._data(elem,"fxshow"); // handle queue: false promises
if(!opts.queue){hooks = jQuery._queueHooks(elem,"fx");if(hooks.unqueued == null){hooks.unqueued = 0;oldfire = hooks.empty.fire;hooks.empty.fire = function(){if(!hooks.unqueued){oldfire();}};}hooks.unqueued++;anim.always(function(){ // doing this makes sure that the complete handler will be called
// before this completes
anim.always(function(){hooks.unqueued--;if(!jQuery.queue(elem,"fx").length){hooks.empty.fire();}});});} // height/width overflow pass
if(elem.nodeType === 1 && ("height" in props || "width" in props)){ // Make sure that nothing sneaks out
// Record all 3 overflow attributes because IE does not
// change the overflow attribute when overflowX and
// overflowY are set to the same value
opts.overflow = [style.overflow,style.overflowX,style.overflowY]; // Set display property to inline-block for height/width
// animations on inline elements that are having width/height animated
display = jQuery.css(elem,"display"); // Test default display if display is currently "none"
checkDisplay = display === "none"?jQuery._data(elem,"olddisplay") || defaultDisplay(elem.nodeName):display;if(checkDisplay === "inline" && jQuery.css(elem,"float") === "none"){ // inline-level elements accept inline-block;
// block-level elements need to be inline with layout
if(!support.inlineBlockNeedsLayout || defaultDisplay(elem.nodeName) === "inline"){style.display = "inline-block";}else {style.zoom = 1;}}}if(opts.overflow){style.overflow = "hidden";if(!support.shrinkWrapBlocks()){anim.always(function(){style.overflow = opts.overflow[0];style.overflowX = opts.overflow[1];style.overflowY = opts.overflow[2];});}} // show/hide pass
for(prop in props) {value = props[prop];if(rfxtypes.exec(value)){delete props[prop];toggle = toggle || value === "toggle";if(value === (hidden?"hide":"show")){ // If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
if(value === "show" && dataShow && dataShow[prop] !== undefined){hidden = true;}else {continue;}}orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem,prop); // Any non-fx value stops us from restoring the original display value
}else {display = undefined;}}if(!jQuery.isEmptyObject(orig)){if(dataShow){if("hidden" in dataShow){hidden = dataShow.hidden;}}else {dataShow = jQuery._data(elem,"fxshow",{});} // store state if its toggle - enables .stop().toggle() to "reverse"
if(toggle){dataShow.hidden = !hidden;}if(hidden){jQuery(elem).show();}else {anim.done(function(){jQuery(elem).hide();});}anim.done(function(){var prop;jQuery._removeData(elem,"fxshow");for(prop in orig) {jQuery.style(elem,prop,orig[prop]);}});for(prop in orig) {tween = createTween(hidden?dataShow[prop]:0,prop,anim);if(!(prop in dataShow)){dataShow[prop] = tween.start;if(hidden){tween.end = tween.start;tween.start = prop === "width" || prop === "height"?1:0;}}} // If this is a noop like .hide().hide(), restore an overwritten display value
}else if((display === "none"?defaultDisplay(elem.nodeName):display) === "inline"){style.display = display;}}function propFilter(props,specialEasing){var index,name,easing,value,hooks; // camelCase, specialEasing and expand cssHook pass
for(index in props) {name = jQuery.camelCase(index);easing = specialEasing[name];value = props[index];if(jQuery.isArray(value)){easing = value[1];value = props[index] = value[0];}if(index !== name){props[name] = value;delete props[index];}hooks = jQuery.cssHooks[name];if(hooks && "expand" in hooks){value = hooks.expand(value);delete props[name]; // not quite $.extend, this wont overwrite keys already present.
// also - reusing 'index' from above because we have the correct "name"
for(index in value) {if(!(index in props)){props[index] = value[index];specialEasing[index] = easing;}}}else {specialEasing[name] = easing;}}}function Animation(elem,properties,options){var result,stopped,index=0,length=animationPrefilters.length,deferred=jQuery.Deferred().always(function(){ // don't match elem in the :animated selector
delete tick.elem;}),tick=function tick(){if(stopped){return false;}var currentTime=fxNow || createFxNow(),remaining=Math.max(0,animation.startTime + animation.duration - currentTime), // archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
temp=remaining / animation.duration || 0,percent=1 - temp,index=0,length=animation.tweens.length;for(;index < length;index++) {animation.tweens[index].run(percent);}deferred.notifyWith(elem,[animation,percent,remaining]);if(percent < 1 && length){return remaining;}else {deferred.resolveWith(elem,[animation]);return false;}},animation=deferred.promise({elem:elem,props:jQuery.extend({},properties),opts:jQuery.extend(true,{specialEasing:{}},options),originalProperties:properties,originalOptions:options,startTime:fxNow || createFxNow(),duration:options.duration,tweens:[],createTween:function createTween(prop,end){var tween=jQuery.Tween(elem,animation.opts,prop,end,animation.opts.specialEasing[prop] || animation.opts.easing);animation.tweens.push(tween);return tween;},stop:function stop(gotoEnd){var index=0, // if we are going to the end, we want to run all the tweens
// otherwise we skip this part
length=gotoEnd?animation.tweens.length:0;if(stopped){return this;}stopped = true;for(;index < length;index++) {animation.tweens[index].run(1);} // resolve when we played the last frame
// otherwise, reject
if(gotoEnd){deferred.resolveWith(elem,[animation,gotoEnd]);}else {deferred.rejectWith(elem,[animation,gotoEnd]);}return this;}}),props=animation.props;propFilter(props,animation.opts.specialEasing);for(;index < length;index++) {result = animationPrefilters[index].call(animation,elem,props,animation.opts);if(result){return result;}}jQuery.map(props,createTween,animation);if(jQuery.isFunction(animation.opts.start)){animation.opts.start.call(elem,animation);}jQuery.fx.timer(jQuery.extend(tick,{elem:elem,anim:animation,queue:animation.opts.queue})); // attach callbacks from options
return animation.progress(animation.opts.progress).done(animation.opts.done,animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);}jQuery.Animation = jQuery.extend(Animation,{tweener:function tweener(props,callback){if(jQuery.isFunction(props)){callback = props;props = ["*"];}else {props = props.split(" ");}var prop,index=0,length=props.length;for(;index < length;index++) {prop = props[index];tweeners[prop] = tweeners[prop] || [];tweeners[prop].unshift(callback);}},prefilter:function prefilter(callback,prepend){if(prepend){animationPrefilters.unshift(callback);}else {animationPrefilters.push(callback);}}});jQuery.speed = function(speed,easing,fn){var opt=speed && typeof speed === "object"?jQuery.extend({},speed):{complete:fn || !fn && easing || jQuery.isFunction(speed) && speed,duration:speed,easing:fn && easing || easing && !jQuery.isFunction(easing) && easing};opt.duration = jQuery.fx.off?0:typeof opt.duration === "number"?opt.duration:opt.duration in jQuery.fx.speeds?jQuery.fx.speeds[opt.duration]:jQuery.fx.speeds._default; // normalize opt.queue - true/undefined/null -> "fx"
if(opt.queue == null || opt.queue === true){opt.queue = "fx";} // Queueing
opt.old = opt.complete;opt.complete = function(){if(jQuery.isFunction(opt.old)){opt.old.call(this);}if(opt.queue){jQuery.dequeue(this,opt.queue);}};return opt;};jQuery.fn.extend({fadeTo:function fadeTo(speed,to,easing,callback){ // show any hidden elements after setting opacity to 0
return this.filter(isHidden).css("opacity",0).show() // animate to the value specified
.end().animate({opacity:to},speed,easing,callback);},animate:function animate(prop,speed,easing,callback){var empty=jQuery.isEmptyObject(prop),optall=jQuery.speed(speed,easing,callback),doAnimation=function doAnimation(){ // Operate on a copy of prop so per-property easing won't be lost
var anim=Animation(this,jQuery.extend({},prop),optall); // Empty animations, or finishing resolves immediately
if(empty || jQuery._data(this,"finish")){anim.stop(true);}};doAnimation.finish = doAnimation;return empty || optall.queue === false?this.each(doAnimation):this.queue(optall.queue,doAnimation);},stop:function stop(type,clearQueue,gotoEnd){var stopQueue=function stopQueue(hooks){var stop=hooks.stop;delete hooks.stop;stop(gotoEnd);};if(typeof type !== "string"){gotoEnd = clearQueue;clearQueue = type;type = undefined;}if(clearQueue && type !== false){this.queue(type || "fx",[]);}return this.each(function(){var dequeue=true,index=type != null && type + "queueHooks",timers=jQuery.timers,data=jQuery._data(this);if(index){if(data[index] && data[index].stop){stopQueue(data[index]);}}else {for(index in data) {if(data[index] && data[index].stop && rrun.test(index)){stopQueue(data[index]);}}}for(index = timers.length;index--;) {if(timers[index].elem === this && (type == null || timers[index].queue === type)){timers[index].anim.stop(gotoEnd);dequeue = false;timers.splice(index,1);}} // start the next in the queue if the last step wasn't forced
// timers currently will call their complete callbacks, which will dequeue
// but only if they were gotoEnd
if(dequeue || !gotoEnd){jQuery.dequeue(this,type);}});},finish:function finish(type){if(type !== false){type = type || "fx";}return this.each(function(){var index,data=jQuery._data(this),queue=data[type + "queue"],hooks=data[type + "queueHooks"],timers=jQuery.timers,length=queue?queue.length:0; // enable finishing flag on private data
data.finish = true; // empty the queue first
jQuery.queue(this,type,[]);if(hooks && hooks.stop){hooks.stop.call(this,true);} // look for any active animations, and finish them
for(index = timers.length;index--;) {if(timers[index].elem === this && timers[index].queue === type){timers[index].anim.stop(true);timers.splice(index,1);}} // look for any animations in the old queue and finish them
for(index = 0;index < length;index++) {if(queue[index] && queue[index].finish){queue[index].finish.call(this);}} // turn off finishing flag
delete data.finish;});}});jQuery.each(["toggle","show","hide"],function(i,name){var cssFn=jQuery.fn[name];jQuery.fn[name] = function(speed,easing,callback){return speed == null || typeof speed === "boolean"?cssFn.apply(this,arguments):this.animate(genFx(name,true),speed,easing,callback);};}); // Generate shortcuts for custom animations
jQuery.each({slideDown:genFx("show"),slideUp:genFx("hide"),slideToggle:genFx("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(name,props){jQuery.fn[name] = function(speed,easing,callback){return this.animate(props,speed,easing,callback);};});jQuery.timers = [];jQuery.fx.tick = function(){var timer,timers=jQuery.timers,i=0;fxNow = jQuery.now();for(;i < timers.length;i++) {timer = timers[i]; // Checks the timer has not already been removed
if(!timer() && timers[i] === timer){timers.splice(i--,1);}}if(!timers.length){jQuery.fx.stop();}fxNow = undefined;};jQuery.fx.timer = function(timer){jQuery.timers.push(timer);if(timer()){jQuery.fx.start();}else {jQuery.timers.pop();}};jQuery.fx.interval = 13;jQuery.fx.start = function(){if(!timerId){timerId = setInterval(jQuery.fx.tick,jQuery.fx.interval);}};jQuery.fx.stop = function(){clearInterval(timerId);timerId = null;};jQuery.fx.speeds = {slow:600,fast:200, // Default speed
_default:400}; // Based off of the plugin by Clint Helfers, with permission.
// http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function(time,type){time = jQuery.fx?jQuery.fx.speeds[time] || time:time;type = type || "fx";return this.queue(type,function(next,hooks){var timeout=setTimeout(next,time);hooks.stop = function(){clearTimeout(timeout);};});};(function(){ // Minified: var a,b,c,d,e
var input,div,select,a,opt; // Setup
div = document.createElement("div");div.setAttribute("className","t");div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";a = div.getElementsByTagName("a")[0]; // First batch of tests.
select = document.createElement("select");opt = select.appendChild(document.createElement("option"));input = div.getElementsByTagName("input")[0];a.style.cssText = "top:1px"; // Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
support.getSetAttribute = div.className !== "t"; // Get the style information from getAttribute
// (IE uses .cssText instead)
support.style = /top/.test(a.getAttribute("style")); // Make sure that URLs aren't manipulated
// (IE normalizes it by default)
support.hrefNormalized = a.getAttribute("href") === "/a"; // Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
support.checkOn = !!input.value; // Make sure that a selected-by-default option has a working selected property.
// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
support.optSelected = opt.selected; // Tests for enctype support on a form (#6743)
support.enctype = !!document.createElement("form").enctype; // Make sure that the options inside disabled selects aren't marked as disabled
// (WebKit marks them as disabled)
select.disabled = true;support.optDisabled = !opt.disabled; // Support: IE8 only
// Check if we can trust getAttribute("value")
input = document.createElement("input");input.setAttribute("value","");support.input = input.getAttribute("value") === ""; // Check if an input maintains its value after becoming a radio
input.value = "t";input.setAttribute("type","radio");support.radioValue = input.value === "t";})();var rreturn=/\r/g;jQuery.fn.extend({val:function val(value){var hooks,ret,isFunction,elem=this[0];if(!arguments.length){if(elem){hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];if(hooks && "get" in hooks && (ret = hooks.get(elem,"value")) !== undefined){return ret;}ret = elem.value;return typeof ret === "string"? // handle most common string cases
ret.replace(rreturn,""): // handle cases where value is null/undef or number
ret == null?"":ret;}return;}isFunction = jQuery.isFunction(value);return this.each(function(i){var val;if(this.nodeType !== 1){return;}if(isFunction){val = value.call(this,i,jQuery(this).val());}else {val = value;} // Treat null/undefined as ""; convert numbers to string
if(val == null){val = "";}else if(typeof val === "number"){val += "";}else if(jQuery.isArray(val)){val = jQuery.map(val,function(value){return value == null?"":value + "";});}hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()]; // If set returns undefined, fall back to normal setting
if(!hooks || !("set" in hooks) || hooks.set(this,val,"value") === undefined){this.value = val;}});}});jQuery.extend({valHooks:{option:{get:function get(elem){var val=jQuery.find.attr(elem,"value");return val != null?val: // Support: IE10-11+
// option.text throws exceptions (#14686, #14858)
jQuery.trim(jQuery.text(elem));}},select:{get:function get(elem){var value,option,options=elem.options,index=elem.selectedIndex,one=elem.type === "select-one" || index < 0,values=one?null:[],max=one?index + 1:options.length,i=index < 0?max:one?index:0; // Loop through all the selected options
for(;i < max;i++) {option = options[i]; // oldIE doesn't update selected after form reset (#2551)
if((option.selected || i === index) && ( // Don't return options that are disabled or in a disabled optgroup
support.optDisabled?!option.disabled:option.getAttribute("disabled") === null) && (!option.parentNode.disabled || !jQuery.nodeName(option.parentNode,"optgroup"))){ // Get the specific value for the option
value = jQuery(option).val(); // We don't need an array for one selects
if(one){return value;} // Multi-Selects return an array
values.push(value);}}return values;},set:function set(elem,value){var optionSet,option,options=elem.options,values=jQuery.makeArray(value),i=options.length;while(i--) {option = options[i];if(jQuery.inArray(jQuery.valHooks.option.get(option),values) >= 0){ // Support: IE6
// When new option element is added to select box we need to
// force reflow of newly added node in order to workaround delay
// of initialization properties
try{option.selected = optionSet = true;}catch(_) { // Will be executed only in IE6
option.scrollHeight;}}else {option.selected = false;}} // Force browsers to behave consistently when non-matching value is set
if(!optionSet){elem.selectedIndex = -1;}return options;}}}}); // Radios and checkboxes getter/setter
jQuery.each(["radio","checkbox"],function(){jQuery.valHooks[this] = {set:function set(elem,value){if(jQuery.isArray(value)){return elem.checked = jQuery.inArray(jQuery(elem).val(),value) >= 0;}}};if(!support.checkOn){jQuery.valHooks[this].get = function(elem){ // Support: Webkit
// "" is returned instead of "on" if a value isn't specified
return elem.getAttribute("value") === null?"on":elem.value;};}});var nodeHook,boolHook,attrHandle=jQuery.expr.attrHandle,ruseDefault=/^(?:checked|selected)$/i,getSetAttribute=support.getSetAttribute,getSetInput=support.input;jQuery.fn.extend({attr:function attr(name,value){return access(this,jQuery.attr,name,value,arguments.length > 1);},removeAttr:function removeAttr(name){return this.each(function(){jQuery.removeAttr(this,name);});}});jQuery.extend({attr:function attr(elem,name,value){var hooks,ret,nType=elem.nodeType; // don't get/set attributes on text, comment and attribute nodes
if(!elem || nType === 3 || nType === 8 || nType === 2){return;} // Fallback to prop when attributes are not supported
if(typeof elem.getAttribute === strundefined){return jQuery.prop(elem,name,value);} // All attributes are lowercase
// Grab necessary hook if one is defined
if(nType !== 1 || !jQuery.isXMLDoc(elem)){name = name.toLowerCase();hooks = jQuery.attrHooks[name] || (jQuery.expr.match.bool.test(name)?boolHook:nodeHook);}if(value !== undefined){if(value === null){jQuery.removeAttr(elem,name);}else if(hooks && "set" in hooks && (ret = hooks.set(elem,value,name)) !== undefined){return ret;}else {elem.setAttribute(name,value + "");return value;}}else if(hooks && "get" in hooks && (ret = hooks.get(elem,name)) !== null){return ret;}else {ret = jQuery.find.attr(elem,name); // Non-existent attributes return null, we normalize to undefined
return ret == null?undefined:ret;}},removeAttr:function removeAttr(elem,value){var name,propName,i=0,attrNames=value && value.match(rnotwhite);if(attrNames && elem.nodeType === 1){while(name = attrNames[i++]) {propName = jQuery.propFix[name] || name; // Boolean attributes get special treatment (#10870)
if(jQuery.expr.match.bool.test(name)){ // Set corresponding property to false
if(getSetInput && getSetAttribute || !ruseDefault.test(name)){elem[propName] = false; // Support: IE<9
// Also clear defaultChecked/defaultSelected (if appropriate)
}else {elem[jQuery.camelCase("default-" + name)] = elem[propName] = false;} // See #9699 for explanation of this approach (setting first, then removal)
}else {jQuery.attr(elem,name,"");}elem.removeAttribute(getSetAttribute?name:propName);}}},attrHooks:{type:{set:function set(elem,value){if(!support.radioValue && value === "radio" && jQuery.nodeName(elem,"input")){ // Setting the type on a radio button after the value resets the value in IE6-9
// Reset value to default in case type is set after value during creation
var val=elem.value;elem.setAttribute("type",value);if(val){elem.value = val;}return value;}}}}}); // Hook for boolean attributes
boolHook = {set:function set(elem,value,name){if(value === false){ // Remove boolean attributes when set to false
jQuery.removeAttr(elem,name);}else if(getSetInput && getSetAttribute || !ruseDefault.test(name)){ // IE<8 needs the *property* name
elem.setAttribute(!getSetAttribute && jQuery.propFix[name] || name,name); // Use defaultChecked and defaultSelected for oldIE
}else {elem[jQuery.camelCase("default-" + name)] = elem[name] = true;}return name;}}; // Retrieve booleans specially
jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g),function(i,name){var getter=attrHandle[name] || jQuery.find.attr;attrHandle[name] = getSetInput && getSetAttribute || !ruseDefault.test(name)?function(elem,name,isXML){var ret,handle;if(!isXML){ // Avoid an infinite loop by temporarily removing this function from the getter
handle = attrHandle[name];attrHandle[name] = ret;ret = getter(elem,name,isXML) != null?name.toLowerCase():null;attrHandle[name] = handle;}return ret;}:function(elem,name,isXML){if(!isXML){return elem[jQuery.camelCase("default-" + name)]?name.toLowerCase():null;}};}); // fix oldIE attroperties
if(!getSetInput || !getSetAttribute){jQuery.attrHooks.value = {set:function set(elem,value,name){if(jQuery.nodeName(elem,"input")){ // Does not return so that setAttribute is also used
elem.defaultValue = value;}else { // Use nodeHook if defined (#1954); otherwise setAttribute is fine
return nodeHook && nodeHook.set(elem,value,name);}}};} // IE6/7 do not support getting/setting some attributes with get/setAttribute
if(!getSetAttribute){ // Use this for any attribute in IE6/7
// This fixes almost every IE6/7 issue
nodeHook = {set:function set(elem,value,name){ // Set the existing or create a new attribute node
var ret=elem.getAttributeNode(name);if(!ret){elem.setAttributeNode(ret = elem.ownerDocument.createAttribute(name));}ret.value = value += ""; // Break association with cloned elements by also using setAttribute (#9646)
if(name === "value" || value === elem.getAttribute(name)){return value;}}}; // Some attributes are constructed with empty-string values when not defined
attrHandle.id = attrHandle.name = attrHandle.coords = function(elem,name,isXML){var ret;if(!isXML){return (ret = elem.getAttributeNode(name)) && ret.value !== ""?ret.value:null;}}; // Fixing value retrieval on a button requires this module
jQuery.valHooks.button = {get:function get(elem,name){var ret=elem.getAttributeNode(name);if(ret && ret.specified){return ret.value;}},set:nodeHook.set}; // Set contenteditable to false on removals(#10429)
// Setting to empty string throws an error as an invalid value
jQuery.attrHooks.contenteditable = {set:function set(elem,value,name){nodeHook.set(elem,value === ""?false:value,name);}}; // Set width and height to auto instead of 0 on empty string( Bug #8150 )
// This is for removals
jQuery.each(["width","height"],function(i,name){jQuery.attrHooks[name] = {set:function set(elem,value){if(value === ""){elem.setAttribute(name,"auto");return value;}}};});}if(!support.style){jQuery.attrHooks.style = {get:function get(elem){ // Return undefined in the case of empty string
// Note: IE uppercases css property names, but if we were to .toLowerCase()
// .cssText, that would destroy case senstitivity in URL's, like in "background"
return elem.style.cssText || undefined;},set:function set(elem,value){return elem.style.cssText = value + "";}};}var rfocusable=/^(?:input|select|textarea|button|object)$/i,rclickable=/^(?:a|area)$/i;jQuery.fn.extend({prop:function prop(name,value){return access(this,jQuery.prop,name,value,arguments.length > 1);},removeProp:function removeProp(name){name = jQuery.propFix[name] || name;return this.each(function(){ // try/catch handles cases where IE balks (such as removing a property on window)
try{this[name] = undefined;delete this[name];}catch(e) {}});}});jQuery.extend({propFix:{"for":"htmlFor","class":"className"},prop:function prop(elem,name,value){var ret,hooks,notxml,nType=elem.nodeType; // don't get/set properties on text, comment and attribute nodes
if(!elem || nType === 3 || nType === 8 || nType === 2){return;}notxml = nType !== 1 || !jQuery.isXMLDoc(elem);if(notxml){ // Fix name and attach hooks
name = jQuery.propFix[name] || name;hooks = jQuery.propHooks[name];}if(value !== undefined){return hooks && "set" in hooks && (ret = hooks.set(elem,value,name)) !== undefined?ret:elem[name] = value;}else {return hooks && "get" in hooks && (ret = hooks.get(elem,name)) !== null?ret:elem[name];}},propHooks:{tabIndex:{get:function get(elem){ // elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
// Use proper attribute retrieval(#12072)
var tabindex=jQuery.find.attr(elem,"tabindex");return tabindex?parseInt(tabindex,10):rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href?0:-1;}}}}); // Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if(!support.hrefNormalized){ // href/src property should get the full normalized URL (#10299/#12915)
jQuery.each(["href","src"],function(i,name){jQuery.propHooks[name] = {get:function get(elem){return elem.getAttribute(name,4);}};});} // Support: Safari, IE9+
// mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if(!support.optSelected){jQuery.propHooks.selected = {get:function get(elem){var parent=elem.parentNode;if(parent){parent.selectedIndex; // Make sure that it also works with optgroups, see #5701
if(parent.parentNode){parent.parentNode.selectedIndex;}}return null;}};}jQuery.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){jQuery.propFix[this.toLowerCase()] = this;}); // IE6/7 call enctype encoding
if(!support.enctype){jQuery.propFix.enctype = "encoding";}var rclass=/[\t\r\n\f]/g;jQuery.fn.extend({addClass:function addClass(value){var classes,elem,cur,clazz,j,finalValue,i=0,len=this.length,proceed=typeof value === "string" && value;if(jQuery.isFunction(value)){return this.each(function(j){jQuery(this).addClass(value.call(this,j,this.className));});}if(proceed){ // The disjunction here is for better compressibility (see removeClass)
classes = (value || "").match(rnotwhite) || [];for(;i < len;i++) {elem = this[i];cur = elem.nodeType === 1 && (elem.className?(" " + elem.className + " ").replace(rclass," "):" ");if(cur){j = 0;while(clazz = classes[j++]) {if(cur.indexOf(" " + clazz + " ") < 0){cur += clazz + " ";}} // only assign if different to avoid unneeded rendering.
finalValue = jQuery.trim(cur);if(elem.className !== finalValue){elem.className = finalValue;}}}}return this;},removeClass:function removeClass(value){var classes,elem,cur,clazz,j,finalValue,i=0,len=this.length,proceed=arguments.length === 0 || typeof value === "string" && value;if(jQuery.isFunction(value)){return this.each(function(j){jQuery(this).removeClass(value.call(this,j,this.className));});}if(proceed){classes = (value || "").match(rnotwhite) || [];for(;i < len;i++) {elem = this[i]; // This expression is here for better compressibility (see addClass)
cur = elem.nodeType === 1 && (elem.className?(" " + elem.className + " ").replace(rclass," "):"");if(cur){j = 0;while(clazz = classes[j++]) { // Remove *all* instances
while(cur.indexOf(" " + clazz + " ") >= 0) {cur = cur.replace(" " + clazz + " "," ");}} // only assign if different to avoid unneeded rendering.
finalValue = value?jQuery.trim(cur):"";if(elem.className !== finalValue){elem.className = finalValue;}}}}return this;},toggleClass:function toggleClass(value,stateVal){var type=typeof value;if(typeof stateVal === "boolean" && type === "string"){return stateVal?this.addClass(value):this.removeClass(value);}if(jQuery.isFunction(value)){return this.each(function(i){jQuery(this).toggleClass(value.call(this,i,this.className,stateVal),stateVal);});}return this.each(function(){if(type === "string"){ // toggle individual class names
var className,i=0,self=jQuery(this),classNames=value.match(rnotwhite) || [];while(className = classNames[i++]) { // check each className given, space separated list
if(self.hasClass(className)){self.removeClass(className);}else {self.addClass(className);}} // Toggle whole class name
}else if(type === strundefined || type === "boolean"){if(this.className){ // store className if set
jQuery._data(this,"__className__",this.className);} // If the element has a class name or if we're passed "false",
// then remove the whole classname (if there was one, the above saved it).
// Otherwise bring back whatever was previously saved (if anything),
// falling back to the empty string if nothing was stored.
this.className = this.className || value === false?"":jQuery._data(this,"__className__") || "";}});},hasClass:function hasClass(selector){var className=" " + selector + " ",i=0,l=this.length;for(;i < l;i++) {if(this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass," ").indexOf(className) >= 0){return true;}}return false;}}); // Return jQuery for attributes-only inclusion
jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup error contextmenu").split(" "),function(i,name){ // Handle event binding
jQuery.fn[name] = function(data,fn){return arguments.length > 0?this.on(name,null,data,fn):this.trigger(name);};});jQuery.fn.extend({hover:function hover(fnOver,fnOut){return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);},bind:function bind(types,data,fn){return this.on(types,null,data,fn);},unbind:function unbind(types,fn){return this.off(types,null,fn);},delegate:function delegate(selector,types,data,fn){return this.on(types,selector,data,fn);},undelegate:function undelegate(selector,types,fn){ // ( namespace ) or ( selector, types [, fn] )
return arguments.length === 1?this.off(selector,"**"):this.off(types,selector || "**",fn);}});var nonce=jQuery.now();var rquery=/\?/;var rvalidtokens=/(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;jQuery.parseJSON = function(data){ // Attempt to parse using the native JSON parser first
if(window.JSON && window.JSON.parse){ // Support: Android 2.3
// Workaround failure to string-cast null input
return window.JSON.parse(data + "");}var requireNonComma,depth=null,str=jQuery.trim(data + ""); // Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
// after removing valid tokens
return str && !jQuery.trim(str.replace(rvalidtokens,function(token,comma,open,close){ // Force termination if we see a misplaced comma
if(requireNonComma && comma){depth = 0;} // Perform no more replacements after returning to outermost depth
if(depth === 0){return token;} // Commas must not follow "[", "{", or ","
requireNonComma = open || comma; // Determine new depth
// array/object open ("[" or "{"): depth += true - false (increment)
// array/object close ("]" or "}"): depth += false - true (decrement)
// other cases ("," or primitive): depth += true - true (numeric cast)
depth += !close - !open; // Remove this token
return "";}))?Function("return " + str)():jQuery.error("Invalid JSON: " + data);}; // Cross-browser xml parsing
jQuery.parseXML = function(data){var xml,tmp;if(!data || typeof data !== "string"){return null;}try{if(window.DOMParser){ // Standard
tmp = new DOMParser();xml = tmp.parseFromString(data,"text/xml");}else { // IE
xml = new ActiveXObject("Microsoft.XMLDOM");xml.async = "false";xml.loadXML(data);}}catch(e) {xml = undefined;}if(!xml || !xml.documentElement || xml.getElementsByTagName("parsererror").length){jQuery.error("Invalid XML: " + data);}return xml;};var  // Document location
ajaxLocParts,ajaxLocation,rhash=/#.*$/,rts=/([?&])_=[^&]*/,rheaders=/^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
// #7653, #8125, #8152: local protocol detection
rlocalProtocol=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,rnoContent=/^(?:GET|HEAD)$/,rprotocol=/^\/\//,rurl=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/, /* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */prefilters={}, /* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */transports={}, // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
allTypes="*/".concat("*"); // #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try{ajaxLocation = location.href;}catch(e) { // Use the href attribute of an A element
// since IE will modify it given document.location
ajaxLocation = document.createElement("a");ajaxLocation.href = "";ajaxLocation = ajaxLocation.href;} // Segment location into parts
ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || []; // Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports(structure){ // dataTypeExpression is optional and defaults to "*"
return function(dataTypeExpression,func){if(typeof dataTypeExpression !== "string"){func = dataTypeExpression;dataTypeExpression = "*";}var dataType,i=0,dataTypes=dataTypeExpression.toLowerCase().match(rnotwhite) || [];if(jQuery.isFunction(func)){ // For each dataType in the dataTypeExpression
while(dataType = dataTypes[i++]) { // Prepend if requested
if(dataType.charAt(0) === "+"){dataType = dataType.slice(1) || "*";(structure[dataType] = structure[dataType] || []).unshift(func); // Otherwise append
}else {(structure[dataType] = structure[dataType] || []).push(func);}}}};} // Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports(structure,options,originalOptions,jqXHR){var inspected={},seekingTransport=structure === transports;function inspect(dataType){var selected;inspected[dataType] = true;jQuery.each(structure[dataType] || [],function(_,prefilterOrFactory){var dataTypeOrTransport=prefilterOrFactory(options,originalOptions,jqXHR);if(typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]){options.dataTypes.unshift(dataTypeOrTransport);inspect(dataTypeOrTransport);return false;}else if(seekingTransport){return !(selected = dataTypeOrTransport);}});return selected;}return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");} // A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend(target,src){var deep,key,flatOptions=jQuery.ajaxSettings.flatOptions || {};for(key in src) {if(src[key] !== undefined){(flatOptions[key]?target:deep || (deep = {}))[key] = src[key];}}if(deep){jQuery.extend(true,target,deep);}return target;} /* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */function ajaxHandleResponses(s,jqXHR,responses){var firstDataType,ct,finalDataType,type,contents=s.contents,dataTypes=s.dataTypes; // Remove auto dataType and get content-type in the process
while(dataTypes[0] === "*") {dataTypes.shift();if(ct === undefined){ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");}} // Check if we're dealing with a known content-type
if(ct){for(type in contents) {if(contents[type] && contents[type].test(ct)){dataTypes.unshift(type);break;}}} // Check to see if we have a response for the expected dataType
if(dataTypes[0] in responses){finalDataType = dataTypes[0];}else { // Try convertible dataTypes
for(type in responses) {if(!dataTypes[0] || s.converters[type + " " + dataTypes[0]]){finalDataType = type;break;}if(!firstDataType){firstDataType = type;}} // Or just use first one
finalDataType = finalDataType || firstDataType;} // If we found a dataType
// We add the dataType to the list if needed
// and return the corresponding response
if(finalDataType){if(finalDataType !== dataTypes[0]){dataTypes.unshift(finalDataType);}return responses[finalDataType];}} /* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */function ajaxConvert(s,response,jqXHR,isSuccess){var conv2,current,conv,tmp,prev,converters={}, // Work with a copy of dataTypes in case we need to modify it for conversion
dataTypes=s.dataTypes.slice(); // Create converters map with lowercased keys
if(dataTypes[1]){for(conv in s.converters) {converters[conv.toLowerCase()] = s.converters[conv];}}current = dataTypes.shift(); // Convert to each sequential dataType
while(current) {if(s.responseFields[current]){jqXHR[s.responseFields[current]] = response;} // Apply the dataFilter if provided
if(!prev && isSuccess && s.dataFilter){response = s.dataFilter(response,s.dataType);}prev = current;current = dataTypes.shift();if(current){ // There's only work to do if current dataType is non-auto
if(current === "*"){current = prev; // Convert response if prev dataType is non-auto and differs from current
}else if(prev !== "*" && prev !== current){ // Seek a direct converter
conv = converters[prev + " " + current] || converters["* " + current]; // If none found, seek a pair
if(!conv){for(conv2 in converters) { // If conv2 outputs current
tmp = conv2.split(" ");if(tmp[1] === current){ // If prev can be converted to accepted input
conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];if(conv){ // Condense equivalence converters
if(conv === true){conv = converters[conv2]; // Otherwise, insert the intermediate dataType
}else if(converters[conv2] !== true){current = tmp[0];dataTypes.unshift(tmp[1]);}break;}}}} // Apply converter (if not an equivalence)
if(conv !== true){ // Unless errors are allowed to bubble, catch and return them
if(conv && s["throws"]){response = conv(response);}else {try{response = conv(response);}catch(e) {return {state:"parsererror",error:conv?e:"No conversion from " + prev + " to " + current};}}}}}}return {state:"success",data:response};}jQuery.extend({ // Counter for holding the number of active queries
active:0, // Last-Modified header cache for next request
lastModified:{},etag:{},ajaxSettings:{url:ajaxLocation,type:"GET",isLocal:rlocalProtocol.test(ajaxLocParts[1]),global:true,processData:true,async:true,contentType:"application/x-www-form-urlencoded; charset=UTF-8", /*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/accepts:{"*":allTypes,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"}, // Data converters
// Keys separate source (or catchall "*") and destination types with a single space
converters:{ // Convert anything to text
"* text":String, // Text to html (true = no transformation)
"text html":true, // Evaluate text as a json expression
"text json":jQuery.parseJSON, // Parse text as xml
"text xml":jQuery.parseXML}, // For options that shouldn't be deep extended:
// you can add your own custom options here if
// and when you create one that shouldn't be
// deep extended (see ajaxExtend)
flatOptions:{url:true,context:true}}, // Creates a full fledged settings object into target
// with both ajaxSettings and settings fields.
// If target is omitted, writes into ajaxSettings.
ajaxSetup:function ajaxSetup(target,settings){return settings? // Building a settings object
ajaxExtend(ajaxExtend(target,jQuery.ajaxSettings),settings): // Extending ajaxSettings
ajaxExtend(jQuery.ajaxSettings,target);},ajaxPrefilter:addToPrefiltersOrTransports(prefilters),ajaxTransport:addToPrefiltersOrTransports(transports), // Main method
ajax:function ajax(url,options){ // If url is an object, simulate pre-1.5 signature
if(typeof url === "object"){options = url;url = undefined;} // Force options to be an object
options = options || {};var  // Cross-domain detection vars
parts, // Loop variable
i, // URL without anti-cache param
cacheURL, // Response headers as string
responseHeadersString, // timeout handle
timeoutTimer, // To know if global events are to be dispatched
fireGlobals,transport, // Response headers
responseHeaders, // Create the final options object
s=jQuery.ajaxSetup({},options), // Callbacks context
callbackContext=s.context || s, // Context for global events is callbackContext if it is a DOM node or jQuery collection
globalEventContext=s.context && (callbackContext.nodeType || callbackContext.jquery)?jQuery(callbackContext):jQuery.event, // Deferreds
deferred=jQuery.Deferred(),completeDeferred=jQuery.Callbacks("once memory"), // Status-dependent callbacks
_statusCode=s.statusCode || {}, // Headers (they are sent all at once)
requestHeaders={},requestHeadersNames={}, // The jqXHR state
state=0, // Default abort message
strAbort="canceled", // Fake xhr
jqXHR={readyState:0, // Builds headers hashtable if needed
getResponseHeader:function getResponseHeader(key){var match;if(state === 2){if(!responseHeaders){responseHeaders = {};while(match = rheaders.exec(responseHeadersString)) {responseHeaders[match[1].toLowerCase()] = match[2];}}match = responseHeaders[key.toLowerCase()];}return match == null?null:match;}, // Raw string
getAllResponseHeaders:function getAllResponseHeaders(){return state === 2?responseHeadersString:null;}, // Caches the header
setRequestHeader:function setRequestHeader(name,value){var lname=name.toLowerCase();if(!state){name = requestHeadersNames[lname] = requestHeadersNames[lname] || name;requestHeaders[name] = value;}return this;}, // Overrides response content-type header
overrideMimeType:function overrideMimeType(type){if(!state){s.mimeType = type;}return this;}, // Status-dependent callbacks
statusCode:function statusCode(map){var code;if(map){if(state < 2){for(code in map) { // Lazy-add the new callback in a way that preserves old ones
_statusCode[code] = [_statusCode[code],map[code]];}}else { // Execute the appropriate callbacks
jqXHR.always(map[jqXHR.status]);}}return this;}, // Cancel the request
abort:function abort(statusText){var finalText=statusText || strAbort;if(transport){transport.abort(finalText);}done(0,finalText);return this;}}; // Attach deferreds
deferred.promise(jqXHR).complete = completeDeferred.add;jqXHR.success = jqXHR.done;jqXHR.error = jqXHR.fail; // Remove hash character (#7531: and string promotion)
// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
// Handle falsy url in the settings object (#10093: consistency with old signature)
// We also use the url parameter if available
s.url = ((url || s.url || ajaxLocation) + "").replace(rhash,"").replace(rprotocol,ajaxLocParts[1] + "//"); // Alias method option to type as per ticket #12004
s.type = options.method || options.type || s.method || s.type; // Extract dataTypes list
s.dataTypes = jQuery.trim(s.dataType || "*").toLowerCase().match(rnotwhite) || [""]; // A cross-domain request is in order when we have a protocol:host:port mismatch
if(s.crossDomain == null){parts = rurl.exec(s.url.toLowerCase());s.crossDomain = !!(parts && (parts[1] !== ajaxLocParts[1] || parts[2] !== ajaxLocParts[2] || (parts[3] || (parts[1] === "http:"?"80":"443")) !== (ajaxLocParts[3] || (ajaxLocParts[1] === "http:"?"80":"443"))));} // Convert data if not already a string
if(s.data && s.processData && typeof s.data !== "string"){s.data = jQuery.param(s.data,s.traditional);} // Apply prefilters
inspectPrefiltersOrTransports(prefilters,s,options,jqXHR); // If request was aborted inside a prefilter, stop there
if(state === 2){return jqXHR;} // We can fire global events as of now if asked to
// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
fireGlobals = jQuery.event && s.global; // Watch for a new set of requests
if(fireGlobals && jQuery.active++ === 0){jQuery.event.trigger("ajaxStart");} // Uppercase the type
s.type = s.type.toUpperCase(); // Determine if request has content
s.hasContent = !rnoContent.test(s.type); // Save the URL in case we're toying with the If-Modified-Since
// and/or If-None-Match header later on
cacheURL = s.url; // More options handling for requests with no content
if(!s.hasContent){ // If data is available, append data to url
if(s.data){cacheURL = s.url += (rquery.test(cacheURL)?"&":"?") + s.data; // #9682: remove data so that it's not used in an eventual retry
delete s.data;} // Add anti-cache in url if needed
if(s.cache === false){s.url = rts.test(cacheURL)? // If there is already a '_' parameter, set its value
cacheURL.replace(rts,"$1_=" + nonce++): // Otherwise add one to the end
cacheURL + (rquery.test(cacheURL)?"&":"?") + "_=" + nonce++;}} // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
if(s.ifModified){if(jQuery.lastModified[cacheURL]){jqXHR.setRequestHeader("If-Modified-Since",jQuery.lastModified[cacheURL]);}if(jQuery.etag[cacheURL]){jqXHR.setRequestHeader("If-None-Match",jQuery.etag[cacheURL]);}} // Set the correct header, if data is being sent
if(s.data && s.hasContent && s.contentType !== false || options.contentType){jqXHR.setRequestHeader("Content-Type",s.contentType);} // Set the Accepts header for the server, depending on the dataType
jqXHR.setRequestHeader("Accept",s.dataTypes[0] && s.accepts[s.dataTypes[0]]?s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*"?", " + allTypes + "; q=0.01":""):s.accepts["*"]); // Check for headers option
for(i in s.headers) {jqXHR.setRequestHeader(i,s.headers[i]);} // Allow custom headers/mimetypes and early abort
if(s.beforeSend && (s.beforeSend.call(callbackContext,jqXHR,s) === false || state === 2)){ // Abort if not done already and return
return jqXHR.abort();} // aborting is no longer a cancellation
strAbort = "abort"; // Install callbacks on deferreds
for(i in {success:1,error:1,complete:1}) {jqXHR[i](s[i]);} // Get transport
transport = inspectPrefiltersOrTransports(transports,s,options,jqXHR); // If no transport, we auto-abort
if(!transport){done(-1,"No Transport");}else {jqXHR.readyState = 1; // Send global event
if(fireGlobals){globalEventContext.trigger("ajaxSend",[jqXHR,s]);} // Timeout
if(s.async && s.timeout > 0){timeoutTimer = setTimeout(function(){jqXHR.abort("timeout");},s.timeout);}try{state = 1;transport.send(requestHeaders,done);}catch(e) { // Propagate exception as error if not done
if(state < 2){done(-1,e); // Simply rethrow otherwise
}else {throw e;}}} // Callback for when everything is done
function done(status,nativeStatusText,responses,headers){var isSuccess,success,error,response,modified,statusText=nativeStatusText; // Called once
if(state === 2){return;} // State is "done" now
state = 2; // Clear timeout if it exists
if(timeoutTimer){clearTimeout(timeoutTimer);} // Dereference transport for early garbage collection
// (no matter how long the jqXHR object will be used)
transport = undefined; // Cache response headers
responseHeadersString = headers || ""; // Set readyState
jqXHR.readyState = status > 0?4:0; // Determine if successful
isSuccess = status >= 200 && status < 300 || status === 304; // Get response data
if(responses){response = ajaxHandleResponses(s,jqXHR,responses);} // Convert no matter what (that way responseXXX fields are always set)
response = ajaxConvert(s,response,jqXHR,isSuccess); // If successful, handle type chaining
if(isSuccess){ // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
if(s.ifModified){modified = jqXHR.getResponseHeader("Last-Modified");if(modified){jQuery.lastModified[cacheURL] = modified;}modified = jqXHR.getResponseHeader("etag");if(modified){jQuery.etag[cacheURL] = modified;}} // if no content
if(status === 204 || s.type === "HEAD"){statusText = "nocontent"; // if not modified
}else if(status === 304){statusText = "notmodified"; // If we have data, let's convert it
}else {statusText = response.state;success = response.data;error = response.error;isSuccess = !error;}}else { // We extract error from statusText
// then normalize statusText and status for non-aborts
error = statusText;if(status || !statusText){statusText = "error";if(status < 0){status = 0;}}} // Set data for the fake xhr object
jqXHR.status = status;jqXHR.statusText = (nativeStatusText || statusText) + ""; // Success/Error
if(isSuccess){deferred.resolveWith(callbackContext,[success,statusText,jqXHR]);}else {deferred.rejectWith(callbackContext,[jqXHR,statusText,error]);} // Status-dependent callbacks
jqXHR.statusCode(_statusCode);_statusCode = undefined;if(fireGlobals){globalEventContext.trigger(isSuccess?"ajaxSuccess":"ajaxError",[jqXHR,s,isSuccess?success:error]);} // Complete
completeDeferred.fireWith(callbackContext,[jqXHR,statusText]);if(fireGlobals){globalEventContext.trigger("ajaxComplete",[jqXHR,s]); // Handle the global AJAX counter
if(! --jQuery.active){jQuery.event.trigger("ajaxStop");}}}return jqXHR;},getJSON:function getJSON(url,data,callback){return jQuery.get(url,data,callback,"json");},getScript:function getScript(url,callback){return jQuery.get(url,undefined,callback,"script");}});jQuery.each(["get","post"],function(i,method){jQuery[method] = function(url,data,callback,type){ // shift arguments if data argument was omitted
if(jQuery.isFunction(data)){type = type || callback;callback = data;data = undefined;}return jQuery.ajax({url:url,type:method,dataType:type,data:data,success:callback});};});jQuery._evalUrl = function(url){return jQuery.ajax({url:url,type:"GET",dataType:"script",async:false,global:false,"throws":true});};jQuery.fn.extend({wrapAll:function wrapAll(html){if(jQuery.isFunction(html)){return this.each(function(i){jQuery(this).wrapAll(html.call(this,i));});}if(this[0]){ // The elements to wrap the target around
var wrap=jQuery(html,this[0].ownerDocument).eq(0).clone(true);if(this[0].parentNode){wrap.insertBefore(this[0]);}wrap.map(function(){var elem=this;while(elem.firstChild && elem.firstChild.nodeType === 1) {elem = elem.firstChild;}return elem;}).append(this);}return this;},wrapInner:function wrapInner(html){if(jQuery.isFunction(html)){return this.each(function(i){jQuery(this).wrapInner(html.call(this,i));});}return this.each(function(){var self=jQuery(this),contents=self.contents();if(contents.length){contents.wrapAll(html);}else {self.append(html);}});},wrap:function wrap(html){var isFunction=jQuery.isFunction(html);return this.each(function(i){jQuery(this).wrapAll(isFunction?html.call(this,i):html);});},unwrap:function unwrap(){return this.parent().each(function(){if(!jQuery.nodeName(this,"body")){jQuery(this).replaceWith(this.childNodes);}}).end();}});jQuery.expr.filters.hidden = function(elem){ // Support: Opera <= 12.12
// Opera reports offsetWidths and offsetHeights less than zero on some elements
return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 || !support.reliableHiddenOffsets() && (elem.style && elem.style.display || jQuery.css(elem,"display")) === "none";};jQuery.expr.filters.visible = function(elem){return !jQuery.expr.filters.hidden(elem);};var r20=/%20/g,rbracket=/\[\]$/,rCRLF=/\r?\n/g,rsubmitterTypes=/^(?:submit|button|image|reset|file)$/i,rsubmittable=/^(?:input|select|textarea|keygen)/i;function buildParams(prefix,obj,traditional,add){var name;if(jQuery.isArray(obj)){ // Serialize array item.
jQuery.each(obj,function(i,v){if(traditional || rbracket.test(prefix)){ // Treat each array item as a scalar.
add(prefix,v);}else { // Item is non-scalar (array or object), encode its numeric index.
buildParams(prefix + "[" + (typeof v === "object"?i:"") + "]",v,traditional,add);}});}else if(!traditional && jQuery.type(obj) === "object"){ // Serialize object item.
for(name in obj) {buildParams(prefix + "[" + name + "]",obj[name],traditional,add);}}else { // Serialize scalar item.
add(prefix,obj);}} // Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function(a,traditional){var prefix,s=[],add=function add(key,value){ // If value is a function, invoke it and return its value
value = jQuery.isFunction(value)?value():value == null?"":value;s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value);}; // Set traditional to true for jQuery <= 1.3.2 behavior.
if(traditional === undefined){traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;} // If an array was passed in, assume that it is an array of form elements.
if(jQuery.isArray(a) || a.jquery && !jQuery.isPlainObject(a)){ // Serialize the form elements
jQuery.each(a,function(){add(this.name,this.value);});}else { // If traditional, encode the "old" way (the way 1.3.2 or older
// did it), otherwise encode params recursively.
for(prefix in a) {buildParams(prefix,a[prefix],traditional,add);}} // Return the resulting serialization
return s.join("&").replace(r20,"+");};jQuery.fn.extend({serialize:function serialize(){return jQuery.param(this.serializeArray());},serializeArray:function serializeArray(){return this.map(function(){ // Can add propHook for "elements" to filter or add form elements
var elements=jQuery.prop(this,"elements");return elements?jQuery.makeArray(elements):this;}).filter(function(){var type=this.type; // Use .is(":disabled") so that fieldset[disabled] works
return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));}).map(function(i,elem){var val=jQuery(this).val();return val == null?null:jQuery.isArray(val)?jQuery.map(val,function(val){return {name:elem.name,value:val.replace(rCRLF,"\r\n")};}):{name:elem.name,value:val.replace(rCRLF,"\r\n")};}).get();}}); // Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined? // Support: IE6+
function(){ // XHR cannot access local files, always use ActiveX for that case
return !this.isLocal &&  // Support: IE7-8
// oldIE XHR does not support non-RFC2616 methods (#13240)
// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx
// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9
// Although this check for six methods instead of eight
// since IE also does not support "trace" and "connect"
/^(get|post|head|put|delete|options)$/i.test(this.type) && createStandardXHR() || createActiveXHR();}: // For all other browsers, use the standard XMLHttpRequest object
createStandardXHR;var xhrId=0,xhrCallbacks={},xhrSupported=jQuery.ajaxSettings.xhr(); // Support: IE<10
// Open requests must be manually aborted on unload (#5280)
// See https://support.microsoft.com/kb/2856746 for more info
if(window.attachEvent){window.attachEvent("onunload",function(){for(var key in xhrCallbacks) {xhrCallbacks[key](undefined,true);}});} // Determine support properties
support.cors = !!xhrSupported && "withCredentials" in xhrSupported;xhrSupported = support.ajax = !!xhrSupported; // Create transport if the browser can provide an xhr
if(xhrSupported){jQuery.ajaxTransport(function(options){ // Cross domain only allowed if supported through XMLHttpRequest
if(!options.crossDomain || support.cors){var callback;return {send:function send(headers,complete){var i,xhr=options.xhr(),id=++xhrId; // Open the socket
xhr.open(options.type,options.url,options.async,options.username,options.password); // Apply custom fields if provided
if(options.xhrFields){for(i in options.xhrFields) {xhr[i] = options.xhrFields[i];}} // Override mime type if needed
if(options.mimeType && xhr.overrideMimeType){xhr.overrideMimeType(options.mimeType);} // X-Requested-With header
// For cross-domain requests, seeing as conditions for a preflight are
// akin to a jigsaw puzzle, we simply never set it to be sure.
// (it can always be set on a per-request basis or even using ajaxSetup)
// For same-domain requests, won't change header if already provided.
if(!options.crossDomain && !headers["X-Requested-With"]){headers["X-Requested-With"] = "XMLHttpRequest";} // Set headers
for(i in headers) { // Support: IE<9
// IE's ActiveXObject throws a 'Type Mismatch' exception when setting
// request header to a null-value.
//
// To keep consistent with other XHR implementations, cast the value
// to string and ignore `undefined`.
if(headers[i] !== undefined){xhr.setRequestHeader(i,headers[i] + "");}} // Do send the request
// This may raise an exception which is actually
// handled in jQuery.ajax (so no try/catch here)
xhr.send(options.hasContent && options.data || null); // Listener
callback = function(_,isAbort){var status,statusText,responses; // Was never called and is aborted or complete
if(callback && (isAbort || xhr.readyState === 4)){ // Clean up
delete xhrCallbacks[id];callback = undefined;xhr.onreadystatechange = jQuery.noop; // Abort manually if needed
if(isAbort){if(xhr.readyState !== 4){xhr.abort();}}else {responses = {};status = xhr.status; // Support: IE<10
// Accessing binary-data responseText throws an exception
// (#11426)
if(typeof xhr.responseText === "string"){responses.text = xhr.responseText;} // Firefox throws an exception when accessing
// statusText for faulty cross-domain requests
try{statusText = xhr.statusText;}catch(e) { // We normalize with Webkit giving an empty statusText
statusText = "";} // Filter status for non standard behaviors
// If the request is local and we have data: assume a success
// (success with no data won't get notified, that's the best we
// can do given current implementations)
if(!status && options.isLocal && !options.crossDomain){status = responses.text?200:404; // IE - #1450: sometimes returns 1223 when it should be 204
}else if(status === 1223){status = 204;}}} // Call complete if needed
if(responses){complete(status,statusText,responses,xhr.getAllResponseHeaders());}};if(!options.async){ // if we're in sync mode we fire the callback
callback();}else if(xhr.readyState === 4){ // (IE6 & IE7) if it's in cache and has been
// retrieved directly we need to fire the callback
setTimeout(callback);}else { // Add to the list of active xhr callbacks
xhr.onreadystatechange = xhrCallbacks[id] = callback;}},abort:function abort(){if(callback){callback(undefined,true);}}};}});} // Functions to create xhrs
function createStandardXHR(){try{return new window.XMLHttpRequest();}catch(e) {}}function createActiveXHR(){try{return new window.ActiveXObject("Microsoft.XMLHTTP");}catch(e) {}} // Install script dataType
jQuery.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function textScript(text){jQuery.globalEval(text);return text;}}}); // Handle cache's special case and global
jQuery.ajaxPrefilter("script",function(s){if(s.cache === undefined){s.cache = false;}if(s.crossDomain){s.type = "GET";s.global = false;}}); // Bind script tag hack transport
jQuery.ajaxTransport("script",function(s){ // This transport only deals with cross domain requests
if(s.crossDomain){var script,head=document.head || jQuery("head")[0] || document.documentElement;return {send:function send(_,callback){script = document.createElement("script");script.async = true;if(s.scriptCharset){script.charset = s.scriptCharset;}script.src = s.url; // Attach handlers for all browsers
script.onload = script.onreadystatechange = function(_,isAbort){if(isAbort || !script.readyState || /loaded|complete/.test(script.readyState)){ // Handle memory leak in IE
script.onload = script.onreadystatechange = null; // Remove the script
if(script.parentNode){script.parentNode.removeChild(script);} // Dereference the script
script = null; // Callback if not abort
if(!isAbort){callback(200,"success");}}}; // Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
// Use native DOM manipulation to avoid our domManip AJAX trickery
head.insertBefore(script,head.firstChild);},abort:function abort(){if(script){script.onload(undefined,true);}}};}});var oldCallbacks=[],rjsonp=/(=)\?(?=&|$)|\?\?/; // Default jsonp settings
jQuery.ajaxSetup({jsonp:"callback",jsonpCallback:function jsonpCallback(){var callback=oldCallbacks.pop() || jQuery.expando + "_" + nonce++;this[callback] = true;return callback;}}); // Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter("json jsonp",function(s,originalSettings,jqXHR){var callbackName,overwritten,responseContainer,jsonProp=s.jsonp !== false && (rjsonp.test(s.url)?"url":typeof s.data === "string" && !(s.contentType || "").indexOf("application/x-www-form-urlencoded") && rjsonp.test(s.data) && "data"); // Handle iff the expected data type is "jsonp" or we have a parameter to set
if(jsonProp || s.dataTypes[0] === "jsonp"){ // Get callback name, remembering preexisting value associated with it
callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback)?s.jsonpCallback():s.jsonpCallback; // Insert callback into url or form data
if(jsonProp){s[jsonProp] = s[jsonProp].replace(rjsonp,"$1" + callbackName);}else if(s.jsonp !== false){s.url += (rquery.test(s.url)?"&":"?") + s.jsonp + "=" + callbackName;} // Use data converter to retrieve json after script execution
s.converters["script json"] = function(){if(!responseContainer){jQuery.error(callbackName + " was not called");}return responseContainer[0];}; // force json dataType
s.dataTypes[0] = "json"; // Install callback
overwritten = window[callbackName];window[callbackName] = function(){responseContainer = arguments;}; // Clean-up function (fires after converters)
jqXHR.always(function(){ // Restore preexisting value
window[callbackName] = overwritten; // Save back as free
if(s[callbackName]){ // make sure that re-using the options doesn't screw things around
s.jsonpCallback = originalSettings.jsonpCallback; // save the callback name for future use
oldCallbacks.push(callbackName);} // Call if it was a function and we have a response
if(responseContainer && jQuery.isFunction(overwritten)){overwritten(responseContainer[0]);}responseContainer = overwritten = undefined;}); // Delegate to script
return "script";}}); // data: string of html
// context (optional): If specified, the fragment will be created in this context, defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function(data,context,keepScripts){if(!data || typeof data !== "string"){return null;}if(typeof context === "boolean"){keepScripts = context;context = false;}context = context || document;var parsed=rsingleTag.exec(data),scripts=!keepScripts && []; // Single tag
if(parsed){return [context.createElement(parsed[1])];}parsed = jQuery.buildFragment([data],context,scripts);if(scripts && scripts.length){jQuery(scripts).remove();}return jQuery.merge([],parsed.childNodes);}; // Keep a copy of the old load method
var _load=jQuery.fn.load; /**
 * Load a url into a page
 */jQuery.fn.load = function(url,params,callback){if(typeof url !== "string" && _load){return _load.apply(this,arguments);}var selector,response,type,self=this,off=url.indexOf(" ");if(off >= 0){selector = jQuery.trim(url.slice(off,url.length));url = url.slice(0,off);} // If it's a function
if(jQuery.isFunction(params)){ // We assume that it's the callback
callback = params;params = undefined; // Otherwise, build a param string
}else if(params && typeof params === "object"){type = "POST";} // If we have elements to modify, make the request
if(self.length > 0){jQuery.ajax({url:url, // if "type" variable is undefined, then "GET" method will be used
type:type,dataType:"html",data:params}).done(function(responseText){ // Save response for use in complete callback
response = arguments;self.html(selector? // If a selector was specified, locate the right elements in a dummy div
// Exclude scripts to avoid IE 'Permission Denied' errors
jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector): // Otherwise use the full result
responseText);}).complete(callback && function(jqXHR,status){self.each(callback,response || [jqXHR.responseText,status,jqXHR]);});}return this;}; // Attach a bunch of functions for handling common AJAX events
jQuery.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(i,type){jQuery.fn[type] = function(fn){return this.on(type,fn);};});jQuery.expr.filters.animated = function(elem){return jQuery.grep(jQuery.timers,function(fn){return elem === fn.elem;}).length;};var docElem=window.document.documentElement; /**
 * Gets a window from an element
 */function getWindow(elem){return jQuery.isWindow(elem)?elem:elem.nodeType === 9?elem.defaultView || elem.parentWindow:false;}jQuery.offset = {setOffset:function setOffset(elem,options,i){var curPosition,curLeft,curCSSTop,curTop,curOffset,curCSSLeft,calculatePosition,position=jQuery.css(elem,"position"),curElem=jQuery(elem),props={}; // set position first, in-case top/left are set even on static elem
if(position === "static"){elem.style.position = "relative";}curOffset = curElem.offset();curCSSTop = jQuery.css(elem,"top");curCSSLeft = jQuery.css(elem,"left");calculatePosition = (position === "absolute" || position === "fixed") && jQuery.inArray("auto",[curCSSTop,curCSSLeft]) > -1; // need to be able to calculate position if either top or left is auto and position is either absolute or fixed
if(calculatePosition){curPosition = curElem.position();curTop = curPosition.top;curLeft = curPosition.left;}else {curTop = parseFloat(curCSSTop) || 0;curLeft = parseFloat(curCSSLeft) || 0;}if(jQuery.isFunction(options)){options = options.call(elem,i,curOffset);}if(options.top != null){props.top = options.top - curOffset.top + curTop;}if(options.left != null){props.left = options.left - curOffset.left + curLeft;}if("using" in options){options.using.call(elem,props);}else {curElem.css(props);}}};jQuery.fn.extend({offset:function offset(options){if(arguments.length){return options === undefined?this:this.each(function(i){jQuery.offset.setOffset(this,options,i);});}var docElem,win,box={top:0,left:0},elem=this[0],doc=elem && elem.ownerDocument;if(!doc){return;}docElem = doc.documentElement; // Make sure it's not a disconnected DOM node
if(!jQuery.contains(docElem,elem)){return box;} // If we don't have gBCR, just use 0,0 rather than error
// BlackBerry 5, iOS 3 (original iPhone)
if(typeof elem.getBoundingClientRect !== strundefined){box = elem.getBoundingClientRect();}win = getWindow(doc);return {top:box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),left:box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)};},position:function position(){if(!this[0]){return;}var offsetParent,offset,parentOffset={top:0,left:0},elem=this[0]; // fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
if(jQuery.css(elem,"position") === "fixed"){ // we assume that getBoundingClientRect is available when computed position is fixed
offset = elem.getBoundingClientRect();}else { // Get *real* offsetParent
offsetParent = this.offsetParent(); // Get correct offsets
offset = this.offset();if(!jQuery.nodeName(offsetParent[0],"html")){parentOffset = offsetParent.offset();} // Add offsetParent borders
parentOffset.top += jQuery.css(offsetParent[0],"borderTopWidth",true);parentOffset.left += jQuery.css(offsetParent[0],"borderLeftWidth",true);} // Subtract parent offsets and element margins
// note: when an element has margin: auto the offsetLeft and marginLeft
// are the same in Safari causing offset.left to incorrectly be 0
return {top:offset.top - parentOffset.top - jQuery.css(elem,"marginTop",true),left:offset.left - parentOffset.left - jQuery.css(elem,"marginLeft",true)};},offsetParent:function offsetParent(){return this.map(function(){var offsetParent=this.offsetParent || docElem;while(offsetParent && (!jQuery.nodeName(offsetParent,"html") && jQuery.css(offsetParent,"position") === "static")) {offsetParent = offsetParent.offsetParent;}return offsetParent || docElem;});}}); // Create scrollLeft and scrollTop methods
jQuery.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(method,prop){var top=/Y/.test(prop);jQuery.fn[method] = function(val){return access(this,function(elem,method,val){var win=getWindow(elem);if(val === undefined){return win?prop in win?win[prop]:win.document.documentElement[method]:elem[method];}if(win){win.scrollTo(!top?val:jQuery(win).scrollLeft(),top?val:jQuery(win).scrollTop());}else {elem[method] = val;}},method,val,arguments.length,null);};}); // Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// getComputedStyle returns percent when specified for top/left/bottom/right
// rather than make the css module depend on the offset module, we just check for it here
jQuery.each(["top","left"],function(i,prop){jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition,function(elem,computed){if(computed){computed = curCSS(elem,prop); // if curCSS returns percentage, fallback to offset
return rnumnonpx.test(computed)?jQuery(elem).position()[prop] + "px":computed;}});}); // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each({Height:"height",Width:"width"},function(name,type){jQuery.each({padding:"inner" + name,content:type,"":"outer" + name},function(defaultExtra,funcName){ // margin is only for outerHeight, outerWidth
jQuery.fn[funcName] = function(margin,value){var chainable=arguments.length && (defaultExtra || typeof margin !== "boolean"),extra=defaultExtra || (margin === true || value === true?"margin":"border");return access(this,function(elem,type,value){var doc;if(jQuery.isWindow(elem)){ // As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
// isn't a whole lot we can do. See pull request at this URL for discussion:
// https://github.com/jquery/jquery/pull/764
return elem.document.documentElement["client" + name];} // Get document width or height
if(elem.nodeType === 9){doc = elem.documentElement; // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
return Math.max(elem.body["scroll" + name],doc["scroll" + name],elem.body["offset" + name],doc["offset" + name],doc["client" + name]);}return value === undefined? // Get width or height on the element, requesting but not forcing parseFloat
jQuery.css(elem,type,extra): // Set width or height on the element
jQuery.style(elem,type,value,extra);},type,chainable?margin:undefined,chainable,null);};});}); // The number of elements contained in the matched element set
jQuery.fn.size = function(){return this.length;};jQuery.fn.andSelf = jQuery.fn.addBack; // Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.
// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
if(typeof define === "function" && define.amd){define("jquery",[],function(){return jQuery;});}var  // Map over jQuery in case of overwrite
_jQuery=window.jQuery, // Map over the $ in case of overwrite
_$=window.$;jQuery.noConflict = function(deep){if(window.$ === jQuery){window.$ = _$;}if(deep && window.jQuery === jQuery){window.jQuery = _jQuery;}return jQuery;}; // Expose jQuery and $ identifiers, even in
// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if(typeof noGlobal === strundefined){window.jQuery = window.$ = jQuery;}return jQuery;}); // Otherwise append directly

; browserify_shim__define__module__export__(typeof $ != "undefined" ? $ : window.$);

}).call(global, undefined, undefined, undefined, undefined, function defineExport(ex) { module.exports = ex; });

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],4:[function(require,module,exports){
(function (global){
; var __browserify_shim_require__=require;(function browserifyShim(module, exports, require, define, browserify_shim__define__module__export__) {
/*
 * SVGeezy.js 1.0
 *
 * Copyright 2012, Ben Howdle http://twostepmedia.co.uk
 * Released under the WTFPL license
 * http://sam.zoy.org/wtfpl/
 *
 * Date: Sun Aug 26 20:38 2012 GMT
 */

/*
	//call like so, pass in a class name that you don't want it to check and a filetype to replace .svg with
	svgeezy.init('nocheck', 'png');
*/

'use strict';

var svgeezy = (function () {

	return {

		init: function init(avoid, filetype) {
			this.avoid = avoid || false;
			this.filetype = filetype || 'png';
			this.svgSupport = this.supportsSvg();
			if (!this.svgSupport) {
				this.images = document.getElementsByTagName('img');
				this.imgL = this.images.length;
				this.fallbacks();
			}
		},

		fallbacks: function fallbacks() {
			while (this.imgL--) {
				if (!this.hasClass(this.images[this.imgL], this.avoid) || !this.avoid) {
					var src = this.images[this.imgL].getAttribute('src');
					if (src === null) {
						continue;
					}
					if (this.getFileExt(src) == 'svg') {
						var newSrc = src.replace('.svg', '.' + this.filetype);
						this.images[this.imgL].setAttribute('src', newSrc);
					}
				}
			}
		},

		getFileExt: function getFileExt(src) {
			var ext = src.split('.').pop();

			if (ext.indexOf("?") !== -1) {
				ext = ext.split('?')[0];
			}

			return ext;
		},

		hasClass: function hasClass(element, cls) {
			return (' ' + element.className + ' ').indexOf(' ' + cls + ' ') > -1;
		},

		supportsSvg: function supportsSvg() {
			return document.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#Image", "1.1");
		}
	};
})();

; browserify_shim__define__module__export__(typeof svgeezy != "undefined" ? svgeezy : window.svgeezy);

}).call(global, undefined, undefined, undefined, undefined, function defineExport(ex) { module.exports = ex; });

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],5:[function(require,module,exports){
"use strict";
//vendor

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _fitvids = require('fitvids');

var _fitvids2 = _interopRequireDefault(_fitvids);

var _svgeezy = require('svgeezy');

var _svgeezy2 = _interopRequireDefault(_svgeezy);

var _jplayer = require('jplayer');

var _jplayer2 = _interopRequireDefault(_jplayer);

//modules

var _modulesCountdown = require('./modules/countdown');

var _modulesCountdown2 = _interopRequireDefault(_modulesCountdown);

var _modulesUiActions = require('./modules/ui-actions');

var _modulesUiActions2 = _interopRequireDefault(_modulesUiActions);

var _modulesSchedule = require('./modules/schedule');

var _modulesSchedule2 = _interopRequireDefault(_modulesSchedule);

var _modulesAudioPlayer = require('./modules/audio-player');

var _modulesAudioPlayer2 = _interopRequireDefault(_modulesAudioPlayer);

var APP = {
  init: function init() {
    // vendor init
    (0, _jquery2['default'])('.blog-content-video').fitVids();
    _svgeezy2['default'].init(false, 'png');

    //Module init
    _modulesUiActions2['default'].init();
    _modulesCountdown2['default'].init();
    _modulesSchedule2['default'].init();
    _modulesAudioPlayer2['default'].init();
  }
};

APP.init();

},{"./modules/audio-player":6,"./modules/countdown":8,"./modules/schedule":10,"./modules/ui-actions":11,"fitvids":1,"jplayer":2,"jquery":3,"svgeezy":4}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var AudioPlayer = (function () {
  function AudioPlayer() {
    _classCallCheck(this, AudioPlayer);
  }

  _createClass(AudioPlayer, [{
    key: 'init',
    value: function init() {
      console.log("test");
      this.setupPlayer();
    }
  }, {
    key: 'setupPlayer',
    value: function setupPlayer() {
      $('.js-audio-player-wrapper').jPlayer({
        ready: function ready() {
          $(this).jPlayer('setMedia', {
            mp3: $('.js-audio-player-wrapper').data('audio')
          });
        },
        preload: 'auto',
        volume: 1,
        cssSelectorAncestor: '.player__container',
        cssSelector: {
          play: '.play-btn',
          pause: '.pause-btn',
          seekBar: '.player__seek-bar',
          playBar: '.player__play-bar',
          currentTime: '.player__current-time',
          duration: '.player__duration'
        }
      });
    }
  }]);

  return AudioPlayer;
})();

exports['default'] = new AudioPlayer();
module.exports = exports['default'];

},{}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
var blog = {
  filterBy: function filterBy(filter, el) {
    if ($(el).hasClass('blog__nav__link--selected')) {
      $('.js-filter-blog').removeClass('blog__nav__link--selected');
      $('.js-post-preview').fadeOut(300).promise().done(function () {
        $('.post-preview').removeClass('post-preview--last');
        $('.js-post-preview').fadeIn(400);
      });
    } else {
      $('.js-filter-blog').removeClass('blog__nav__link--selected');
      $(el).addClass('blog__nav__link--selected');
      $('.js-post-preview').fadeOut(300).promise().done(function () {
        $('*[data-category="' + filter + '"]').fadeIn(400);
        $('.post-preview:visible:last').addClass('post-preview--last');
      });
    }
  },
  openSharePopup: function openSharePopup(platform, message, url) {
    var popUrl, newWindow;

    if (platform == 'twitter') {
      popUrl = 'http://twitter.com/home?status=' + encodeURI(message) + '+' + url;
    } else if (platform == 'facebook') {
      popUrl = 'http://www.facebook.com/share.php?u' + url + '&amp;title=' + encodeURI(message);
    }
    newWindow = window.open(popUrl, '_blank', 'height=500,width=600');
    if (window.focus) {
      newWindow.focus();
    }
    return false;
  }
};
exports['default'] = blog;
module.exports = exports['default'];

},{}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Countdown = (function () {
  function Countdown() {
    _classCallCheck(this, Countdown);
  }

  _createClass(Countdown, [{
    key: 'init',
    value: function init() {
      this.calcCountdown();
    }
  }, {
    key: 'timeUntilDate',
    value: function timeUntilDate(targetDate, format) {
      var today = new Date();
      var target = new Date(targetDate);
      var timeLeftInMs = target.getTime() - today.getTime();
      var msPerMinute = 60 * 1000;
      var msPerHour = 60 * 60 * 1000;
      var msPerDay = 24 * 60 * 60 * 1000;
      var minutesLeft;
      var daysLeft;
      var hoursLeft;

      if (format === 'minutes') {
        minutesLeft = Math.floor(timeLeftInMs / msPerMinute);
        return minutesLeft;
      } else if (format === 'hours') {
        hoursLeft = Math.floor(timeLeftInMs / msPerHour);
        return hoursLeft;
      } else {
        daysLeft = Math.floor(timeLeftInMs / msPerDay);
        return daysLeft;
      }
    }
  }, {
    key: 'inTheFuture',
    value: function inTheFuture(date) {
      if (this.timeUntilDate(date, 'minutes') > 0) {
        return true;
      }
    }
  }, {
    key: 'calcCountdown',
    value: function calcCountdown() {
      var superEarlyBird = 'September 26, 2015 18:00:00';
      var EarlyBird = 'October 22, 2015 18:00:00';
      var nextIncrease;

      if (this.inTheFuture(superEarlyBird)) {
        nextIncrease = superEarlyBird;
      } else {
        $('.ticket').first().addClass('ticket--sold-out').unwrap('<a href=""></a>');
        $('.ticket').eq(1).removeClass('ticket--unreleased');
        $('.ticket').eq(1).wrap('<a href="https://www.eventbrite.co.uk/e/beyond-conf-2015-tickets-18517110175"></a>');
        nextIncrease = EarlyBird;
      }

      var minutes = this.timeUntilDate(nextIncrease, 'minutes');
      var hours = this.timeUntilDate(nextIncrease, 'hours');
      var days = this.timeUntilDate(nextIncrease, 'days');

      if (minutes <= 60) {
        this.displayCountdown(minutes, 'minutes');
      } else if (hours <= 24) {
        this.displayCountdown(hours, 'hours');
      } else {
        this.displayCountdown(days, 'days');
      }
    }
  }, {
    key: 'displayCountdown',
    value: function displayCountdown(countdownAmount, format) {
      var countdownAsText = countdownAmount.toString();

      if (countdownAsText.length === 1) {
        countdownAsText = '0' + countdownAsText;
      }
      $('.time-left__num').first().text(countdownAsText[0]);
      $('.time-left__num').last().text(countdownAsText[1]);
      $('.js-ticket-contdown__unit').text(format);
    }
  }]);

  return Countdown;
})();

exports['default'] = new Countdown();
module.exports = exports['default'];

},{}],9:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var MailchimpForm = (function () {
  function MailchimpForm() {
    _classCallCheck(this, MailchimpForm);
  }

  _createClass(MailchimpForm, [{
    key: 'register',
    value: function register(form) {
      $.ajax({
        type: form.attr('method'),
        url: form.attr('action'),
        data: form.serialize(),
        cache: false,
        dataType: 'json',
        contentType: 'application/json; charset=utf-8',
        complete: function complete(data) {

          var message = data.responseJSON.msg;

          if (data.result !== 'success') {
            console.log(data);
            $('.sign-up__message').addClass('sign-up__message--active sign-up__message--fail').html(message);
          } else {
            console.log(data);
            $('.sign-up__message').addClass('sign-up__message--active sign-up__message--success').html(message);
          }
        }
      }); // end AJAX
    }
  }]);

  return MailchimpForm;
})();

exports['default'] = new MailchimpForm();
module.exports = exports['default'];

},{}],10:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Schedule = (function () {
  function Schedule() {
    _classCallCheck(this, Schedule);
  }

  _createClass(Schedule, [{
    key: 'init',
    value: function init() {
      if ($('section').hasClass('schedule')) {
        this.checkHashAndTriggerModal();
        this.preloadHiddenSpeakerImages();
        this.checkHashAndTriggerCorrectSchedule();
      }
    }
  }, {
    key: 'preloadHiddenSpeakerImages',
    value: function preloadHiddenSpeakerImages() {
      $('*[data-image]').each(function (i, el) {
        if ($(el).data('image')) {
          $("<img>").attr("src", '/img/' + $(el).data('image'));
        }
      });
    }
  }, {
    key: 'checkHashAndTriggerModal',
    value: function checkHashAndTriggerModal() {
      var hash = window.location.hash;
      if (hash !== '#workshops' && hash !== '#talks') {
        this.scheduleSPeakerInfo(hash);
      }
      console.log(hash);
      if (hash === '#anchor-js' || hash === '#anchor-sketch') {
        this.toggleSchedule('workshops');
      }
    }
  }, {
    key: 'checkHashAndTriggerCorrectSchedule',
    value: function checkHashAndTriggerCorrectSchedule() {
      var hash = window.location.hash;
      if (hash === '#workshops') {
        this.toggleSchedule('workshops');
      }
    }
  }, {
    key: 'toggleSchedule',
    value: function toggleSchedule(scheduleType) {
      $('.schedule__link').removeClass('schedule__link--selected');
      $('*[data-schedule-type="' + scheduleType + '"]').addClass('schedule__link--selected');
      if (scheduleType === 'talks') {
        $('.js-schedule__sessions--speakers').show();
        $('.js-schedule__sessions--workshops').hide();
      } else {
        $('.js-schedule__sessions--speakers').hide();
        $('.js-schedule__sessions--workshops').show();
      }
      $('.js-schedule__info').hide();
      $('.js-schedule__info--' + scheduleType).show();
    }
  }, {
    key: 'scheduleSPeakerInfo',
    value: function scheduleSPeakerInfo(slot) {
      var $slot = $(slot);
      var pxFromTop = $slot.position().top;
      var data = $slot.data();

      $('.js-data-image').attr('src', '/img/' + data.image);
      $('.js-data-name').text(data.name);
      $('.js-data-position').text(data.position);
      $('.js-data-company').text(data.company);
      $('.js-data-url').attr('href', data.url);
      $('.js-data-twitter').attr('href', 'https://twitter.com/' + data.twitter);
      if (data.github) {
        $('.js-data-github').attr('href', 'https://github.com/' + data.github);
        $('.js-data-github').fadeIn();
      } else {
        $('.js-data-github').fadeOut();
      }
      $('.js-data-title').text(data.title);
      $('.js-data-description').html(data.description);

      if (Modernizr.mq('only screen and (max-width: 850px)')) {
        $('body').addClass('lock-scroll');
        $('.js-section-header-modal').html('<h2 class="section-header__title section-header__title--without">Close</h2>');
        $('.js-session-details, .js-schedule__full-details, .schedule-session-details-overlay').fadeIn();
      } else {
        $('.js-session-details').css('margin-top', pxFromTop).fadeIn();
      }
    }
  }]);

  return Schedule;
})();

exports['default'] = new Schedule();
module.exports = exports['default'];

},{}],11:[function(require,module,exports){
//vendor
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _modernizrMq = require('modernizr-mq');

var _modernizrMq2 = _interopRequireDefault(_modernizrMq);

//Modules

var _schedule = require('./schedule');

var _schedule2 = _interopRequireDefault(_schedule);

var _mailchimpForm = require('./mailchimp-form');

var _mailchimpForm2 = _interopRequireDefault(_mailchimpForm);

var _blog = require('./blog');

var _blog2 = _interopRequireDefault(_blog);

var UiActions = (function () {
  function UiActions() {
    _classCallCheck(this, UiActions);
  }

  _createClass(UiActions, [{
    key: 'init',
    value: function init() {
      var form = $('#mc-embedded-subscribe-form');

      $('.sign-up__submit').on('click', function (event) {
        _mailchimpForm2['default'].register(form);
        event.preventDefault();
      });

      $('.schedule__session, .js-schedule__details').not('.schedule__session--break, .schedule__session--coming-soon, .schedule__session--gap ').on('click', function (event) {
        var slot = this;
        _schedule2['default'].scheduleSPeakerInfo(slot);
        event.preventDefault();
      });

      $('.js-section-header-modal').on('click', function () {
        $('body').removeClass('lock-scroll');
        $('.js-schedule__full-details, .schedule-session-details-overlay').fadeOut();
      });

      $('.js-schedule-toggle').on('click', function () {
        var scheduleType = $(this).data('schedule-type');
        $('.js-session-details').fadeOut(200);
        _schedule2['default'].toggleSchedule(scheduleType);
      });

      $('.session--speaker').on('click', function () {
        console.log('yo');
        var mobile = _modernizrMq2['default'].mq('only screen and (max-width: 850px)');

        console.log(mobile);
        if (mobile) {
          var slot = this;
          _schedule2['default'].scheduleSPeakerInfo(slot);
          event.preventDefault();
          return false;
        } else {
          return true;
        }
      });

      $('.js-share-btn').on('click', function () {
        var platform = $(this).data('platform');
        var message = $(this).data('message');
        var url = $(this).data('url');
        _blog2['default'].openSharePopup(platform, message, url);
        return false;
      });

      $('.js-filter-blog').on('click', function () {
        var selected = $(this).data('filter');
        var el = this;
        _blog2['default'].filterBy(selected, el);
        return false;
      });

      $(window).on('resize', function () {

        if (_modernizrMq2['default'].mq('(max-width: 850px)')) {
          $('.js-slot-info').css('margin-top', 0);
        } else {
          $('.js-section-header-modal').empty();
        }
      });
    }
  }]);

  return UiActions;
})();

exports['default'] = new UiActions();
module.exports = exports['default'];

},{"./blog":7,"./mailchimp-form":9,"./schedule":10,"modernizr-mq":12}],12:[function(require,module,exports){
/*! modernizr 3.1.0 (Custom Build) | MIT *
 * http://modernizr.com/download/?-mediaqueries-mq-shiv !*/
"use strict";

!(function (e, t, n) {
  function r(e, t) {
    return typeof e === t;
  }function a() {
    var e, t, n, a, o, i, s;for (var c in l) {
      if ((e = [], t = l[c], t.name && (e.push(t.name.toLowerCase()), t.options && t.options.aliases && t.options.aliases.length))) for (n = 0; n < t.options.aliases.length; n++) e.push(t.options.aliases[n].toLowerCase());for (a = r(t.fn, "function") ? t.fn() : t.fn, o = 0; o < e.length; o++) i = e[o], s = i.split("."), 1 === s.length ? Modernizr[s[0]] = a : (!Modernizr[s[0]] || Modernizr[s[0]] instanceof Boolean || (Modernizr[s[0]] = new Boolean(Modernizr[s[0]])), Modernizr[s[0]][s[1]] = a), d.push((a ? "" : "no-") + s.join("-"));
    }
  }function o() {
    return "function" != typeof t.createElement ? t.createElement(arguments[0]) : f ? t.createElementNS.call(t, "http://www.w3.org/2000/svg", arguments[0]) : t.createElement.apply(t, arguments);
  }function i() {
    var e = t.body;return (e || (e = o(f ? "svg" : "body"), e.fake = !0), e);
  }function s(e, n, r, a) {
    var s,
        l,
        c,
        d,
        f = "modernizr",
        m = o("div"),
        h = i();if (parseInt(r, 10)) for (; r--;) c = o("div"), c.id = a ? a[r] : f + (r + 1), m.appendChild(c);return (s = o("style"), s.type = "text/css", s.id = "s" + f, (h.fake ? h : m).appendChild(s), h.appendChild(m), s.styleSheet ? s.styleSheet.cssText = e : s.appendChild(t.createTextNode(e)), m.id = f, h.fake && (h.style.background = "", h.style.overflow = "hidden", d = u.style.overflow, u.style.overflow = "hidden", u.appendChild(h)), l = n(m, e), h.fake ? (h.parentNode.removeChild(h), u.style.overflow = d, u.offsetHeight) : m.parentNode.removeChild(m), !!l);
  }var l = [],
      c = { _version: "3.1.0", _config: { classPrefix: "", enableClasses: !0, enableJSClass: !0, usePrefixes: !0 }, _q: [], on: function on(e, t) {
      var n = this;setTimeout(function () {
        t(n[e]);
      }, 0);
    }, addTest: function addTest(e, t, n) {
      l.push({ name: e, fn: t, options: n });
    }, addAsyncTest: function addAsyncTest(e) {
      l.push({ name: null, fn: e });
    } },
      Modernizr = function Modernizr() {};Modernizr.prototype = c, Modernizr = new Modernizr();var d = [],
      u = t.documentElement,
      f = "svg" === u.nodeName.toLowerCase();f || !(function (e, t) {
    function n(e, t) {
      var n = e.createElement("p"),
          r = e.getElementsByTagName("head")[0] || e.documentElement;return (n.innerHTML = "x<style>" + t + "</style>", r.insertBefore(n.lastChild, r.firstChild));
    }function r() {
      var e = E.elements;return "string" == typeof e ? e.split(" ") : e;
    }function a(e, t) {
      var n = E.elements;"string" != typeof n && (n = n.join(" ")), "string" != typeof e && (e = e.join(" ")), E.elements = n + " " + e, c(t);
    }function o(e) {
      var t = y[e[v]];return (t || (t = {}, g++, e[v] = g, y[g] = t), t);
    }function i(e, n, r) {
      if ((n || (n = t), u)) return n.createElement(e);r || (r = o(n));var a;return (a = r.cache[e] ? r.cache[e].cloneNode() : p.test(e) ? (r.cache[e] = r.createElem(e)).cloneNode() : r.createElem(e), !a.canHaveChildren || h.test(e) || a.tagUrn ? a : r.frag.appendChild(a));
    }function s(e, n) {
      if ((e || (e = t), u)) return e.createDocumentFragment();n = n || o(e);for (var a = n.frag.cloneNode(), i = 0, s = r(), l = s.length; l > i; i++) a.createElement(s[i]);return a;
    }function l(e, t) {
      t.cache || (t.cache = {}, t.createElem = e.createElement, t.createFrag = e.createDocumentFragment, t.frag = t.createFrag()), e.createElement = function (n) {
        return E.shivMethods ? i(n, e, t) : t.createElem(n);
      }, e.createDocumentFragment = Function("h,f", "return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&(" + r().join().replace(/[\w\-:]+/g, function (e) {
        return (t.createElem(e), t.frag.createElement(e), 'c("' + e + '")');
      }) + ");return n}")(E, t.frag);
    }function c(e) {
      e || (e = t);var r = o(e);return (!E.shivCSS || d || r.hasCSS || (r.hasCSS = !!n(e, "article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}mark{background:#FF0;color:#000}template{display:none}")), u || l(e, r), e);
    }var d,
        u,
        f = "3.7.3",
        m = e.html5 || {},
        h = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,
        p = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,
        v = "_html5shiv",
        g = 0,
        y = {};!(function () {
      try {
        var e = t.createElement("a");e.innerHTML = "<xyz></xyz>", d = "hidden" in e, u = 1 == e.childNodes.length || (function () {
          t.createElement("a");var e = t.createDocumentFragment();return "undefined" == typeof e.cloneNode || "undefined" == typeof e.createDocumentFragment || "undefined" == typeof e.createElement;
        })();
      } catch (n) {
        d = !0, u = !0;
      }
    })();var E = { elements: m.elements || "abbr article aside audio bdi canvas data datalist details dialog figcaption figure footer header hgroup main mark meter nav output picture progress section summary template time video", version: f, shivCSS: m.shivCSS !== !1, supportsUnknownElements: u, shivMethods: m.shivMethods !== !1, type: "default", shivDocument: c, createElement: i, createDocumentFragment: s, addElements: a };e.html5 = E, c(t), "object" == typeof module && module.exports && (module.exports = E);
  })("undefined" != typeof e ? e : this, t);var m = (function () {
    var t = e.matchMedia || e.msMatchMedia;return t ? function (e) {
      var n = t(e);return n && n.matches || !1;
    } : function (t) {
      var n = !1;return (s("@media " + t + " { #modernizr { position: absolute; } }", function (t) {
        n = "absolute" == (e.getComputedStyle ? e.getComputedStyle(t, null) : t.currentStyle).position;
      }), n);
    };
  })();c.mq = m, Modernizr.addTest("mediaqueries", m("only all")), a(), delete c.addTest, delete c.addAsyncTest;for (var h = 0; h < Modernizr._q.length; h++) Modernizr._q[h]();e.Modernizr = Modernizr;
})(window, document);

},{}]},{},[5])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvc2FtL3NpdGVzL3NhbS1iZXlvbmQvYm93ZXJfY29tcG9uZW50cy9maXR2aWRzL2pxdWVyeS5maXR2aWRzLmpzIiwiL1VzZXJzL3NhbS9zaXRlcy9zYW0tYmV5b25kL2Jvd2VyX2NvbXBvbmVudHMvanBsYXllci9kaXN0L2pwbGF5ZXIvanF1ZXJ5LmpwbGF5ZXIuanMiLCIvVXNlcnMvc2FtL3NpdGVzL3NhbS1iZXlvbmQvYm93ZXJfY29tcG9uZW50cy9qcXVlcnkvZGlzdC9qcXVlcnkuanMiLCIvVXNlcnMvc2FtL3NpdGVzL3NhbS1iZXlvbmQvYm93ZXJfY29tcG9uZW50cy9zdmdlZXp5L3N2Z2VlenkuanMiLCIvVXNlcnMvc2FtL3NpdGVzL3NhbS1iZXlvbmQvanMvbWFpbi5qcyIsIi9Vc2Vycy9zYW0vc2l0ZXMvc2FtLWJleW9uZC9qcy9tb2R1bGVzL2F1ZGlvLXBsYXllci5qcyIsIi9Vc2Vycy9zYW0vc2l0ZXMvc2FtLWJleW9uZC9qcy9tb2R1bGVzL2Jsb2cuanMiLCIvVXNlcnMvc2FtL3NpdGVzL3NhbS1iZXlvbmQvanMvbW9kdWxlcy9jb3VudGRvd24uanMiLCIvVXNlcnMvc2FtL3NpdGVzL3NhbS1iZXlvbmQvanMvbW9kdWxlcy9tYWlsY2hpbXAtZm9ybS5qcyIsIi9Vc2Vycy9zYW0vc2l0ZXMvc2FtLWJleW9uZC9qcy9tb2R1bGVzL3NjaGVkdWxlLmpzIiwiL1VzZXJzL3NhbS9zaXRlcy9zYW0tYmV5b25kL2pzL21vZHVsZXMvdWktYWN0aW9ucy5qcyIsIi9Vc2Vycy9zYW0vc2l0ZXMvc2FtLWJleW9uZC9qcy92ZW5kb3IvbW9kZXJuaXpyLWN1c3RvbS1tcS1vbmx5LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQ1dBLENBQUMsVUFBVSxDQUFDLEVBQUU7O0FBRVosY0FBWSxDQUFDOztBQUViLEdB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LE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQzNCLEVBQUUsQ0FBRSxJQUFJLENBQUMsT0FBTyxDQUNoQixDQUFDLENBQUMsQUFDSCxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBRSxDQUNsQyxFQUFFLENBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEdBQUcsU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQ2xELEVBQUUsQ0FBRSxTQUFTLENBQ2IsQ0FBQyxDQUFDLEFBQ0gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUUsQ0FDbEMsRUFBRSxDQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxHQUFHLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUNsRCxFQUFFLENBQUUsU0FBUyxDQUNiLENBQUMsQ0FBQyxBQUNILElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFFLENBQ2xDLEVBQUUsQ0FBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsR0FBRyxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FDbEQsRUFBRSxDQUFFLFNBQVMsQ0FDYixHQUFHLENBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssTUFBTSxDQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFHLEdBQUcsQ0FBRyxFQUFFLENBQUEsR0FBSSxvQkFBb0IsQ0FBRyxFQUFFLENBQUEsQUFBQyxDQUMvTCxDQUFDLENBQUMsQUFDSCxJQUFJLENBQUMsUUFB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QUMvQixDQUNELENBQUMsQUFDRixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEFBQzdDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEFBQzNELElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUUsUUFBUSxDQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxBQUN4RixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQUFDL0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUUsVUFBVyxDQUN4RCxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQ3JDLENBQUMsQ0FBQztBQUdILElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsQUFDbEMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBRTtBQUN0QixJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEFBQ3pELElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQUFDbkQsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUss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QUMsQUFDakgsR0FBRyxHQUFHLEFBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFJLEdBQUcsR0FBRyxLQUFLLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxDQUFHLENBQUMsQ0FBQztDQUM3RyxLQUFNLENBQ04sRUFBRSxHQUFHLEdBQUcsQ0FBQyxBQUNULEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FDVixBQUVELEdBQUcsUUFBUSxDQUFFLENBQ1osRUFBRSxHQUFHLENBQUMsQ0FBQyxBQUNQLEdBQUcsR0FBRyxDQUFDLENBQUMsQUFDUixHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQ1IsQUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUMsQUFDN0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsR0FBRyxHQUFHLENBQUMsQUFDekMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsR0FBRyxHQUFHLENBQUMsQUFDekMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDLEFBRTdCLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEFBRXZFLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsQUFDMUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQyxBQUU1QyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLEFBQzFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUMsQUFDOUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxBQUM5QyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQ2hDLENBQ0QsZ0JBQWdCLENBQUUsMEJBQVMsTUFBTSxDQUFFLFFBQVEsQ0FBRSxDQUM1QyxJQUFJLEVBQUUsQ0FBRyxDQUFDLENBQUUsR0FBRyxDQUFHLENBQUMsQ0FBRSxFQUFFLENBQUcsQ0FBQyxDQUFFLEdBQUcsQ0FBRyxDQUFDLENBQUMsQUFFckMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsQUFFOUMsRUFBRSxHQUFHLE1BQU0sQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLEFBQy9CLEdBQUcsR0FBRyxBQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBSSxHQUFHLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFHLENBQUMsQ0FBQyxBQUN2RSxHQUFHLE1BQU0sQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFFLENBQ3ZCLEVBQUUsR0FBRyxBQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBSSxBQUFDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEdBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUcsR0FBRyxDQUFDLEFBQ3hHLEdBQUcsR0FBRyxBQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBSSxFQUFFLElBQUksTUFBTSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQSxBQUFDLENBQUcsQ0FBQyxDQUFDLENBQ3JGLEtBQU0sQ0FDTixFQUFFLEdBQUcsR0FBRyxDQUFDLEFBQ1QsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUNWLEFBRUQsR0FBRyxRQUFRLENBQUUsQ0FDWixFQUFFLEdBQUcsQ0FBQyxDQUFDLEFBQ1AsR0FBRyxHQUFHLENBQUMsQ0FBQyxBQUNSLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FDUixBQUVELElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQyxBQUM3QixJQUFJLENBQUMsTUFBTSxDQUFDLHNCQUFzQixHQUFHLEdBQUcsQ0FBQyxBQUN6QyxJQUFJLENBQUMsTUFBTSxDQUFDLHNCQUFzQixHQUFHLEdBQUcsQ0FBQyxBQUN6QyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUMsQUFFN0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQUFFdkUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO0FBQzNCLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQztBQUM3QixJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUM7QUFDN0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0NBQzFCLENBQ0QsWUFBWSxDQUFFLHVCQUFXLENBQ3hCLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztDQUNwRSxDQUNELFFBQVEsQ0FBRSxrQkFBUyxTQUFTLENBQUUsS0FBSyxDQUFFLE9BQU8sQ0FBRTtBQUM3QyxJQUFJLEtBQUssQ0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEFBQy9CLEtBQUssQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLEFBQ25CLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxBQUNuRCxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBRSxFQUFFLENBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3pELEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFFLEVBQUUsQ0FBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDdkQsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUUsRUFBRSxDQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNuRCxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBRSxFQUFFLENBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3ZELEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFFLEVBQUUsQ0FBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDckQsR0FBRyxLQUFLLENBQUUsQ0FDVCxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBRSxLQUFLLENBQUMsQ0FBQyxDQUMxQyxBQUNELEdBQUcsT0FBTyxDQUFFLENBQ1gsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUUsT0FBTyxDQUFDLENBQUMsQ0FDOUMsQUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUM1QixDQUNELGlCQUFpQixDQUFFLDJCQUFTLFNBQVMsQ0FBRSxNQUFNLENBQUU7QUFDOUMsR0FBRyxTQUFTLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFFLENBQ3ZDLEdBQUcsQ0FBQyxJQUFJLENBQUMs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QUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUUsQ0FDckUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBRSxDQUM1QixJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsQUFDOUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDLENBQ2pDLEtBQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBRSxDQUNsQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsQUFDOUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDLENBQ2pDLEtBQU0sQ0FDTixJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsQUFDOUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDLENBQ2pDLENBQ0QsQUFDRCxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBRSxDQUM3RCxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFFLENBQ3JCLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxBQUMxQixJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FDN0IsS0FBTSxDQUNOLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxBQUMxQixJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFB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QkFBUyxDQUFDLENBQUUsQ0FDeEIsT0FBTyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUM1RyxDQUNELFdBQVcsQ0FBRSxxQkFBUyxHQUFHLENBQUUsQ0FDMUIsSUFBSSxFQUFFLENBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxBQUN2QyxFQUFFLENBQUMsU0FBUyxHQUFFLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxBQUM5RCxPQUFPLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQzFCLENBQ0Qsa0JBQWtCLENBQUUsNEJBQVMsS0FBSyxDQUFFLENBQ25DLElBQUksSUFBSSxDQUFHLElBQUksQ0FBQyxBQUNoQixDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBRSxTQUFTLElBQUksQ0FBRSxHQUFHLENBQUUsQ0FDakMsR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBRSxDQUFDLENBQUMsS0FBSyxPQUFPLENBQUUsQ0FDNUQsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDcEMsQ0FDRCxDQUFDLENBQUMsQUFDSCxPQUFPLEtBQUssQ0FBQyxDQUNiLENBQ0QsYUFBYSxDQUFFLHVCQUFTLEtBQUssQ0FBRSxDQUM5QixHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFFLENBQzFCLElBQUksQ0FBQyxVQUFVLENB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QUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUN2QixDQUFFLEdBQUcsQ0FBQyxDQUFDLEFBQ1IsT0FBTztDQUNQLEFBQ0QsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFFLENBQzVCLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLENBQzlCLENBQ0QsQ0FDRCxzQkFBc0IsQ0FBRSxpQ0FBVyxDQUNsQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFFLENBQzNCLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxBQUNoQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUUsQ0FDaEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLENBQzdCLEFBQ0QsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBRSxDQUNyQixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQUFDL0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBRSxRQUFRLENBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQ3ZGLENBQ0QsQ0FDRCxDQUNELGlCQUFpQixDQUFFLDJCQUFTLFFBQVEsQ0FBRSxLQUFLLENBQUUsQ0FDNUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUUsQ0FDN0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQ3pDLEFBQ0QsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUUsQ0FDN0IsSUFBSSxDQUFDLFdBQVcsQ0FB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LEtBQUssR0FBRyxDQUFDLENBQ2pELENBQUMsQ0FBQyxDQUVILEFBRUQsR0FBSyxTQUFTLENBQUMsUUFBUSxDQUFHLENBQ3pCLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBRSxRQUFRLENBQUUsU0FBVSxJQUFJLENBQUcsQ0FDOUMsT0FBTyxBQUFFLElBQUksS0FBSyxTQUFTLEtBQU8sR0FBRyxDQUFDLENBQ3RDLENBQUMsQ0FBQyxDQUVILEFBRUQsR0FBSyxPQUFPLFNBQVMsS0FBSyxRQUFRLENBQUcsQ0FDcEMsR0FBSyxTQUFTLENBQUMsSUFBSSxDQUFFLFNBQVMsQ0FBRSxDQUFHLENBQ2xDLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBRSxTQUFTLENBQUUsUUFBUSxDQUFFLEdBQUcsQ0FBRSxDQUFDLENBQ2pELEFBRUQsU0FBUyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUUsU0FBUyxDQUFFLFFBQVEsQ0FBRSxDQUFDLENBQ2pELEFBRUQsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFFLFFBQVEsQ0FBRSxTQUFVLElBQUksQ0FBRyxDQUM5QyxPQUFPLEFBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBRSxJQUFJLENBQUUsU0FBUyxDQUFFLElBQUksQ0FBQyxLQUFPLEdBQUcsQ0FBQyxDQUMxRCxDQUFDLENBQUMsQ0FDSCxBQUVELE1BQU0sQ0FBQyxNQUFNLEdBQUcsU0FBVSxJQUFJLENBQUUsS0FBSyxDQUFFLEdBQUcsQ0FBRyxDQUM1QyxJQUFJLElBQUksQ0FBRyxLQUFLLENBQUUsQ0FBQyxDQUFFLENBQUMsQUFFdEIsR0FBSyxHQUFHLENBQUcsQ0FDVixJQUFJLEdBQUcsT0FBTyxHQUFHLElBQUksR0FBRyxHQUFHLENBQUMsQ0FDNUIsQUFFRCxPQUFPLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssQ0FBQyxDQUMvQyxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBRSxJQUFJLENBQUUsSUFBSSxDQUFFLENBQUcsQ0FBRSxJQUFJLENBQUUsQ0FBRyxFQUFFLENBQ3pE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QUFLLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUUsS0FBSyxDQUFDLElBQUksQ0FBRSxJQUFJLElBQUksQ0FBQSxBQUFDLENBQUcsQ0FDaEUsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFFLEtBQUssQ0FBQyxJQUFJLENBQUUsQ0FBQyxDQUNoQzs7OztBQU1ELE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFFLEtBQUssQ0FBQyxJQUFJLENBQUUsS0FBSyxDQUFDLElBQUksQ0FBRSxFQUFFLENBQUUsQ0FBQztBQUVsRCxPQUFPLENBQUMsTUFBTSxJQUFJLE1BQU0sS0FBSyxNQUFNLENBQUcsQ0FBQyxDQUFHLE1BQU0sQ0FBQyxDQUNqRCxDQUNELEdBQUcsQ0FBRSxhQUFVLEtBQUssQ0FBRzs7QUFHdEIsR0FBSyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBRSxLQUFLLENBQUMsSUFBSSxDQUFFLENBQUcsQ0FDbkMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUUsS0FBSyxDQUFDLElBQUksQ0FBRSxDQUFFLEtBQUssQ0FBRSxDQUFDLENBQ3RDLEtBQU0sR0FBSyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBTSxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBRSxNQUFNLENBQUMsUUFBUSxDQUFFLEtBQUssQ0FBQyxJQUFJLENBQUUsQ0FBRSxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFFLEtBQUssQ0FBQyxJQUFJLENBQUUsQ0FBQSxBQUFFLENBQUcsQ0FDaEksTUFBTSxDQUFDLEtBQUssQ0FBRSxLQUFLLENBQUMsSUFBSSxDQUFFLEtBQUssQ0FBQyxJQUFJLENBQUUsS0FBSyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFFLENBQUMsQ0FDL0QsS0FBTSxDQUNOLEtBQUssQ0FBQyxJQUFJLENBQUUsS0FBSyxDQUFDLElBQUksQ0FBRSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FDckMsQ0FDRCxDQUNELENBQ0QsQ0FBQzs7QUFLRixL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QUFDLENBQUM7QUFHbkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7QUFHbkIsTUFBTSxDQUFDLEtBQUssQ0FBRSxJQUFJLENBQUUsSUFBSSxDQUFFLEVBQUUsQ0FBRSxDQUFDLEFBRS9CLEdBQUssS0FBSyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUcsQ0FDMUIsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUUsSUFBSSxDQUFFLElBQUksQ0FBRSxDQUFDLENBQzlCO0FBR0QsSUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBRSxLQUFLLEVBQUUsR0FBSSxDQUN2QyxHQUFLLE1BQU0sQ0FBRSxLQUFLLENBQUUsQ0FBQyxJQUFJLEtBQUssSUFBSSxJQUFJLE1BQU0sQ0FBRSxLQUFLLENBQUUsQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFHLENBQ3RFLE1BQU0sQ0FBRSxLQUFLLENBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFFLElBQUksQ0FBRSxDQUFDLEFBQ2xDLE1BQU0sQ0FBQyxNQUFNLENBQUUsS0FBSyxDQUFFLENBQUMsQ0FBRSxDQUFDLENBQzFCLENBQ0Q7QUFHRCxJQUFNLEtBQUssR0FBRyxDQUFDLENBQUUsS0FBSyxHQUFHLE1BQU0sQ0FBRSxLQUFLLEVBQUUsRUFBRyxDQUMxQyxHQUFLLEtBQUssQ0FBRSxLQUFLLENBQUUsSUFBSSxLQUFLLENBQUUsS0FBSyxDQUFFLENBQUMsTUFBTSxDQUFHLENBQzlDLEtBQUssQ0FBRSxLQUFLLENBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFFLElBQUksQ0FBRSxDQUFDLENBQ25DLENBQ0Q7QUFHRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FDbkIsQ0FBQyxDQUFDLENBQ0gsQ0FDRCxDQUFDLENBQUMsQUFFSCxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUUsUUFBUSxDQUFFLE1BQU0sQ0FBRSxNQUFNLENBQUUsQ0FBRSxTQUFVLENBQUMsQ0FBRSxJQUFJLENBQUcsQ0FDN0QsSUFBSSxLQUFLLENBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBRSxJQUFJLENBQUUsQ0FBQyxBQUM5QixNQUFNLENBQUMsRUFBRSxDQUFFLElBQUksQ0FBRSxHQUFHLFNBQVUsS0FBSyxDQUFFLE1BQU0sQ0FBRSxRQUFRLENBQUcsQ0FDdkQsT0FBTyxLQUFLLElBQUksSUFBSSxJQUFJLE9BQU8sS0FBSyxLQUFLLFNBQVMsQ0FDakQsS0FBSyxDQUFDLEtBQUssQ0FBRSxJQUFJLENBQUUsU0FBUyxDQUFFLENBQzlCLElBQUksQ0FBQyxPQUFPLENBQUUsS0FBSyxDQUFFLElBQUksQ0FBRSxJQUFJLENBQUUsQ0FBRSxLQUFLLENBQUUsTUFBTSxDQUFFLFFBQVEsQ0FBRSxDQUFDLENBQzlELENBQUMsQ0FDRixDQUFDLENBQUM7QUFHSCxNQUFNLENBQUMsSUFBSSxDQUFDLENBQ1gsU0FBUyxDQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FDeEIsT0FBTyxDQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FDdEIsV0FBVyxDQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FDNUIsTUFBTSxDQUFFLENBQUUsT0FBTyxDQUFFLE1BQU0sQ0FBRSxDQUMzQixPQUFPLENBQUUsQ0FBRSxPQUFPLENBQUUsTUFBTSxDQUFFLENBQzVCLFVBQVUsQ0FBRSxDQUFFLE9BQU8sQ0FBRSxRQUFRLENBQUUsQ0FDakMsQ0FBRSxTQUFVLElBQUksQ0FBRSxLQUFLLENBQUcsQ0FDMUIsTUFBTSxDQUFDLEVBQUUsQ0FBRSxJQUFJLENBQUUsR0FBRyxTQUFVLEtBQUssQ0FBRSxNQUFNLENBQUUsUUFBUSxDQUFHLENBQ3ZELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBRSxLQUFLLENBQUUsS0FBSyxDQUFFLE1BQU0sQ0FBRSxRQUFRLENBQUUsQ0FBQyxDQUN0RCxDQUFDLENBQ0YsQ0FBQyxDQUFDLEFBRUgsTUFBTSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUMsQUFDbkIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEdBQUcsVUFBVyxDQUMzQixJQUFJLEtBQUssQ0FDUixNQUFNLENBQUcsTUFBTSxDQUFDLE1BQU0sQ0FDdEIsQ0FBQyxDQUFHLENBQUMsQ0FBQyxBQUVQLEtBQUssR0FBRyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsQUFFckIsS0FBUSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBRSxDQUFDLEVBQUUsRUFBRyxDQUNoQyxLQUFLLEdBQUcsTUFBTSxDQUFFLENBQUMsQ0FBRSxDQUFDO0FBRXBCLEdBQUssQ0FBQyxLQUFLLEVBQUUsSUFBSSxNQUFNLENBQUUsQ0FBQyxDQUFFLEtBQUssS0FBSyxDQUFHLENBQ3hDLE1BQU0sQ0FBQyxNQUFNLENBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQyxDQUFFLENBQUMsQ0FDeEIsQ0FDRCxBQUVELEdBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFHLENBQ3JCLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FDakIsQUFDRCxLQUFLLEdBQUcsU0FBUyxDQUFDLENBQ2xCLENBQUMsQUFFRixNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssR0FBRyxTQUFVLEtBQUssQ0FBRyxDQUNuQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBRSxLQUFLLENBQUUsQ0FBQyxBQUM1QixHQUFLLEtBQUssRUFBRSxDQUFHLENBQ2QsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUNsQixLQUFNLENBQ04sTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUNwQixDQUNELENBQUMsQUFFRixNQUFNLENBQUMsRUFBRSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUMsQUFFeEIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEdBQUcsVUFBVyxDQUM1QixHQUFLLENBQUMsT0FBTyxDQUFHLENBQ2YsT0FBTyxHQUFHLFdBQVcsQ0FBRSxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBRSxNQUFNLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBRSxDQUFDLENBQzVELENBQ0QsQ0FBQyxBQUVGLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxHQUFHLFVBQVcsQ0FDM0IsYUFBYSxDQUFFLE9BQU8sQ0FBRSxDQUFDLEFBQ3pCLE9BQU8sR0FBRyxJQUFJLENBQUMsQ0FDZixDQUFDLEFBRUYsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FDbEIsSUFBSSxDQUFFLEdBQUcsQ0FDVCxJQUFJLENBQUUsR0FBRztBQUVULFFBQVEsQ0FBRSxHQUFHLENBQ2IsQ0FBQzs7QUFLRixNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssR0FBRyxTQUFVLElBQUksQ0FBRSxJQUFJLENBQUcsQ0FDeEMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUcsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUUsSUFBSSxDQUFFLElBQUksSUFBSSxDQUFHLElBQUksQ0FBQyxBQUMzRCxJQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksQ0FBQyxBQUVwQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUUsSUFBSSxDQUFFLFNBQVUsSUFBSSxDQUFFLEtBQUssQ0FBRyxDQUNoRCxJQUFJLE9BQU8sQ0FBRyxVQUFVLENBQUUsSUFBSSxDQUFFLElBQUksQ0FBRSxDQUFDLEFBQ3ZDLEtBQUssQ0FBQyxJQUFJLEdBQUcsVUFBVyxDQUN2QixZQUFZLENBQUUsT0FBTyxDQUFFLENBQUMsQ0FDeEIsQ0FBQyxDQUNGLENBQUMsQ0FBQyxDQUNILENBQUMsQUFHRixDQUFDLFVBQVc7QUFFWCxJQUFJLEtBQUssQ0FBRSxHQUFHLENBQUUsTUFBTSxDQUFFLENBQUMsQ0FBRSxHQUFHLENBQUM7QUFHL0IsR0FBRyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUUsS0FBSyxDQUFFLENBQUMsQUFDdEMsR0FBRyxDQUFDLFlBQVksQ0FBRSxXQUFXLENBQUUsR0FBRyxDQUFFLENBQUMsQUFDckMsR0FBRyxDQUFDLFNBQVMsR0FBRyxvRUFBb0UsQ0FBQyxBQUNyRixDQUFDLEdBQUcsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxDQUFFLENBQUMsQ0FBRSxDQUFDO0FBR3ZDLE1BQU0sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEFBQzFDLEdBQUcsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFFLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUUsQ0FBQyxBQUM3RCxLQUFLLEdBQUcsR0FBRyxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFFLENBQUMsQ0FBRSxDQUFDLEFBRS9DLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQztBQUc1QixPQUFPLENBQUMsZUFBZSxHQUFHLEdBQUcsQ0FBQyxTQUFTLEtBQUssR0FBRyxDQUFDOztBQUloRCxPQUFPLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBRSxDQUFDOztBQUl0RCxPQUFPLENBQUMsY0FBYyxHQUFHLENBQUMsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSSxDQUFDO0FBR3pELE9BQU8sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7O0FBSWhDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQztBQUduQyxPQUFPLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQzs7QUFJM0QsTUFBTSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsQUFDdkIsT0FBTyxDQUFDLFdBQVcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUM7O0FBSXBDLEtBQUssR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFFLE9BQU8sQ0FBRSxDQUFDLEFBQzFDLEtBQUssQ0FBQyxZQUFZLENBQUUsT0FBTyxDQUFFLEVBQUUsQ0FBRSxDQUFDLEFBQ2xDLE9BQU8sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBRSxPQUFPLENBQUUsS0FBSyxFQUFFLENBQUM7QUFHckQsS0FBSyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsQUFDbEIsS0FBSyxDQUFDLFlBQVksQ0FBRSxNQUFNLENBQUUsT0FBTyxDQUFFLENBQUMsQUFDdEMsT0FBTyxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsS0FBSyxLQUFLLEdBQUcsQ0FBQyxDQUN6QyxDQUFBLEVBQUcsQ0FBQyxBQUdMLElBQUksT0FBTyxDQUFHLEtBQUssQ0FBQyxBQUVwQixNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUNoQixHQUFHLENBQUUsYUFBVSxLQUFLLENBQUcsQ0FDdEIsSUFBSSxLQUFLLENBQUUsR0FBRyxDQUFFLFVBQVUsQ0FDekIsSUFBSSxDQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxBQUVoQixHQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBRyxDQUN4QixHQUFLLElBQUksQ0FBRyxDQUNYLEtBQUssR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFFLElBQUksQ0FBQyxJQUFJLENBQUUsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUUsQ0FBQyxBQUV2RixHQUFLLEtBQUssSUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUUsSUFBSSxDQUFFLE9BQU8sQ0FBRSxDQUFBLEtBQU0sU0FBUyxDQUFHLENBQ2xGLE9BQU8sR0FBRyxDQUFDLENBQ1gsQUFFRCxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxBQUVqQixPQUFPLE9BQU8sR0FBRyxLQUFLLFFBQVE7QUFFN0IsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUUsRUFBRSxDQUFDO0FBRXhCLEdBQUcsSUFBSSxJQUFJLENBQUcsRUFBRSxDQUFHLEdBQUcsQ0FBQyxDQUN4QixBQUVELE9BQU8sQ0FDUCxBQUVELFVBQVUsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFFLEtBQUssQ0FBRSxDQUFDLEFBRXhDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFVLENBQUMsQ0FBRyxDQUM5QixJQUFJLEdBQUcsQ0FBQyxBQUVSLEdBQUssSUFBSSxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUcsQ0FDMUIsT0FBTyxDQUNQLEFBRUQsR0FBSyxVQUFVLENBQUcsQ0FDakIsR0FBRyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUUsSUFBSSxDQUFFLENBQUMsQ0FBRSxNQUFNLENBQUUsSUFBSSxDQUFFLENBQUMsR0FBRyxFQUFFLENBQUUsQ0FBQyxDQUNsRCxLQUFNLENBQ04sR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUNaO0FBR0QsR0FBSyxHQUFHLElBQUksSUFBSSxDQUFHLENBQ2xCLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FDVCxLQUFNLEdBQUssT0FBTyxHQUFHLEtBQUssUUFBUSxDQUFHLENBQ3JDLEdBQUcsSUFBSSxFQUFFLENBQUMsQ0FDVixLQUFNLEdBQUssTUFBTSxDQUFDLE9BQU8sQ0FBRSxHQUFHLENBQUUsQ0FBRyxDQUNuQyxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBRSxHQUFHLENBQUUsU0FBVSxLQUFLLENBQUcsQ0FDeEMsT0FBTyxLQUFLLElBQUksSUFBSSxDQUFHLEVBQUUsQ0FBRyxLQUFLLEdBQUcsRUFBRSxDQUFDLENBQ3ZDLENBQUMsQ0FBQyxDQUNILEFBRUQsS0FBSyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUUsSUFBSSxDQUFDLElBQUksQ0FBRSxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBRSxDQUFDO0FBR3ZGLEdBQUssQ0FBQyxLQUFLLElBQUksRUFBRSxLQUFLLElBQUksS0FBSyxDQUFBLEFBQUMsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFFLElBQUksQ0FBRSxHQUFHLENBQUUsT0FBTyxDQUFFLEtBQUssU0FBUyxDQUFHLENBQ25GLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLENBQ2pCLENBQ0QsQ0FBQyxDQUFDLENBQ0gsQ0FDRCxDQUFDLENBQUMsQUFFSCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQ2IsUUFBUSxDQUFFLENBQ1QsTUFBTSxDQUFFLENBQ1AsR0FBRyxDQUFFLGFBQVUsSUFBSSxDQUFHLENBQ3JCLElBQUksR0FBRyxDQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFFLElBQUksQ0FBRSxPQUFPLENBQUUsQ0FBQyxBQUM1QyxPQUFPLEdBQUcsSUFBSSxJQUFJLENBQ2pCLEdBQUc7O0FBR0gsTUFBTSxDQUFDLElBQUksQ0FBRSxNQUFNLENBQUMsSUFBSSxDQUFFLElBQUksQ0FBRSxDQUFFLENBQUMsQ0FDcEMsQ0FDRCxDQUNELE1BQU0sQ0FBRSxDQUNQLEdBQUcsQ0FBRSxhQUFVLElBQUksQ0FBRyxDQUNyQixJQUFJLEtBQUssQ0FBRSxNQUFNLENBQ2hCLE9BQU8sQ0FBRyxJQUFJLENBQUMsT0FBTyxDQUN0QixLQUFLLENBQUcsSUFBSSxDQUFDLGFBQWEsQ0FDMUIsR0FBRyxDQUFHLElBQUksQ0FBQyxJQUFJLEtBQUssWUFBWSxJQUFJLEtBQUssR0FBRyxDQUFDLENBQzdDLE1BQU0sQ0FBRyxHQUFHLENBQUcsSUFBSSxDQUFHLEVBQUUsQ0FDeEIsR0FBRyxDQUFHLEdBQUcsQ0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFHLE9BQU8sQ0FBQyxNQUFNLENBQ3RDLENBQUMsQ0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUNaLEdBQUcsQ0FDSCxHQUFHLENBQUcsS0FBSyxDQUFHLENBQUMsQ0FBQztBQUdsQixLQUFRLENBQUMsR0FBRyxHQUFHLENBQUUsQ0FBQyxFQUFFLEVBQUcsQ0FDdEIsTUFBTSxHQUFHLE9BQU8sQ0FBRSxDQUFDLENBQUUsQ0FBQztBQUd0QixHQUFLLENBQUUsTUFBTSxDQUFDLFFBQVEsSUFBSSxDQUFDLEtBQUssS0FBSyxDQUFBO0FBRWpDLE9BQU8sQ0FBQyxXQUFXLENBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLEtBQUssSUFBSSxDQUFBLEFBQUUsS0FDbkYsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFFBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBRSxVQUFVLENBQUUsQ0FBQSxBQUFFLENBQUc7QUFHeEYsS0FBSyxHQUFHLE1BQU0sQ0FBRSxNQUFNLENBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUcvQixHQUFLLEdBQUcsQ0FBRyxDQUNWLE9BQU8sS0FBSyxDQUFDLENBQ2I7QUFHRCxNQUFNLENBQUMsSUFBSSxDQUFFLEtBQUssQ0FBRSxDQUFDLENBQ3JCLENBQ0QsQUFFRCxPQUFPLE1BQU0sQ0FBQyxDQUNkLENBRUQsR0FBRyxDQUFFLGFBQVUsSUFBSSxDQUFFLEtBQUssQ0FBRyxDQUM1QixJQUFJLFNBQVMsQ0FBRSxNQUFNLENBQ3BCLE9BQU8sQ0FBRyxJQUFJLENBQUMsT0FBTyxDQUN0QixNQUFNLENBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBRSxLQUFLLENBQUUsQ0FDbEMsQ0FBQyxDQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQUFFcEIsTUFBUSxDQUFDLEVBQUUsRUFBRyxDQUNiLE1BQU0sR0FBRyxPQUFPLENBQUUsQ0FBQyxDQUFFLENBQUMsQUFFdEIsR0FBSyxNQUFNLENBQUMsT0FBTyxDQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBRSxNQUFNLENBQUUsQ0FBRSxNQUFNLENBQUUsSUFBSSxDQUFDLENBQUc7Ozs7QUFNMUUsR0FBSSxDQUNILE1BQU0sQ0FBQyxRQUFRLEdBQUcsU0FBUyxHQUFHLElBQUksQ0FBQyxDQUVuQyxBQUFDLE1BQVEsQ0FBQyxFQUFHO0FBR2IsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUNwQixDQUVELEtBQU0sQ0FDTixNQUFNLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxDQUN4QixDQUNEO0FBR0QsR0FBSyxDQUFDLFNBQVMsQ0FBRyxDQUNqQixJQUFJLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQ3hCLEFBRUQsT0FBTyxPQUFPLENBQUMsQ0FDZixDQUNELENBQ0QsQ0FDRCxDQUFDLENBQUM7QUFHSCxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUUsT0FBTyxDQUFFLFVBQVUsQ0FBRSxDQUFFLFVBQVcsQ0FDL0MsTUFBTSxDQUFDLFFBQVEsQ0FBRSxJQUFJLENBQUUsR0FBRyxDQUN6QixHQUFHLENBQUUsYUFBVSxJQUFJLENBQUUsS0FBSyxDQUFHLENBQzVCLEdBQUssTUFBTSxDQUFDLE9BQU8sQ0FBRSxLQUFLLENBQUUsQ0FBRyxDQUM5QixPQUFTLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUUsS0FBSyxDQUFFLElBQUksQ0FBQyxDQUFHLENBQzNFLENBQ0QsQ0FDRCxDQUFDLEFBQ0YsR0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUcsQ0FDdkIsTUFBTSxDQUFDLFFBQVEsQ0FBRSxJQUFJLENBQUUsQ0FBQyxHQUFHLEdBQUcsU0FBVSxJQUFJLENBQUc7O0FBRzlDLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsS0FBSyxJQUFJLENBQUcsSUFBSSxDQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FDL0QsQ0FBQyxDQUNGLENBQ0QsQ0FBQyxDQUFDLEFBS0gsSUFBSSxRQUFRLENBQUUsUUFBUSxDQUNyQixVQUFVLENBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQ25DLFdBQVcsQ0FBRyx5QkFBeUIsQ0FDdkMsZUFBZSxDQUFHLE9BQU8sQ0FBQyxlQUFlLENBQ3pDLFdBQVcsQ0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLEFBRTdCLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQ2hCLElBQUksQ0FBRSxjQUFVLElBQUksQ0FBRSxLQUFLLENBQUcsQ0FDN0IsT0FBTyxNQUFNLENBQUUsSUFBSSxDQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUUsSUFBSSxDQUFFLEtBQUssQ0FBRSxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBRSxDQUFDLENBQ3RFLENBRUQsVUFBVSxDQUFFLG9CQUFVLElBQUksQ0FBRyxDQUM1QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVyxDQUMzQixNQUFNLENBQUMsVUFBVSxDQUFFLElBQUksQ0FBRSxJQUFJLENBQUUsQ0FBQyxDQUNoQyxDQUFDLENBQUMsQ0FDSCxDQUNELENBQUMsQ0FBQyxBQUVILE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FDYixJQUFJLENBQUUsY0FBVSxJQUFJLENBQUUsSUFBSSxDQUFFLEtBQUssQ0FBRyxDQUNuQyxJQUFJLEtBQUssQ0FBRSxHQUFHLENBQ2IsS0FBSyxDQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7QUFHdkIsR0FBSyxDQUFDLElBQUksSUFBSSxLQUFLLEtBQUssQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBRyxDQUN6RCxPQUFPLENBQ1A7QUFHRCxHQUFLLE9BQU8sSUFBSSxDQUFDLFlBQVksS0FBSyxZQUFZLENBQUcsQ0FDaEQsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFFLElBQUksQ0FBRSxJQUFJLENBQUUsS0FBSyxDQUFFLENBQUMsQ0FDeEM7O0FBSUQsR0FBSyxLQUFLLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBRSxJQUFJLENBQUUsQ0FBRyxDQUM5QyxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLEFBQzFCLEtBQUssR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFFLElBQUksQ0FBRSxLQUM3QixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFFLElBQUksQ0FBRSxDQUFHLFFBQVEsQ0FBRyxRQUFRLENBQUEsQUFBRSxDQUFDLENBQy9ELEFBRUQsR0FBSyxLQUFLLEtBQUssU0FBUyxDQUFHLENBRTFCLEdBQUssS0FBSyxLQUFLLElBQUksQ0FBRyxDQUNyQixNQUFNLENBQUMsVUFBVSxDQUFFLElBQUksQ0FBRSxJQUFJLENBQUUsQ0FBQyxDQUVoQyxLQUFNLEdBQUssS0FBSyxJQUFJLEtBQUssSUFBSSxLQUFLLElBQUksQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBRSxJQUFJLENBQUUsS0FBSyxDQUFFLElBQUksQ0FBRSxDQUFBLEtBQU0sU0FBUyxDQUFHLENBQzdGLE9BQU8sR0FBRyxDQUFDLENBRVgsS0FBTSxDQUNOLElBQUksQ0FBQyxZQUFZLENBQUUsSUFBSSxDQUFFLEtBQUssR0FBRyxFQUFFLENBQUUsQ0FBQyxBQUN0QyxPQUFPLEtBQUssQ0FBQyxDQUNiLENBRUQsS0FBTSxHQUFLLEtBQUssSUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUUsSUFBSSxDQUFFLElBQUksQ0FBRSxDQUFBLEtBQU0sSUFBSSxDQUFHLENBQ2pGLE9BQU8sR0FBRyxDQUFDLENBRVgsS0FBTSxDQUNOLEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBRSxJQUFJLENBQUUsSUFBSSxDQUFFLENBQUM7QUFHckMsT0FBTyxHQUFHLElBQUksSUFBSSxDQUNqQixTQUFTLENBQ1QsR0FBRyxDQUFDLENBQ0wsQ0FDRCxDQUVELFVBQVUsQ0FBRSxvQkFBVSxJQUFJLENBQUUsS0FBSyxDQUFHLENBQ25DLElBQUksSUFBSSxDQUFFLFFBQVEsQ0FDakIsQ0FBQyxDQUFHLENBQUMsQ0FDTCxTQUFTLENBQUcsS0FBSyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUUsU0FBUyxDQUFFLENBQUMsQUFFL0MsR0FBSyxTQUFTLElBQUksSUFBSSxDQUFDLFFBQVEsS0FBSyxDQUFDLENBQUcsQ0FDdkMsTUFBUyxJQUFJLEdBQUcsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUksQ0FDakMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUUsSUFBSSxDQUFFLElBQUksSUFBSSxDQUFDO0FBRzFDLEdBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBRSxJQUFJLENBQUUsQ0FBRztBQUUxQyxHQUFLLFdBQVcsSUFBSSxlQUFlLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFFLElBQUksQ0FBRSxDQUFHLENBQ2xFLElBQUksQ0FBRSxRQUFRLENBQUUsR0FBRyxLQUFLLENBQUM7O0NBR3pCLEtBQU0sQ0FDTixJQUFJLENBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBRSxVQUFVLEdBQUcsSUFBSSxDQUFFLENBQUUsR0FDNUMsSUFBSSxDQUFFLFFBQVEsQ0FBRSxHQUFHLEtBQUssQ0FBQyxDQUMxQjtDQUdELEtBQU0sQ0FDTixNQUFNLENBQUMsSUFBSSxDQUFFLElBQUksQ0FBRSxJQUFJLENBQUUsRUFBRSxDQUFFLENBQUMsQ0FDOUIsQUFFRCxJQUFJLENBQUMsZUFBZSxDQUFFLGVBQWUsQ0FBRyxJQUFJLENBQUcsUUFBUSxDQUFFLENBQUMsQ0FDMUQsQ0FDRCxDQUNELENBRUQsU0FBUyxDQUFFLENBQ1YsSUFBSSxDQUFFLENBQ0wsR0FBRyxDQUFFLGFBQVUsSUFBSSxDQUFFLEtBQUssQ0FBRyxDQUM1QixHQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsSUFBSSxLQUFLLEtBQUssT0FBTyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFFLE9BQU8sQ0FBQyxDQUFHOztBQUdqRixJQUFJLEdBQUcsQ0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEFBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUUsTUFBTSxDQUFFLEtBQUssQ0FBRSxDQUFDLEFBQ25DLEdBQUssR0FBRyxDQUFHLENBQ1YsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FDakIsQUFDRCxPQUFPLEtBQUssQ0FBQyxDQUNiLENBQ0QsQ0FDRCxDQUNELENBQ0QsQ0FBQyxDQUFDO0FBR0gsUUFBUSxHQUFHLENBQ1YsR0FBRyxDQUFFLGFBQVUsSUFBSSxDQUFFLEtBQUssQ0FBRSxJQUFJLENBQUcsQ0FDbEMsR0FBSyxLQUFLLEtBQUssS0FBSyxDQUFHO0FBRXRCLE1BQU0sQ0FBQyxVQUFVLENBQUUsSUFBSSxDQUFFLElBQUksQ0FBRSxDQUFDLENBQ2hDLEtBQU0sR0FBSyxXQUFXLElBQUksZUFBZSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBRSxJQUFJLENBQUUsQ0FBRztBQUV6RSxJQUFJLENBQUMsWUFBWSxDQUFFLENBQUMsZUFBZSxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUUsSUFBSSxDQUFFLElBQUksSUFBSSxDQUFFLElBQUksQ0FBRSxDQUFDO0NBRzlFLEtBQU0sQ0FDTixJQUFJLENBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBRSxVQUFVLEdBQUcsSUFBSSxDQUFFLENBQUUsR0FBRyxJQUFJLENBQUUsSUFBSSxDQUFFLEdBQUcsSUFBSSxDQUFDLENBQ3BFLEFBRUQsT0FBTyxJQUFJLENBQUMsQ0FDWixDQUNELENBQUM7QUFHRixNQUFNLENBQUMsSUFBSSxDQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFFLE1BQU0sQ0FBRSxDQUFFLFNBQVUsQ0FBQyxDQUFFLElBQUksQ0FBRyxDQUUvRSxJQUFJLE1BQU0sQ0FBRyxVQUFVLENBQUUsSUFBSSxDQUFFLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQUFFcEQsVUFBVSxDQUFFLElBQUksQ0FBRSxHQUFHLFdBQVcsSUFBSSxlQUFlLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFFLElBQUksQ0FBRSxDQUMvRSxTQUFVLElBQUksQ0FBRSxJQUFJLENBQUUsS0FBSyxDQUFHLENBQzdCLElBQUksR0FBRyxDQUFFLE1BQU0sQ0FBQyxBQUNoQixHQUFLLENBQUMsS0FBSyxDQUFHO0FBRWIsTUFBTSxHQUFHLFVBQVUsQ0FBRSxJQUFJLENBQUUsQ0FBQyxBQUM1QixVQUFVLENBQUUsSUFBSSxDQUFFLEdBQUcsR0FBRyxDQUFDLEFBQ3pCLEdBQUcsR0FBRyxNQUFNLENBQUUsSUFBSSxDQUFFLElBQUksQ0FBRSxLQUFLLENBQUUsSUFBSSxJQUFJLENBQ3hDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FDbEIsSUFBSSxDQUFDLEFBQ04sVUFBVSxDQUFFLElBQUksQ0FBRSxHQUFHLE1BQU0sQ0FBQyxDQUM1QixBQUNELE9BQU8sR0FBRyxDQUFDLENBQ1gsQ0FDRCxTQUFVLElBQUksQ0FBRSxJQUFJLENBQUUsS0FBSyxDQUFHLENBQzdCLEdBQUssQ0FBQyxLQUFLLENBQUcsQ0FDYixPQUFPLElBQUksQ0FBRSxNQUFNLENBQUMsU0FBUyxDQUFFLFVBQVUsR0FBRyxJQUFJLENBQUUsQ0FBRSxDQUNuRCxJQUFJLENBQUMsV0FBVyxFQUFFLENBQ2xCLElBQUksQ0FBQyxDQUNOLENBQ0QsQ0FBQyxDQUNILENBQUMsQ0FBQztBQUdILEdBQUssQ0FBQyxXQUFXLElBQUksQ0FBQyxlQUFlLENBQUcsQ0FDdkMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsQ0FDeEIsR0FBRyxDQUFFLGFBQVUsSUFBSSxDQUFFLEtBQUssQ0FBRSxJQUFJLENBQUcsQ0FDbEMsR0FBSyxNQUFNLENBQUMsUUFBUSxDQUFFLElBQUksQ0FBRSxPQUFPLENBQUUsQ0FBRztBQUV2QyxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxDQUMxQixLQUFNO0FBRU4sT0FBTyxRQUFRLElBQUksUUFBUSxDQUFDLEdBQUcsQ0FBRSxJQUFJLENBQUUsS0FBSyxDQUFFLElBQUksQ0FBRSxDQUFDLENBQ3JELENBQ0QsQ0FDRCxDQUFDLENBQ0Y7QUFHRCxHQUFLLENBQUMsZUFBZSxDQUFHOztBQUl2QixRQUFRLEdBQUcsQ0FDVixHQUFHLENBQUUsYUFBVSxJQUFJLENBQUUsS0FBSyxDQUFFLElBQUksQ0FBRztBQUVsQyxJQUFJLEdBQUcsQ0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUUsSUFBSSxDQUFFLENBQUMsQUFDeEMsR0FBSyxDQUFDLEdBQUcsQ0FBRyxDQUNYLElBQUksQ0FBQyxnQkFBZ0IsQ0FDbkIsR0FBRyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFFLElBQUksQ0FBRSxDQUNqRCxDQUFDLENBQ0YsQUFFRCxHQUFHLENBQUMsS0FBSyxHQUFHLEtBQUssSUFBSSxFQUFFLENBQUM7QUFHeEIsR0FBSyxJQUFJLEtBQUssT0FBTyxJQUFJLEtBQUssS0FBSyxJQUFJLENBQUMsWUFBWSxDQUFFLElBQUksQ0FBRSxDQUFHLENBQzlELE9BQU8sS0FBSyxDQUFDLENBQ2IsQ0FDRCxDQUNELENBQUM7QUFHRixVQUFVLENBQUMsRUFBRSxHQUFHLFVBQVUsQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDLE1BQU0sR0FDbEQsU0FBVSxJQUFJLENBQUUsSUFBSSxDQUFFLEtBQUssQ0FBRyxDQUM3QixJQUFJLEdBQUcsQ0FBQyxBQUNSLEdBQUssQ0FBQyxLQUFLLENBQUcsQ0FDYixPQUFPLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBRSxJQUFJLENBQUUsQ0FBQSxJQUFLLEdBQUcsQ0FBQyxLQUFLLEtBQUssRUFBRSxDQUMvRCxHQUFHLENBQUMsS0FBSyxDQUNULElBQUksQ0FBQyxDQUNOLENBQ0QsQ0FBQztBQUdILE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQ3hCLEdBQUcsQ0FBRSxhQUFVLElBQUksQ0FBRSxJQUFJLENBQUcsQ0FDM0IsSUFBSSxHQUFHLENBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFFLElBQUksQ0FBRSxDQUFDLEFBQ3hDLEdBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUcsQ0FDM0IsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQ2pCLENBQ0QsQ0FDRCxHQUFHLENBQUUsUUFBUSxDQUFDLEdBQUcsQ0FDakIsQ0FBQzs7QUFJRixNQUFNLENBQUMsU0FBUyxDQUFDLGVBQWUsR0FBRyxDQUNsQyxHQUFHLENBQUUsYUFBVSxJQUFJLENBQUUsS0FBSyxDQUFFLElBQUksQ0FBRyxDQUNsQyxRQUFRLENBQUMsR0FBRyxDQUFFLElBQUksQ0FBRSxLQUFLLEtBQUssRUFBRSxDQUFHLEtBQUssQ0FBRyxLQUFLLENBQUUsSUFBSSxDQUFFLENBQUMsQ0FDekQsQ0FDRCxDQUFDOztBQUlGLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBRSxPQUFPLENBQUUsUUFBUSxDQUFFLENBQUUsU0FBVSxDQUFDLENBQUUsSUFBSSxDQUFHLENBQ3RELE1BQU0sQ0FBQyxTQUFTLENBQUUsSUFBSSxDQUFFLEdBQUcsQ0FDMUIsR0FBRyxDQUFFLGFBQVUsSUFBSSxDQUFFLEtBQUssQ0FBRyxDQUM1QixHQUFLLEtBQUssS0FBSyxFQUFFLENBQUcsQ0FDbkIsSUFBSSxDQUFDLFlBQVksQ0FBRSxJQUFJLENBQUUsTUFBTSxDQUFFLENBQUMsQUFDbEMsT0FBTyxLQUFLLENBQUMsQ0FDYixDQUNELENBQ0QsQ0FBQyxDQUNGLENBQUMsQ0FBQyxDQUNILEFBRUQsR0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUcsQ0FDckIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsQ0FDeEIsR0FBRyxDQUFFLGFBQVUsSUFBSSxDQUFHOzs7QUFJckIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sSUFBSSxTQUFTLENBQUMsQ0FDdkMsQ0FDRCxHQUFHLENBQUUsYUFBVSxJQUFJLENBQUUsS0FBSyxDQUFHLENBQzVCLE9BQVMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsS0FBSyxHQUFHLEVBQUUsQ0FBRyxDQUMzQyxDQUNELENBQUMsQ0FDRixBQUtELElBQUksVUFBVSxDQUFHLDRDQUE0QyxDQUM1RCxVQUFVLENBQUcsZUFBZSxDQUFDLEFBRTlCLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQ2hCLElBQUksQ0FBRSxjQUFVLElBQUksQ0FBRSxLQUFLLENBQUcsQ0FDN0IsT0FBTyxNQUFNLENBQUUsSUFBSSxDQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUUsSUFBSSxDQUFFLEtBQUssQ0FBRSxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBRSxDQUFDLENBQ3RFLENBRUQsVUFBVSxDQUFFLG9CQUFVLElBQUksQ0FBRyxDQUM1QixJQUFJLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBRSxJQUFJLENBQUUsSUFBSSxJQUFJLENBQUMsQUFDdEMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVc7QUFFM0IsR0FBSSxDQUNILElBQUksQ0FBRSxJQUFJLENBQUUsR0FBRyxTQUFTLENBQUMsQUFDekIsT0FBTyxJQUFJLENBQUUsSUFBSSxDQUFFLENBQUMsQ0FDcEIsQUFBQyxNQUFPLENBQUMsRUFBRyxFQUFFLENBQ2YsQ0FBQyxDQUFDLENBQ0gsQ0FDRCxDQUFDLENBQUMsQUFFSCxNQUFNLENBQUMsTUFBTSxDQUFDLENBQ2IsT0FBTyxDQUFFLENBQ1IsS0FBSyxDQUFFLFNBQVMsQ0FDaEIsT0FBTyxDQUFFLFdBQVcsQ0FDcEIsQ0FFRCxJQUFJLENBQUUsY0FBVSxJQUFJLENBQUUsSUFBSSxDQUFFLEtBQUssQ0FBRyxDQUNuQyxJQUFJLEdBQUcsQ0FBRSxLQUFLLENBQUUsTUFBTSxDQUNyQixLQUFLLENBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztBQUd2QixHQUFLLENBQUMsSUFBSSxJQUFJLEtBQUssS0FBSyxDQUFDLElBQUksS0FBSyxLQUFLLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFHLENBQ3pELE9BQU8sQ0FDUCxBQUVELE1BQU0sR0FBRyxLQUFLLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBRSxJQUFJLENBQUUsQ0FBQyxBQUVqRCxHQUFLLE1BQU0sQ0FBRztBQUViLElBQUksR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFFLElBQUksQ0FBRSxJQUFJLElBQUksQ0FBQyxBQUN0QyxLQUFLLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBRSxJQUFJLENBQUUsQ0FBQyxDQUNqQyxBQUVELEdBQUssS0FBSyxLQUFLLFNBQVMsQ0FBRyxDQUMxQixPQUFPLEtBQUssSUFBSSxLQUFLLElBQUksS0FBSyxJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUUsSUFBSSxDQUFFLEtBQUssQ0FBRSxJQUFJLENBQUUsQ0FBQSxLQUFNLFNBQVMsQ0FDckYsR0FBRyxDQUNELElBQUksQ0FBRSxJQUFJLENBQUUsR0FBRyxLQUFLLEFBQUUsQ0FBQyxDQUUxQixLQUFNLENBQ04sT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJLEtBQUssSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFFLElBQUksQ0FBRSxJQUFJLENBQUUsQ0FBQSxLQUFNLElBQUksQ0FDekUsR0FBRyxDQUNILElBQUksQ0FBRSxJQUFJLENBQUUsQ0FBQyxDQUNkLENBQ0QsQ0FFRCxTQUFTLENBQUUsQ0FDVixRQUFRLENBQUUsQ0FDVCxHQUFHLENBQUUsYUFBVSxJQUFJLENBQUc7OztBQUlyQixJQUFJLFFBQVEsQ0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBRSxJQUFJLENBQUUsVUFBVSxDQUFFLENBQUMsQUFFcEQsT0FBTyxRQUFRLENBQ2QsUUFBUSxDQUFFLFFBQVEsQ0FBRSxFQUFFLENBQUUsQ0FDeEIsVUFBVSxDQUFDLElBQUksQ0FBRSxJQUFJLENBQUMsUUFBUSxDQUFFLElBQUksVUFBVSxDQUFDLElBQUksQ0FBRSxJQUFJLENBQUMsUUFBUSxDQUFFLElBQUksSUFBSSxDQUFDLElBQUksQ0FDaEYsQ0FBQyxDQUNELENBQUMsQ0FBQyxDQUFDLENBQ0wsQ0FDRCxDQUNELENBQ0QsQ0FBQyxDQUFDOztBQUlILEdBQUssQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFHO0FBRTlCLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBRSxNQUFNLENBQUUsS0FBSyxDQUFFLENBQUUsU0FBVSxDQUFDLENBQUUsSUFBSSxDQUFHLENBQ2xELE1BQU0sQ0FBQyxTQUFTLENBQUUsSUFBSSxDQUFFLEdBQUcsQ0FDMUIsR0FBRyxDQUFFLGFBQVUsSUFBSSxDQUFHLENBQ3JCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBRSxJQUFJLENBQUUsQ0FBQyxDQUFFLENBQUMsQ0FDcEMsQ0FDRCxDQUFDLENBQ0YsQ0FBQyxDQUFDLENBQ0g7OztBQUtELEdBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFHLENBQzNCLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLENBQzNCLEdBQUcsQ0FBRSxhQUFVLElBQUksQ0FBRyxDQUNyQixJQUFJLE1BQU0sQ0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEFBRTdCLEdBQUssTUFBTSxDQUFHLENBQ2IsTUFBTSxDQUFDLGFBQWEsQ0FBQztBQUdyQixHQUFLLE1BQU0sQ0FBQyxVQUFVLENBQUcsQ0FDeEIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FDaEMsQ0FDRCxBQUNELE9BQU8sSUFBSSxDQUFDLENBQ1osQ0FDRCxDQUFDLENBQ0YsQUFFRCxNQUFNLENBQUMsSUFBSSxDQUFDLENBQ1gsVUFBVSxDQUNWLFVBQVUsQ0FDVixXQUFXLENBQ1gsYUFBYSxDQUNiLGFBQWEsQ0FDYixTQUFTLENBQ1QsU0FBUyxDQUNULFFBQVEsQ0FDUixhQUFhLENBQ2IsaUJBQWlCLENBQ2pCLENBQUUsVUFBVyxDQUNiLE1BQU0sQ0FBQyxPQUFPLENBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFFLEdBQUcsSUFBSSxDQUFDLENBQzVDLENBQUMsQ0FBQztBQUdILEdBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFHLENBQ3ZCLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQyxDQUNwQyxBQUtELElBQUksTUFBTSxDQUFHLGFBQWEsQ0FBQyxBQUUzQixNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUNoQixRQUFRLENBQUUsa0JBQVUsS0FBSyxDQUFHLENBQzNCLElBQUksT0FBTyxDQUFFLElBQUksQ0FBRSxHQUFHLENBQUUsS0FBSyxDQUFFLENBQUMsQ0FBRSxVQUFVLENBQzNDLENBQUMsQ0FBRyxDQUFDLENBQ0wsR0FBRyxDQUFHLElBQUksQ0FBQyxNQUFNLENBQ2pCLE9BQU8sQ0FBRyxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLEFBRTlDLEdBQUssTUFBTSxDQUFDLFVBQVUsQ0FBRSxLQUFLLENBQUUsQ0FBRyxDQUNqQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBVSxDQUFDLENBQUcsQ0FDOUIsTUFBTSxDQUFFLElBQUksQ0FBRSxDQUFDLFFBQVEsQ0FBRSxLQUFLLENBQUMsSUFBSSxDQUFFLElBQUksQ0FBRSxDQUFDLENBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBRSxDQUFFLENBQUMsQ0FDakUsQ0FBQyxDQUFDLENBQ0gsQUFFRCxHQUFLLE9BQU8sQ0FBRztBQUVkLE9BQU8sR0FBRyxDQUFFLEtBQUssSUFBSSxFQUFFLENBQUEsQ0FBRyxLQUFLLENBQUUsU0FBUyxDQUFFLElBQUksRUFBRSxDQUFDLEFBRW5ELEtBQVEsQ0FBQyxHQUFHLEdBQUcsQ0FBRSxDQUFDLEVBQUUsRUFBRyxDQUN0QixJQUFJLEdBQUcsSUFBSSxDQUFFLENBQUMsQ0FBRSxDQUFDLEFBQ2pCLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxLQUFLLENBQUMsS0FBTSxJQUFJLENBQUMsU0FBUyxDQUM1QyxDQUFFLEdBQUcsR0FBRyxJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQSxDQUFHLE9BQU8sQ0FBRSxNQUFNLENBQUUsR0FBRyxDQUFFLENBQ3JELEdBQUcsQ0FBQSxBQUNILENBQUMsQUFFRixHQUFLLEdBQUcsQ0FBRyxDQUNWLENBQUMsR0FBRyxDQUFDLENBQUMsQUFDTixNQUFTLEtBQUssR0FBRyxPQUFPLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBSSxDQUNoQyxHQUFLLEdBQUcsQ0FBQyxPQUFPLENBQUUsR0FBRyxHQUFHLEtBQUssR0FBRyxHQUFHLENBQUUsR0FBRyxDQUFDLENBQUcsQ0FDM0MsR0FBRyxJQUFJLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FDbkIsQ0FDRDtBQUdELFVBQVUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFFLEdBQUcsQ0FBRSxDQUFDLEFBQ2hDLEdBQUssSUFBSSxDQUFDLFNBQVMsS0FBSyxVQUFVLENBQUcsQ0FDcEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxVQUFVLENBQUMsQ0FDNUIsQ0FDRCxDQUNELENBQ0QsQUFFRCxPQUFPLElBQUksQ0FBQyxDQUNaLENBRUQsV0FBVyxDQUFFLHFCQUFVLEtBQUssQ0FBRyxDQUM5QixJQUFJLE9BQU8sQ0FBRSxJQUFJLENBQUUsR0FBRyxDQUFFLEtBQUssQ0FBRSxDQUFDLENBQUUsVUFBVSxDQUMzQyxDQUFDLENBQUcsQ0FBQyxDQUNMLEdBQUcsQ0FBRyxJQUFJLENBQUMsTUFBTSxDQUNqQixPQUFPLENBQUcsU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLEtBQUssQ0FBQyxBQUV4RSxHQUFLLE1BQU0sQ0FBQyxVQUFVLENBQUUsS0FBSyxDQUFFLENBQUcsQ0FDakMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVUsQ0FBQyxDQUFHLENBQzlCLE1BQU0sQ0FBRSxJQUFJLENBQUUsQ0FBQyxXQUFXLENBQUUsS0FBSyxDQUFDLElBQUksQ0FBRSxJQUFJLENBQUUsQ0FBQyxDQUFFLElBQUksQ0FBQyxTQUFTLENBQUUsQ0FBRSxDQUFDLENBQ3BFLENBQUMsQ0FBQyxDQUNILEFBQ0QsR0FBSyxPQUFPLENBQUcsQ0FDZCxPQUFPLEdBQUcsQ0FBRSxLQUFLLElBQUksRUFBRSxDQUFBLENBQUcsS0FBSyxDQUFFLFNBQVMsQ0FBRSxJQUFJLEVBQUUsQ0FBQyxBQUVuRCxLQUFRLENBQUMsR0FBRyxHQUFHLENBQUUsQ0FBQyxFQUFFLEVBQUcsQ0FDdEIsSUFBSSxHQUFHLElBQUksQ0FBRSxDQUFDLENBQUUsQ0FBQztBQUVqQixHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsS0FBSyxDQUFDLEtBQU0sSUFBSSxDQUFDLFNBQVMsQ0FDNUMsQ0FBRSxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUEsQ0FBRyxPQUFPLENBQUUsTUFBTSxDQUFFLEdBQUcsQ0FBRSxDQUNyRCxFQUFFLENBQUEsQUFDRixDQUFDLEFBRUYsR0FBSyxHQUFHLENBQUcsQ0FDVixDQUFDLEdBQUcsQ0FBQyxDQUFDLEFBQ04sTUFBUyxLQUFLLEdBQUcsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUk7QUFFaEMsTUFBUSxHQUFHLENBQUMsT0FBTyxDQUFFLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxDQUFFLElBQUksQ0FBQyxFQUFHLENBQy9DLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFFLEdBQUcsR0FBRyxLQUFLLEdBQUcsR0FBRyxDQUFFLEdBQUcsQ0FBRSxDQUFDLENBQzVDLENBQ0Q7QUFHRCxVQUFVLEdBQUcsS0FBSyxDQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUUsR0FBRyxDQUFFLENBQUcsRUFBRSxDQUFDLEFBQzdDLEdBQUssSUFBSSxDQUFDLFNBQVMsS0FBSyxVQUFVLENBQUcsQ0FDcEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxVQUFVLENBQUMsQ0FDNUIsQ0FDRCxDQUNELENBQ0QsQUFFRCxPQUFPLElBQUksQ0FBQyxDQUNaLENBRUQsV0FBVyxDQUFFLHFCQUFVLEtBQUssQ0FBRSxRQUFRLENBQUcsQ0FDeEMsSUFBSSxJQUFJLENBQUcsT0FBTyxLQUFLLENBQUMsQUFFeEIsR0FBSyxPQUFPLFFBQVEsS0FBSyxTQUFTLElBQUksSUFBSSxLQUFLLFFBQVEsQ0FBRyxDQUN6RCxPQUFPLFFBQVEsQ0FBRyxJQUFJLENBQUMsUUFBUSxDQUFFLEtBQUssQ0FBRSxDQUFHLElBQUksQ0FBQyxXQUFXLENBQUUsS0FBSyxDQUFFLENBQUMsQ0FDckUsQUFFRCxHQUFLLE1BQU0sQ0FBQyxVQUFVLENBQUUsS0FBSyxDQUFFLENBQUcsQ0FDakMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVUsQ0FBQyxDQUFHLENBQzlCLE1BQU0sQ0FBRSxJQUFJLENBQUUsQ0FBQyxXQUFXLENBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUUsQ0FBQyxDQUFFLElBQUksQ0FBQyxTQUFTLENBQUUsUUFBUSxDQUFDLENBQUUsUUFBUSxDQUFFLENBQUMsQ0FDdEYsQ0FBQyxDQUFDLENBQ0gsQUFFRCxPQUFPLElBQUksQ0FBQyxJQUFJ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QUMsT0FBTyxDQUFFLEdBQUcsQ0FBRSxDQUFHO0FBRTVCLE1BQU0sQ0FBQyxJQUFJLENBQUUsR0FBRyxDQUFFLFNBQVUsQ0FBQyxDQUFFLENBQUMsQ0FBRyxDQUNsQyxHQUFLLFdBQVcsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFFLE1BQU0sQ0FBRSxDQUFHO0FBRTdDLEdBQUcsQ0FBRSxNQUFNLENBQUUsQ0FBQyxDQUFFLENBQUMsQ0FFakIsS0FBTTtBQUVOLFdBQVcsQ0FBRSxNQUFNLEdBQUcsR0FBRyxJQUFLLE9BQU8sQ0FBQyxLQUFLLFFBQVEsQ0FBRyxDQUFDLENBQUcsRUFBRSxDQUFBLEFBQUUsR0FBRyxHQUFHLENBQUUsQ0FBQyxDQUFFLFdBQVcsQ0FBRSxHQUFHLENBQUUsQ0FBQyxDQUM1RixDQUNELENBQUMsQ0FBQyxDQUVILEtBQU0sR0FBSyxDQUFDLFdBQVcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFFLEdBQUcsQ0FBRSxLQUFLLFFBQVEsQ0FBRztBQUU3RCxJQUFNLElBQUksSUFBSSxHQUFHLEVBQUcsQ0FDbkIsV0FBVyxDQUFFLE1BQU0sR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLEdBQUcsQ0FBRSxHQUFHLENBQUUsSUFBSSxDQUFFLENBQUUsV0FBVyxDQUFFLEdBQUcsQ0FBRSxDQUFDLENBQ3hFLENBRUQsS0FBTTtBQUVOLEdBQUcsQ0FBRSxNQUFNLENBQUUsR0FBRyxDQUFFLENBQUMsQ0FDbkIsQ0FDRDs7QUFJRCxNQUFNLENBQUMsS0FBSyxHQUFHLFNBQVUsQ0FBQyxDQUFFLFdBQVcsQ0FBRyxDQUN6QyxJQUFJLE1BQU0sQ0FDVCxDQUFDLENBQUcsRUFBRSxDQUNOLEdBQUcsQ0FBRyxTQUFOLEdBQUcsQ0FBYSxHQUFHLENBQUUsS0FBSyxDQUFHO0FBRTVCLEtBQUssR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFFLEtBQUssQ0FBRSxDQUFHLEtBQUssRUFBRSxDQUFLLEtBQUssSUFBSSxJQUFJLENBQUcsRUFBRSxDQUFHLEtBQUssQUFBRSxDQUFDLEFBQzlFLENBQUMsQ0FBRSxDQUFD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QUksQ0FBQyxJQUFJLENBQUMsRUFBQztBQUFDLFdBQUcsQ0FBQyxHQUFDLEVBQUUsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sSUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUEsQUFBQyxDQUFBLEVBQUMsS0FBSSxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLEtBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLFVBQVUsQ0FBQyxHQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBQyxDQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBQyxDQUFDLEtBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxJQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBVyxPQUFPLEtBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLEFBQUMsRUFBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFBLEFBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFDLEVBQUUsR0FBQyxLQUFLLENBQUEsR0FBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7S0FBQztHQUFDLFNBQVMsQ0FBQyxHQUFFO0FBQUMsV0FBTSxVQUFVLElBQUUsT0FBTyxDQUFDLENBQUMsYUFBYSxHQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyw0QkFBNEIsRUFBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUMsU0FBUyxDQUFDLENBQUE7R0FBQyxTQUFTLENBQUMsR0FBRTtBQUFDLFFBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBTyxDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsS0FBSyxHQUFDLE1BQU0sQ0FBQyxFQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUMsQ0FBQyxDQUFDLENBQUEsQUFBQyxFQUFDLENBQUMsQ0FBQSxDQUFBO0dBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsUUFBSSxDQUFDO1FBQUMsQ0FBQztRQUFDLENBQUM7UUFBQyxDQUFDO1FBQUMsQ0FBQyxHQUFDLFdBQVc7UUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUFDLENBQUMsR0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFHLFFBQVEsQ0FBQyxDQUFDLEVBQUMsRUFBRSxDQUFDLEVBQUMsT0FBSyxDQUFDLEVBQUUsR0FBRSxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLElBQUUsQ0FBQyxHQUFDLENBQUMsQ0FBQSxBQUFDLEVBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFPLENBQUMsR0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksR0FBQyxVQUFVLEVBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBQyxHQUFHLEdBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFBLENBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFVBQVUsR0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLE9BQU8sR0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksS0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUMsUUFBUSxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBQyxRQUFRLEVBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQSxBQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLElBQUksSUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQSxHQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQTtHQUFDLElBQUksQ0FBQyxHQUFDLEVBQUU7TUFBQyxDQUFDLEdBQUMsRUFBQyxRQUFRLEVBQUMsT0FBTyxFQUFDLE9BQU8sRUFBQyxFQUFDLFdBQVcsRUFBQyxFQUFFLEVBQUMsYUFBYSxFQUFDLENBQUMsQ0FBQyxFQUFDLGFBQWEsRUFBQyxDQUFDLENBQUMsRUFBQyxXQUFXLEVBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLEVBQUUsRUFBQyxZQUFTLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxVQUFJLENBQUMsR0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFlBQVU7QUFBQyxTQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7T0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFBO0tBQUMsRUFBQyxPQUFPLEVBQUMsaUJBQVMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxPQUFDLENBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxFQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsQ0FBQyxFQUFDLE9BQU8sRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFBO0tBQUMsRUFBQyxZQUFZLEVBQUMsc0JBQVMsQ0FBQyxFQUFDO0FBQUMsT0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksRUFBQyxJQUFJLEVBQUMsRUFBRSxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUE7S0FBQyxFQUFDO01BQUMsU0FBUyxHQUFDLHFCQUFVLEVBQUUsQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFDLENBQUMsRUFBQyxTQUFTLEdBQUMsSUFBSSxTQUFTLEVBQUEsQ0FBQyxJQUFJLENBQUMsR0FBQyxFQUFFO01BQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxlQUFlO01BQUMsQ0FBQyxHQUFDLEtBQUssS0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUEsVUFBUyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsYUFBUyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLFVBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDO1VBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsZUFBZSxDQUFDLFFBQU8sQ0FBQyxDQUFDLFNBQVMsR0FBQyxVQUFVLEdBQUMsQ0FBQyxHQUFDLFVBQVUsRUFBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFBLENBQUE7S0FBQyxTQUFTLENBQUMsR0FBRTtBQUFDLFVBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTSxRQUFRLElBQUUsT0FBTyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBQyxDQUFDLENBQUE7S0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDO0FBQUMsVUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLElBQUUsT0FBTyxDQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUEsQUFBQyxFQUFDLFFBQVEsSUFBRSxPQUFPLENBQUMsS0FBRyxDQUFDLEdBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQSxBQUFDLEVBQUMsQ0FBQyxDQUFDLFFBQVEsR0FBQyxDQUFDLEdBQUMsR0FBRyxHQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7S0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUM7QUFBQyxVQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBTyxDQUFDLEtBQUcsQ0FBQyxHQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUEsQUFBQyxFQUFDLENBQUMsQ0FBQSxDQUFBO0tBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxXQUFHLENBQUMsS0FBRyxDQUFDLEdBQUMsQ0FBQyxDQUFBLEFBQUMsRUFBQyxDQUFDLENBQUEsRUFBQyxPQUFPLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFHLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsQUFBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQU8sQ0FBQyxHQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUUsU0FBUyxFQUFFLEdBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLElBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsTUFBTSxHQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFBO0tBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQztBQUFDLFdBQUcsQ0FBQyxLQUFHLENBQUMsR0FBQyxDQUFDLENBQUEsQUFBQyxFQUFDLENBQUMsQ0FBQSxFQUFDLE9BQU8sQ0FBQyxDQUFDLHNCQUFzQixFQUFFLENBQUMsQ0FBQyxHQUFDLENBQUMsSUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsTUFBTSxFQUFDLENBQUMsR0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtLQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUM7QUFBQyxPQUFDLENBQUMsS0FBSyxLQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxVQUFVLEdBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBQyxDQUFDLENBQUMsVUFBVSxHQUFDLENBQUMsQ0FBQyxzQkFBc0IsRUFBQyxDQUFDLENBQUMsSUFBSSxHQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQSxBQUFDLEVBQUMsQ0FBQyxDQUFDLGFBQWEsR0FBQyxVQUFTLENBQUMsRUFBQztBQUFDLGVBQU8sQ0FBQyxDQUFDLFdBQVcsR0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFBO09BQUMsRUFBQyxDQUFDLENBQUMsc0JBQXNCLEdBQUMsUUFBUSxDQUFDLEtBQUssRUFBQywwRUFBMEUsR0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFDLFVBQVMsQ0FBQyxFQUFDO0FBQUMsZ0JBQU8sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBQyxLQUFLLEdBQUMsQ0FBQyxHQUFDLElBQUksQ0FBQSxDQUFBO09BQUMsQ0FBQyxHQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUE7S0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUM7QUFBQyxPQUFDLEtBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQSxBQUFDLENBQUMsSUFBSSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFFLENBQUMsSUFBRSxDQUFDLENBQUMsTUFBTSxLQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUMsbUpBQW1KLENBQUMsQ0FBQSxBQUFDLEVBQUMsQ0FBQyxJQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFBLENBQUE7S0FBQyxJQUFJLENBQUM7UUFBQyxDQUFDO1FBQUMsQ0FBQyxHQUFDLE9BQU87UUFBQyxDQUFDLEdBQUMsQ0FBQyxDQUFDLEtBQUssSUFBRSxFQUFFO1FBQUMsQ0FBQyxHQUFDLG9FQUFvRTtRQUFDLENBQUMsR0FBQyw0R0FBNEc7UUFBQyxDQUFDLEdBQUMsWUFBWTtRQUFDLENBQUMsR0FBQyxDQUFDO1FBQUMsQ0FBQyxHQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUEsWUFBVTtBQUFDLFVBQUc7QUFBQyxZQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUMsYUFBYSxFQUFDLENBQUMsR0FBQyxRQUFRLElBQUcsQ0FBQyxFQUFDLENBQUMsR0FBQyxDQUFDLElBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLElBQUUsQ0FBQSxZQUFVO0FBQUMsV0FBQyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxPQUFNLFdBQVcsSUFBRSxPQUFPLENBQUMsQ0FBQyxTQUFTLElBQUUsV0FBVyxJQUFFLE9BQU8sQ0FBQyxDQUFDLHNCQUFzQixJQUFFLFdBQVcsSUFBRSxPQUFPLENBQUMsQ0FBQyxhQUFhLENBQUE7U0FBQyxDQUFBLEVBQUUsQ0FBQTtPQUFDLENBQUEsT0FBTSxDQUFDLEVBQUM7QUFBQyxTQUFDLEdBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFBO09BQUM7S0FBQyxDQUFBLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBQyxFQUFDLFFBQVEsRUFBQyxDQUFDLENBQUMsUUFBUSxJQUFFLHlMQUF5TCxFQUFDLE9BQU8sRUFBQyxDQUFDLEVBQUMsT0FBTyxFQUFDLENBQUMsQ0FBQyxPQUFPLEtBQUcsQ0FBQyxDQUFDLEVBQUMsdUJBQXVCLEVBQUMsQ0FBQyxFQUFDLFdBQVcsRUFBQyxDQUFDLENBQUMsV0FBVyxLQUFHLENBQUMsQ0FBQyxFQUFDLElBQUksRUFBQyxTQUFTLEVBQUMsWUFBWSxFQUFDLENBQUMsRUFBQyxhQUFhLEVBQUMsQ0FBQyxFQUFDLHNCQUFzQixFQUFDLENBQUMsRUFBQyxXQUFXLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFDLFFBQVEsSUFBRSxPQUFPLE1BQU0sSUFBRSxNQUFNLENBQUMsT0FBTyxLQUFHLE1BQU0sQ0FBQyxPQUFPLEdBQUMsQ0FBQyxDQUFBLEFBQUMsQ0FBQTtHQUFDLENBQUEsQ0FBQyxXQUFXLElBQUUsT0FBTyxDQUFDLEdBQUMsQ0FBQyxHQUFDLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBQyxDQUFBLFlBQVU7QUFBQyxRQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsVUFBVSxJQUFFLENBQUMsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLEdBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxVQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBRSxDQUFDLENBQUMsQ0FBQTtLQUFDLEdBQUMsVUFBUyxDQUFDLEVBQUM7QUFBQyxVQUFJLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFPLENBQUMsQ0FBQyxTQUFTLEdBQUMsQ0FBQyxHQUFDLHlDQUF5QyxFQUFDLFVBQVMsQ0FBQyxFQUFDO0FBQUMsU0FBQyxHQUFDLFVBQVUsSUFBRSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsR0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxFQUFDLElBQUksQ0FBQyxHQUFDLENBQUMsQ0FBQyxZQUFZLENBQUEsQ0FBRSxRQUFRLENBQUE7T0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFBLENBQUE7S0FBQyxDQUFBO0dBQUMsQ0FBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBQyxDQUFDLEVBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFFLEVBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFDLE9BQU8sQ0FBQyxDQUFDLFlBQVksQ0FBQyxLQUFJLElBQUksQ0FBQyxHQUFDLENBQUMsRUFBQyxDQUFDLEdBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxFQUFFLEVBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUMsU0FBUyxDQUFBO0NBQUMsQ0FBQSxDQUFDLE1BQU0sRUFBQyxRQUFRLENBQUMsQ0FBQyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIvKmdsb2JhbCBqUXVlcnkgKi9cbi8qanNoaW50IGJyb3dzZXI6dHJ1ZSAqL1xuLyohXG4qIEZpdFZpZHMgMS4xXG4qXG4qIENvcHlyaWdodCAyMDEzLCBDaHJpcyBDb3lpZXIgLSBodHRwOi8vY3NzLXRyaWNrcy5jb20gKyBEYXZlIFJ1cGVydCAtIGh0dHA6Ly9kYXZlcnVwZXJ0LmNvbVxuKiBDcmVkaXQgdG8gVGhpZXJyeSBLb2JsZW50eiAtIGh0dHA6Ly93d3cuYWxpc3RhcGFydC5jb20vYXJ0aWNsZXMvY3JlYXRpbmctaW50cmluc2ljLXJhdGlvcy1mb3ItdmlkZW8vXG4qIFJlbGVhc2VkIHVuZGVyIHRoZSBXVEZQTCBsaWNlbnNlIC0gaHR0cDovL3NhbS56b3kub3JnL3d0ZnBsL1xuKlxuKi9cblxuKGZ1bmN0aW9uKCAkICl7XG5cbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgJC5mbi5maXRWaWRzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG4gICAgdmFyIHNldHRpbmdzID0ge1xuICAgICAgY3VzdG9tU2VsZWN0b3I6IG51bGxcbiAgICB9O1xuXG4gICAgaWYoIWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmaXQtdmlkcy1zdHlsZScpKSB7XG4gICAgICAvLyBhcHBlbmRTdHlsZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS90b2RkbW90dG8vZmx1aWR2aWRzL2Jsb2IvbWFzdGVyL2Rpc3QvZmx1aWR2aWRzLmpzXG4gICAgICB2YXIgaGVhZCA9IGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcbiAgICAgIHZhciBjc3MgPSAnLmZsdWlkLXdpZHRoLXZpZGVvLXdyYXBwZXJ7d2lkdGg6MTAwJTtwb3NpdGlvbjpyZWxhdGl2ZTtwYWRkaW5nOjA7fS5mbHVpZC13aWR0aC12aWRlby13cmFwcGVyIGlmcmFtZSwuZmx1aWQtd2lkdGgtdmlkZW8td3JhcHBlciBvYmplY3QsLmZsdWlkLXdpZHRoLXZpZGVvLXdyYXBwZXIgZW1iZWQge3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO30nO1xuICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgZGl2LmlubmVySFRNTCA9ICc8cD54PC9wPjxzdHlsZSBpZD1cImZpdC12aWRzLXN0eWxlXCI+JyArIGNzcyArICc8L3N0eWxlPic7XG4gICAgICBoZWFkLmFwcGVuZENoaWxkKGRpdi5jaGlsZE5vZGVzWzFdKTtcbiAgICB9XG5cbiAgICBpZiAoIG9wdGlvbnMgKSB7XG4gICAgICAkLmV4dGVuZCggc2V0dGluZ3MsIG9wdGlvbnMgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICB2YXIgc2VsZWN0b3JzID0gW1xuICAgICAgICBcImlmcmFtZVtzcmMqPSdwbGF5ZXIudmltZW8uY29tJ11cIixcbiAgICAgICAgXCJpZnJhbWVbc3JjKj0neW91dHViZS5jb20nXVwiLFxuICAgICAgICBcImlmcmFtZVtzcmMqPSd5b3V0dWJlLW5vY29va2llLmNvbSddXCIsXG4gICAgICAgIFwiaWZyYW1lW3NyYyo9J2tpY2tzdGFydGVyLmNvbSddW3NyYyo9J3ZpZGVvLmh0bWwnXVwiLFxuICAgICAgICBcIm9iamVjdFwiLFxuICAgICAgICBcImVtYmVkXCJcbiAgICAgIF07XG5cbiAgICAgIGlmIChzZXR0aW5ncy5jdXN0b21TZWxlY3Rvcikge1xuICAgICAgICBzZWxlY3RvcnMucHVzaChzZXR0aW5ncy5jdXN0b21TZWxlY3Rvcik7XG4gICAgICB9XG5cbiAgICAgIHZhciAkYWxsVmlkZW9zID0gJCh0aGlzKS5maW5kKHNlbGVjdG9ycy5qb2luKCcsJykpO1xuICAgICAgJGFsbFZpZGVvcyA9ICRhbGxWaWRlb3Mubm90KFwib2JqZWN0IG9iamVjdFwiKTsgLy8gU3dmT2JqIGNvbmZsaWN0IHBhdGNoXG5cbiAgICAgICRhbGxWaWRlb3MuZWFjaChmdW5jdGlvbigpe1xuICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xuICAgICAgICBpZiAodGhpcy50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdlbWJlZCcgJiYgJHRoaXMucGFyZW50KCdvYmplY3QnKS5sZW5ndGggfHwgJHRoaXMucGFyZW50KCcuZmx1aWQtd2lkdGgtdmlkZW8td3JhcHBlcicpLmxlbmd0aCkgeyByZXR1cm47IH1cbiAgICAgICAgdmFyIGhlaWdodCA9ICggdGhpcy50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdvYmplY3QnIHx8ICgkdGhpcy5hdHRyKCdoZWlnaHQnKSAmJiAhaXNOYU4ocGFyc2VJbnQoJHRoaXMuYXR0cignaGVpZ2h0JyksIDEwKSkpICkgPyBwYXJzZUludCgkdGhpcy5hdHRyKCdoZWlnaHQnKSwgMTApIDogJHRoaXMuaGVpZ2h0KCksXG4gICAgICAgICAgICB3aWR0aCA9ICFpc05hTihwYXJzZUludCgkdGhpcy5hdHRyKCd3aWR0aCcpLCAxMCkpID8gcGFyc2VJbnQoJHRoaXMuYXR0cignd2lkdGgnKSwgMTApIDogJHRoaXMud2lkdGgoKSxcbiAgICAgICAgICAgIGFzcGVjdFJhdGlvID0gaGVpZ2h0IC8gd2lkdGg7XG4gICAgICAgIGlmKCEkdGhpcy5hdHRyKCdpZCcpKXtcbiAgICAgICAgICB2YXIgdmlkZW9JRCA9ICdmaXR2aWQnICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKjk5OTk5OSk7XG4gICAgICAgICAgJHRoaXMuYXR0cignaWQnLCB2aWRlb0lEKTtcbiAgICAgICAgfVxuICAgICAgICAkdGhpcy53cmFwKCc8ZGl2IGNsYXNzPVwiZmx1aWQtd2lkdGgtdmlkZW8td3JhcHBlclwiPjwvZGl2PicpLnBhcmVudCgnLmZsdWlkLXdpZHRoLXZpZGVvLXdyYXBwZXInKS5jc3MoJ3BhZGRpbmctdG9wJywgKGFzcGVjdFJhdGlvICogMTAwKStcIiVcIik7XG4gICAgICAgICR0aGlzLnJlbW92ZUF0dHIoJ2hlaWdodCcpLnJlbW92ZUF0dHIoJ3dpZHRoJyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbi8vIFdvcmtzIHdpdGggZWl0aGVyIGpRdWVyeSBvciBaZXB0b1xufSkoIHdpbmRvdy5qUXVlcnkgfHwgd2luZG93LlplcHRvICk7XG4iLCIvKlxuICogalBsYXllciBQbHVnaW4gZm9yIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnlcbiAqIGh0dHA6Ly93d3cuanBsYXllci5vcmdcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMDkgLSAyMDE0IEhhcHB5d29ybSBMdGRcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVRcbiAqXG4gKiBBdXRob3I6IE1hcmsgSiBQYW5hZ2hpc3RvblxuICogVmVyc2lvbjogMi45LjJcbiAqIERhdGU6IDE0dGggRGVjZW1iZXIgMjAxNFxuICovXG5cbi8qIFN1cHBvcnQgZm9yIFplcHRvIDEuMCBjb21waWxlZCB3aXRoIG9wdGlvbmFsIGRhdGEgbW9kdWxlLlxuICogRm9yIEFNRCBvciBOT0RFL0NvbW1vbkpTIHN1cHBvcnQsIHlvdSB3aWxsIG5lZWQgdG8gbWFudWFsbHkgc3dpdGNoIHRoZSByZWxhdGVkIDIgbGluZXMgaW4gdGhlIGNvZGUgYmVsb3cuXG4gKiBTZWFyY2ggdGVybXM6IFwialF1ZXJ5IFN3aXRjaFwiIGFuZCBcIlplcHRvIFN3aXRjaFwiXG4gKi9cblxuKGZ1bmN0aW9uKCAkICkge1xuXG5cdC8vIEFkYXB0ZWQgZnJvbSBqcXVlcnkudWkud2lkZ2V0LmpzICgxLjguNyk6ICQud2lkZ2V0LmJyaWRnZSAtIFR3ZWFrZWQgJC5kYXRhKHRoaXMsWFlaKSB0byAkKHRoaXMpLmRhdGEoWFlaKSBmb3IgWmVwdG9cblx0JC5mbi5qUGxheWVyID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cdFx0dmFyIG5hbWUgPSBcImpQbGF5ZXJcIjtcblx0XHR2YXIgaXNNZXRob2RDYWxsID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIsXG5cdFx0XHRhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMSApLFxuXHRcdFx0cmV0dXJuVmFsdWUgPSB0aGlzO1xuXG5cdFx0Ly8gYWxsb3cgbXVsdGlwbGUgaGFzaGVzIHRvIGJlIHBhc3NlZCBvbiBpbml0XG5cdFx0b3B0aW9ucyA9ICFpc01ldGhvZENhbGwgJiYgYXJncy5sZW5ndGggP1xuXHRcdFx0JC5leHRlbmQuYXBwbHkoIG51bGwsIFsgdHJ1ZSwgb3B0aW9ucyBdLmNvbmNhdChhcmdzKSApIDpcblx0XHRcdG9wdGlvbnM7XG5cblx0XHQvLyBwcmV2ZW50IGNhbGxzIHRvIGludGVybmFsIG1ldGhvZHNcblx0XHRpZiAoIGlzTWV0aG9kQ2FsbCAmJiBvcHRpb25zLmNoYXJBdCggMCApID09PSBcIl9cIiApIHtcblx0XHRcdHJldHVybiByZXR1cm5WYWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGlzTWV0aG9kQ2FsbCApIHtcblx0XHRcdHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGluc3RhbmNlID0gJCh0aGlzKS5kYXRhKCBuYW1lICksXG5cdFx0XHRcdFx0bWV0aG9kVmFsdWUgPSBpbnN0YW5jZSAmJiAkLmlzRnVuY3Rpb24oIGluc3RhbmNlW29wdGlvbnNdICkgP1xuXHRcdFx0XHRcdFx0aW5zdGFuY2VbIG9wdGlvbnMgXS5hcHBseSggaW5zdGFuY2UsIGFyZ3MgKSA6XG5cdFx0XHRcdFx0XHRpbnN0YW5jZTtcblx0XHRcdFx0aWYgKCBtZXRob2RWYWx1ZSAhPT0gaW5zdGFuY2UgJiYgbWV0aG9kVmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm5WYWx1ZSA9IG1ldGhvZFZhbHVlO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGluc3RhbmNlID0gJCh0aGlzKS5kYXRhKCBuYW1lICk7XG5cdFx0XHRcdGlmICggaW5zdGFuY2UgKSB7XG5cdFx0XHRcdFx0Ly8gaW5zdGFuY2Uub3B0aW9uKCBvcHRpb25zIHx8IHt9ICkuX2luaXQoKTsgLy8gT3JpZyBqcXVlcnkudWkud2lkZ2V0LmpzIGNvZGU6IE5vdCByZWNvbW1lbmQgZm9yIGpQbGF5ZXIuIGllLiwgQXBwbHlpbmcgbmV3IG9wdGlvbnMgdG8gYW4gZXhpc3RpbmcgaW5zdGFuY2UgKHZpYSB0aGUgalBsYXllciBjb25zdHJ1Y3RvcikgYW5kIHBlcmZvcm1pbmcgdGhlIF9pbml0KCkuIFRoZSBfaW5pdCgpIGlzIHdoYXQgY29uY2VybnMgbWUuIEl0IHdvdWxkIGxlYXZlIGEgbG90IG9mIGV2ZW50IGhhbmRsZXJzIGFjdGluZyBvbiBqUGxheWVyIGluc3RhbmNlIGFuZCB0aGUgaW50ZXJmYWNlLlxuXHRcdFx0XHRcdGluc3RhbmNlLm9wdGlvbiggb3B0aW9ucyB8fCB7fSApOyAvLyBUaGUgbmV3IGNvbnN0cnVjdG9yIG9ubHkgY2hhbmdlcyB0aGUgb3B0aW9ucy4gQ2hhbmdpbmcgb3B0aW9ucyBvbmx5IGhhcyBiYXNpYyBzdXBwb3J0IGF0bS5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQkKHRoaXMpLmRhdGEoIG5hbWUsIG5ldyAkLmpQbGF5ZXIoIG9wdGlvbnMsIHRoaXMgKSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0dXJuVmFsdWU7XG5cdH07XG5cblx0JC5qUGxheWVyID0gZnVuY3Rpb24oIG9wdGlvbnMsIGVsZW1lbnQgKSB7XG5cdFx0Ly8gYWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IGluaXRpYWxpemluZyBmb3Igc2ltcGxlIGluaGVyaXRhbmNlXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0dGhpcy5lbGVtZW50ID0gJChlbGVtZW50KTtcblx0XHRcdHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LFxuXHRcdFx0XHR0aGlzLm9wdGlvbnMsXG5cdFx0XHRcdG9wdGlvbnNcblx0XHRcdCk7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0XHR0aGlzLmVsZW1lbnQuYmluZCggXCJyZW1vdmUualBsYXllclwiLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5kZXN0cm95KCk7XG5cdFx0XHR9KTtcblx0XHRcdHRoaXMuX2luaXQoKTtcblx0XHR9XG5cdH07XG5cdC8vIEVuZCBvZjogKEFkYXB0ZWQgZnJvbSBqcXVlcnkudWkud2lkZ2V0LmpzICgxLjguNykpXG5cblx0Ly8gWmVwdG8gaXMgbWlzc2luZyBvbmUgb2YgdGhlIGFuaW1hdGlvbiBtZXRob2RzLlxuXHRpZih0eXBlb2YgJC5mbi5zdG9wICE9PSAnZnVuY3Rpb24nKSB7XG5cdFx0JC5mbi5zdG9wID0gZnVuY3Rpb24oKSB7fTtcblx0fVxuXG5cdC8vIEVtdWxhdGVkIEhUTUw1IG1ldGhvZHMgYW5kIHByb3BlcnRpZXNcblx0JC5qUGxheWVyLmVtdWxhdGVNZXRob2RzID0gXCJsb2FkIHBsYXkgcGF1c2VcIjtcblx0JC5qUGxheWVyLmVtdWxhdGVTdGF0dXMgPSBcInNyYyByZWFkeVN0YXRlIG5ldHdvcmtTdGF0ZSBjdXJyZW50VGltZSBkdXJhdGlvbiBwYXVzZWQgZW5kZWQgcGxheWJhY2tSYXRlXCI7XG5cdCQualBsYXllci5lbXVsYXRlT3B0aW9ucyA9IFwibXV0ZWQgdm9sdW1lXCI7XG5cblx0Ly8gUmVzZXJ2ZWQgZXZlbnQgbmFtZXMgZ2VuZXJhdGVkIGJ5IGpQbGF5ZXIgdGhhdCBhcmUgbm90IHBhcnQgb2YgdGhlIEhUTUw1IE1lZGlhIGVsZW1lbnQgc3BlY1xuXHQkLmpQbGF5ZXIucmVzZXJ2ZWRFdmVudCA9IFwicmVhZHkgZmxhc2hyZXNldCByZXNpemUgcmVwZWF0IGVycm9yIHdhcm5pbmdcIjtcblxuXHQvLyBFdmVudHMgZ2VuZXJhdGVkIGJ5IGpQbGF5ZXJcblx0JC5qUGxheWVyLmV2ZW50ID0ge307XG5cdCQuZWFjaChcblx0XHRbXG5cdFx0XHQncmVhZHknLFxuXHRcdFx0J3NldG1lZGlhJywgLy8gRmlyZXMgd2hlbiB0aGUgbWVkaWEgaXMgc2V0XG5cdFx0XHQnZmxhc2hyZXNldCcsIC8vIFNpbWlsYXIgdG8gdGhlIHJlYWR5IGV2ZW50IGlmIHRoZSBGbGFzaCBzb2x1dGlvbiBpcyBzZXQgdG8gZGlzcGxheTpub25lIGFuZCB0aGVuIHNob3duIGFnYWluIG9yIGlmIGl0J3MgcmVsb2FkZWQgZm9yIGFub3RoZXIgcmVhc29uIGJ5IHRoZSBicm93c2VyLiBGb3IgZXhhbXBsZSwgdXNpbmcgQ1NTIHBvc2l0aW9uOmZpeGVkIG9uIEZpcmVmb3ggZm9yIHRoZSBmdWxsIHNjcmVlbiBmZWF0dXJlLlxuXHRcdFx0J3Jlc2l6ZScsIC8vIE9jY3VycyB3aGVuIHRoZSBzaXplIGNoYW5nZXMgdGhyb3VnaCBhIGZ1bGwvcmVzdG9yZSBzY3JlZW4gb3BlcmF0aW9uIG9yIGlmIHRoZSBzaXplL3NpemVGdWxsIG9wdGlvbnMgYXJlIGNoYW5nZWQuXG5cdFx0XHQncmVwZWF0JywgLy8gT2NjdXJzIHdoZW4gdGhlIHJlcGVhdCBzdGF0dXMgY2hhbmdlcy4gVXN1YWxseSB0aHJvdWdoIGNsaWNrcyBvbiB0aGUgcmVwZWF0IGJ1dHRvbiBvZiB0aGUgaW50ZXJmYWNlLlxuXHRcdFx0J2NsaWNrJywgLy8gT2NjdXJzIHdoZW4gdGhlIHVzZXIgY2xpY2tzIG9uIG9uZSBvZiB0aGUgZm9sbG93aW5nOiBwb3N0ZXIgaW1hZ2UsIGh0bWwgdmlkZW8sIGZsYXNoIHZpZGVvLlxuXHRcdFx0J2Vycm9yJywgLy8gRXZlbnQgZXJyb3IgY29kZSBpbiBldmVudC5qUGxheWVyLmVycm9yLnR5cGUuIFNlZSAkLmpQbGF5ZXIuZXJyb3Jcblx0XHRcdCd3YXJuaW5nJywgLy8gRXZlbnQgd2FybmluZyBjb2RlIGluIGV2ZW50LmpQbGF5ZXIud2FybmluZy50eXBlLiBTZWUgJC5qUGxheWVyLndhcm5pbmdcblxuXHRcdFx0Ly8gT3RoZXIgZXZlbnRzIG1hdGNoIEhUTUw1IHNwZWMuXG5cdFx0XHQnbG9hZHN0YXJ0Jyxcblx0XHRcdCdwcm9ncmVzcycsXG5cdFx0XHQnc3VzcGVuZCcsXG5cdFx0XHQnYWJvcnQnLFxuXHRcdFx0J2VtcHRpZWQnLFxuXHRcdFx0J3N0YWxsZWQnLFxuXHRcdFx0J3BsYXknLFxuXHRcdFx0J3BhdXNlJyxcblx0XHRcdCdsb2FkZWRtZXRhZGF0YScsXG5cdFx0XHQnbG9hZGVkZGF0YScsXG5cdFx0XHQnd2FpdGluZycsXG5cdFx0XHQncGxheWluZycsXG5cdFx0XHQnY2FucGxheScsXG5cdFx0XHQnY2FucGxheXRocm91Z2gnLFxuXHRcdFx0J3NlZWtpbmcnLFxuXHRcdFx0J3NlZWtlZCcsXG5cdFx0XHQndGltZXVwZGF0ZScsXG5cdFx0XHQnZW5kZWQnLFxuXHRcdFx0J3JhdGVjaGFuZ2UnLFxuXHRcdFx0J2R1cmF0aW9uY2hhbmdlJyxcblx0XHRcdCd2b2x1bWVjaGFuZ2UnXG5cdFx0XSxcblx0XHRmdW5jdGlvbigpIHtcblx0XHRcdCQualBsYXllci5ldmVudFsgdGhpcyBdID0gJ2pQbGF5ZXJfJyArIHRoaXM7XG5cdFx0fVxuXHQpO1xuXG5cdCQualBsYXllci5odG1sRXZlbnQgPSBbIC8vIFRoZXNlIEhUTUwgZXZlbnRzIGFyZSBidWJibGVkIHRocm91Z2ggdG8gdGhlIGpQbGF5ZXIgZXZlbnQsIHdpdGhvdXQgYW55IGludGVybmFsIGFjdGlvbi5cblx0XHRcImxvYWRzdGFydFwiLFxuXHRcdC8vIFwicHJvZ3Jlc3NcIiwgLy8galBsYXllciB1c2VzIGludGVybmFsbHkgYmVmb3JlIGJ1YmJsaW5nLlxuXHRcdC8vIFwic3VzcGVuZFwiLCAvLyBqUGxheWVyIHVzZXMgaW50ZXJuYWxseSBiZWZvcmUgYnViYmxpbmcuXG5cdFx0XCJhYm9ydFwiLFxuXHRcdC8vIFwiZXJyb3JcIiwgLy8galBsYXllciB1c2VzIGludGVybmFsbHkgYmVmb3JlIGJ1YmJsaW5nLlxuXHRcdFwiZW1wdGllZFwiLFxuXHRcdFwic3RhbGxlZFwiLFxuXHRcdC8vIFwicGxheVwiLCAvLyBqUGxheWVyIHVzZXMgaW50ZXJuYWxseSBiZWZvcmUgYnViYmxpbmcuXG5cdFx0Ly8gXCJwYXVzZVwiLCAvLyBqUGxheWVyIHVzZXMgaW50ZXJuYWxseSBiZWZvcmUgYnViYmxpbmcuXG5cdFx0XCJsb2FkZWRtZXRhZGF0YVwiLFxuXHRcdC8vIFwibG9hZGVkZGF0YVwiLCAvLyBqUGxheWVyIHVzZXMgaW50ZXJuYWxseSBiZWZvcmUgYnViYmxpbmcuXG5cdFx0Ly8gXCJ3YWl0aW5nXCIsIC8vIGpQbGF5ZXIgdXNlcyBpbnRlcm5hbGx5IGJlZm9yZSBidWJibGluZy5cblx0XHQvLyBcInBsYXlpbmdcIiwgLy8galBsYXllciB1c2VzIGludGVybmFsbHkgYmVmb3JlIGJ1YmJsaW5nLlxuXHRcdFwiY2FucGxheVwiLFxuXHRcdFwiY2FucGxheXRocm91Z2hcIlxuXHRcdC8vIFwic2Vla2luZ1wiLCAvLyBqUGxheWVyIHVzZXMgaW50ZXJuYWxseSBiZWZvcmUgYnViYmxpbmcuXG5cdFx0Ly8gXCJzZWVrZWRcIiwgLy8galBsYXllciB1c2VzIGludGVybmFsbHkgYmVmb3JlIGJ1YmJsaW5nLlxuXHRcdC8vIFwidGltZXVwZGF0ZVwiLCAvLyBqUGxheWVyIHVzZXMgaW50ZXJuYWxseSBiZWZvcmUgYnViYmxpbmcuXG5cdFx0Ly8gXCJlbmRlZFwiLCAvLyBqUGxheWVyIHVzZXMgaW50ZXJuYWxseSBiZWZvcmUgYnViYmxpbmcuXG5cdFx0Ly8gXCJyYXRlY2hhbmdlXCIgLy8galBsYXllciB1c2VzIGludGVybmFsbHkgYmVmb3JlIGJ1YmJsaW5nLlxuXHRcdC8vIFwiZHVyYXRpb25jaGFuZ2VcIiAvLyBqUGxheWVyIHVzZXMgaW50ZXJuYWxseSBiZWZvcmUgYnViYmxpbmcuXG5cdFx0Ly8gXCJ2b2x1bWVjaGFuZ2VcIiAvLyBqUGxheWVyIHVzZXMgaW50ZXJuYWxseSBiZWZvcmUgYnViYmxpbmcuXG5cdF07XG5cblx0JC5qUGxheWVyLnBhdXNlID0gZnVuY3Rpb24oKSB7XG5cdFx0JC5qUGxheWVyLnByb3RvdHlwZS5kZXN0cm95UmVtb3ZlZCgpO1xuXHRcdCQuZWFjaCgkLmpQbGF5ZXIucHJvdG90eXBlLmluc3RhbmNlcywgZnVuY3Rpb24oaSwgZWxlbWVudCkge1xuXHRcdFx0aWYoZWxlbWVudC5kYXRhKFwialBsYXllclwiKS5zdGF0dXMuc3JjU2V0KSB7IC8vIENoZWNrIHRoYXQgbWVkaWEgaXMgc2V0IG90aGVyd2lzZSB3b3VsZCBjYXVzZSBlcnJvciBldmVudC5cblx0XHRcdFx0ZWxlbWVudC5qUGxheWVyKFwicGF1c2VcIik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH07XG5cblx0Ly8gRGVmYXVsdCBmb3IgalBsYXllciBvcHRpb24udGltZUZvcm1hdFxuXHQkLmpQbGF5ZXIudGltZUZvcm1hdCA9IHtcblx0XHRzaG93SG91cjogZmFsc2UsXG5cdFx0c2hvd01pbjogdHJ1ZSxcblx0XHRzaG93U2VjOiB0cnVlLFxuXHRcdHBhZEhvdXI6IGZhbHNlLFxuXHRcdHBhZE1pbjogdHJ1ZSxcblx0XHRwYWRTZWM6IHRydWUsXG5cdFx0c2VwSG91cjogXCI6XCIsXG5cdFx0c2VwTWluOiBcIjpcIixcblx0XHRzZXBTZWM6IFwiXCJcblx0fTtcblx0dmFyIENvbnZlcnRUaW1lID0gZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5pbml0KCk7XG5cdH07XG5cdENvbnZlcnRUaW1lLnByb3RvdHlwZSA9IHtcblx0XHRpbml0OiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMub3B0aW9ucyA9IHtcblx0XHRcdFx0dGltZUZvcm1hdDogJC5qUGxheWVyLnRpbWVGb3JtYXRcblx0XHRcdH07XG5cdFx0fSxcblx0XHR0aW1lOiBmdW5jdGlvbihzKSB7IC8vIGZ1bmN0aW9uIHVzZWQgb24galBsYXllci5wcm90b3R5cGUuX2NvbnZlcnRUaW1lIHRvIGVuYWJsZSBwZXIgaW5zdGFuY2Ugb3B0aW9ucy5cblx0XHRcdHMgPSAocyAmJiB0eXBlb2YgcyA9PT0gJ251bWJlcicpID8gcyA6IDA7XG5cblx0XHRcdHZhciBteVRpbWUgPSBuZXcgRGF0ZShzICogMTAwMCksXG5cdFx0XHRcdGhvdXIgPSBteVRpbWUuZ2V0VVRDSG91cnMoKSxcblx0XHRcdFx0bWluID0gdGhpcy5vcHRpb25zLnRpbWVGb3JtYXQuc2hvd0hvdXIgPyBteVRpbWUuZ2V0VVRDTWludXRlcygpIDogbXlUaW1lLmdldFVUQ01pbnV0ZXMoKSArIGhvdXIgKiA2MCxcblx0XHRcdFx0c2VjID0gdGhpcy5vcHRpb25zLnRpbWVGb3JtYXQuc2hvd01pbiA/IG15VGltZS5nZXRVVENTZWNvbmRzKCkgOiBteVRpbWUuZ2V0VVRDU2Vjb25kcygpICsgbWluICogNjAsXG5cdFx0XHRcdHN0ckhvdXIgPSAodGhpcy5vcHRpb25zLnRpbWVGb3JtYXQucGFkSG91ciAmJiBob3VyIDwgMTApID8gXCIwXCIgKyBob3VyIDogaG91cixcblx0XHRcdFx0c3RyTWluID0gKHRoaXMub3B0aW9ucy50aW1lRm9ybWF0LnBhZE1pbiAmJiBtaW4gPCAxMCkgPyBcIjBcIiArIG1pbiA6IG1pbixcblx0XHRcdFx0c3RyU2VjID0gKHRoaXMub3B0aW9ucy50aW1lRm9ybWF0LnBhZFNlYyAmJiBzZWMgPCAxMCkgPyBcIjBcIiArIHNlYyA6IHNlYyxcblx0XHRcdFx0c3RyVGltZSA9IFwiXCI7XG5cblx0XHRcdHN0clRpbWUgKz0gdGhpcy5vcHRpb25zLnRpbWVGb3JtYXQuc2hvd0hvdXIgPyBzdHJIb3VyICsgdGhpcy5vcHRpb25zLnRpbWVGb3JtYXQuc2VwSG91ciA6IFwiXCI7XG5cdFx0XHRzdHJUaW1lICs9IHRoaXMub3B0aW9ucy50aW1lRm9ybWF0LnNob3dNaW4gPyBzdHJNaW4gKyB0aGlzLm9wdGlvbnMudGltZUZvcm1hdC5zZXBNaW4gOiBcIlwiO1xuXHRcdFx0c3RyVGltZSArPSB0aGlzLm9wdGlvbnMudGltZUZvcm1hdC5zaG93U2VjID8gc3RyU2VjICsgdGhpcy5vcHRpb25zLnRpbWVGb3JtYXQuc2VwU2VjIDogXCJcIjtcblxuXHRcdFx0cmV0dXJuIHN0clRpbWU7XG5cdFx0fVxuXHR9O1xuXHR2YXIgbXlDb252ZXJ0VGltZSA9IG5ldyBDb252ZXJ0VGltZSgpO1xuXHQkLmpQbGF5ZXIuY29udmVydFRpbWUgPSBmdW5jdGlvbihzKSB7XG5cdFx0cmV0dXJuIG15Q29udmVydFRpbWUudGltZShzKTtcblx0fTtcblxuXHQvLyBBZGFwdGluZyBqUXVlcnkgMS40LjQgY29kZSBmb3IgalF1ZXJ5LmJyb3dzZXIuIFJlcXVpcmVkIHNpbmNlIGpRdWVyeSAxLjMuMiBkb2VzIG5vdCBkZXRlY3QgQ2hyb21lIGFzIHdlYmtpdC5cblx0JC5qUGxheWVyLnVhQnJvd3NlciA9IGZ1bmN0aW9uKCB1c2VyQWdlbnQgKSB7XG5cdFx0dmFyIHVhID0gdXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG5cblx0XHQvLyBVc2VyYWdlbnQgUmVnRXhwXG5cdFx0dmFyIHJ3ZWJraXQgPSAvKHdlYmtpdClbIFxcL10oW1xcdy5dKykvO1xuXHRcdHZhciByb3BlcmEgPSAvKG9wZXJhKSg/Oi4qdmVyc2lvbik/WyBcXC9dKFtcXHcuXSspLztcblx0XHR2YXIgcm1zaWUgPSAvKG1zaWUpIChbXFx3Ll0rKS87XG5cdFx0dmFyIHJtb3ppbGxhID0gLyhtb3ppbGxhKSg/Oi4qPyBydjooW1xcdy5dKykpPy87XG5cblx0XHR2YXIgbWF0Y2ggPSByd2Via2l0LmV4ZWMoIHVhICkgfHxcblx0XHRcdHJvcGVyYS5leGVjKCB1YSApIHx8XG5cdFx0XHRybXNpZS5leGVjKCB1YSApIHx8XG5cdFx0XHR1YS5pbmRleE9mKFwiY29tcGF0aWJsZVwiKSA8IDAgJiYgcm1vemlsbGEuZXhlYyggdWEgKSB8fFxuXHRcdFx0W107XG5cblx0XHRyZXR1cm4geyBicm93c2VyOiBtYXRjaFsxXSB8fCBcIlwiLCB2ZXJzaW9uOiBtYXRjaFsyXSB8fCBcIjBcIiB9O1xuXHR9O1xuXG5cdC8vIFBsYXRmb3JtIHNuaWZmZXIgZm9yIGRldGVjdGluZyBtb2JpbGUgZGV2aWNlc1xuXHQkLmpQbGF5ZXIudWFQbGF0Zm9ybSA9IGZ1bmN0aW9uKCB1c2VyQWdlbnQgKSB7XG5cdFx0dmFyIHVhID0gdXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG5cblx0XHQvLyBVc2VyYWdlbnQgUmVnRXhwXG5cdFx0dmFyIHJwbGF0Zm9ybSA9IC8oaXBhZHxpcGhvbmV8aXBvZHxhbmRyb2lkfGJsYWNrYmVycnl8cGxheWJvb2t8d2luZG93cyBjZXx3ZWJvcykvO1xuXHRcdHZhciBydGFibGV0ID0gLyhpcGFkfHBsYXlib29rKS87XG5cdFx0dmFyIHJhbmRyb2lkID0gLyhhbmRyb2lkKS87XG5cdFx0dmFyIHJtb2JpbGUgPSAvKG1vYmlsZSkvO1xuXG5cdFx0dmFyIHBsYXRmb3JtID0gcnBsYXRmb3JtLmV4ZWMoIHVhICkgfHwgW107XG5cdFx0dmFyIHRhYmxldCA9IHJ0YWJsZXQuZXhlYyggdWEgKSB8fFxuXHRcdFx0IXJtb2JpbGUuZXhlYyggdWEgKSAmJiByYW5kcm9pZC5leGVjKCB1YSApIHx8XG5cdFx0XHRbXTtcblxuXHRcdGlmKHBsYXRmb3JtWzFdKSB7XG5cdFx0XHRwbGF0Zm9ybVsxXSA9IHBsYXRmb3JtWzFdLnJlcGxhY2UoL1xccy9nLCBcIl9cIik7IC8vIENoYW5nZSB3aGl0ZXNwYWNlIHRvIHVuZGVyc2NvcmUuIEVuYWJsZXMgZG90IG5vdGF0aW9uLlxuXHRcdH1cblxuXHRcdHJldHVybiB7IHBsYXRmb3JtOiBwbGF0Zm9ybVsxXSB8fCBcIlwiLCB0YWJsZXQ6IHRhYmxldFsxXSB8fCBcIlwiIH07XG5cdH07XG5cblx0JC5qUGxheWVyLmJyb3dzZXIgPSB7XG5cdH07XG5cdCQualBsYXllci5wbGF0Zm9ybSA9IHtcblx0fTtcblxuXHR2YXIgYnJvd3Nlck1hdGNoID0gJC5qUGxheWVyLnVhQnJvd3NlcihuYXZpZ2F0b3IudXNlckFnZW50KTtcblx0aWYgKCBicm93c2VyTWF0Y2guYnJvd3NlciApIHtcblx0XHQkLmpQbGF5ZXIuYnJvd3NlclsgYnJvd3Nlck1hdGNoLmJyb3dzZXIgXSA9IHRydWU7XG5cdFx0JC5qUGxheWVyLmJyb3dzZXIudmVyc2lvbiA9IGJyb3dzZXJNYXRjaC52ZXJzaW9uO1xuXHR9XG5cdHZhciBwbGF0Zm9ybU1hdGNoID0gJC5qUGxheWVyLnVhUGxhdGZvcm0obmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cdGlmICggcGxhdGZvcm1NYXRjaC5wbGF0Zm9ybSApIHtcblx0XHQkLmpQbGF5ZXIucGxhdGZvcm1bIHBsYXRmb3JtTWF0Y2gucGxhdGZvcm0gXSA9IHRydWU7XG5cdFx0JC5qUGxheWVyLnBsYXRmb3JtLm1vYmlsZSA9ICFwbGF0Zm9ybU1hdGNoLnRhYmxldDtcblx0XHQkLmpQbGF5ZXIucGxhdGZvcm0udGFibGV0ID0gISFwbGF0Zm9ybU1hdGNoLnRhYmxldDtcblx0fVxuXG5cdC8vIEludGVybmV0IEV4cGxvcmVyIChJRSkgQnJvd3NlciBEb2N1bWVudCBNb2RlIFNuaWZmZXIuIEJhc2VkIG9uIGNvZGUgYXQ6XG5cdC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9jYzI4ODMyNSUyOHY9dnMuODUlMjkuYXNweCNHZXRNb2RlXG5cdCQualBsYXllci5nZXREb2NNb2RlID0gZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGRvY01vZGU7XG5cdFx0aWYgKCQualBsYXllci5icm93c2VyLm1zaWUpIHtcblx0XHRcdGlmIChkb2N1bWVudC5kb2N1bWVudE1vZGUpIHsgLy8gSUU4IG9yIGxhdGVyXG5cdFx0XHRcdGRvY01vZGUgPSBkb2N1bWVudC5kb2N1bWVudE1vZGU7XG5cdFx0XHR9IGVsc2UgeyAvLyBJRSA1LTdcblx0XHRcdFx0ZG9jTW9kZSA9IDU7IC8vIEFzc3VtZSBxdWlya3MgbW9kZSB1bmxlc3MgcHJvdmVuIG90aGVyd2lzZVxuXHRcdFx0XHRpZiAoZG9jdW1lbnQuY29tcGF0TW9kZSkge1xuXHRcdFx0XHRcdGlmIChkb2N1bWVudC5jb21wYXRNb2RlID09PSBcIkNTUzFDb21wYXRcIikge1xuXHRcdFx0XHRcdFx0ZG9jTW9kZSA9IDc7IC8vIHN0YW5kYXJkcyBtb2RlXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBkb2NNb2RlO1xuXHR9O1xuXHQkLmpQbGF5ZXIuYnJvd3Nlci5kb2N1bWVudE1vZGUgPSAkLmpQbGF5ZXIuZ2V0RG9jTW9kZSgpO1xuXG5cdCQualBsYXllci5uYXRpdmVGZWF0dXJlcyA9IHtcblx0XHRpbml0OiBmdW5jdGlvbigpIHtcblxuXHRcdFx0LyogRnVsbHNjcmVlbiBmdW5jdGlvbiBuYW1pbmcgaW5mbHVlbmNlZCBieSBXM0MgbmFtaW5nLlxuXHRcdFx0ICogTm8gc3VwcG9ydCBmb3I6IE1vemlsbGEgUHJvcG9zYWw6IGh0dHBzOi8vd2lraS5tb3ppbGxhLm9yZy9HZWNrbzpGdWxsU2NyZWVuQVBJXG5cdFx0XHQgKi9cblxuXHRcdFx0dmFyIGQgPSBkb2N1bWVudCxcblx0XHRcdFx0diA9IGQuY3JlYXRlRWxlbWVudCgndmlkZW8nKSxcblx0XHRcdFx0c3BlYyA9IHtcblx0XHRcdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9mdWxsc2NyZWVuL1xuXHRcdFx0XHRcdHczYzogW1xuXHRcdFx0XHRcdFx0J2Z1bGxzY3JlZW5FbmFibGVkJyxcblx0XHRcdFx0XHRcdCdmdWxsc2NyZWVuRWxlbWVudCcsXG5cdFx0XHRcdFx0XHQncmVxdWVzdEZ1bGxzY3JlZW4nLFxuXHRcdFx0XHRcdFx0J2V4aXRGdWxsc2NyZWVuJyxcblx0XHRcdFx0XHRcdCdmdWxsc2NyZWVuY2hhbmdlJyxcblx0XHRcdFx0XHRcdCdmdWxsc2NyZWVuZXJyb3InXG5cdFx0XHRcdFx0XSxcblx0XHRcdFx0XHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0RPTS9Vc2luZ19mdWxsc2NyZWVuX21vZGVcblx0XHRcdFx0XHRtb3o6IFtcblx0XHRcdFx0XHRcdCdtb3pGdWxsU2NyZWVuRW5hYmxlZCcsXG5cdFx0XHRcdFx0XHQnbW96RnVsbFNjcmVlbkVsZW1lbnQnLFxuXHRcdFx0XHRcdFx0J21velJlcXVlc3RGdWxsU2NyZWVuJyxcblx0XHRcdFx0XHRcdCdtb3pDYW5jZWxGdWxsU2NyZWVuJyxcblx0XHRcdFx0XHRcdCdtb3pmdWxsc2NyZWVuY2hhbmdlJyxcblx0XHRcdFx0XHRcdCdtb3pmdWxsc2NyZWVuZXJyb3InXG5cdFx0XHRcdFx0XSxcblx0XHRcdFx0XHQvLyBodHRwOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9saWJyYXJ5L3NhZmFyaS8jZG9jdW1lbnRhdGlvbi9XZWJLaXQvUmVmZXJlbmNlL0VsZW1lbnRDbGFzc1JlZi9FbGVtZW50L0VsZW1lbnQuaHRtbFxuXHRcdFx0XHRcdC8vIGh0dHA6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvc2FmYXJpLyNkb2N1bWVudGF0aW9uL1VzZXJFeHBlcmllbmNlL1JlZmVyZW5jZS9Eb2N1bWVudEFkZGl0aW9uc1JlZmVyZW5jZS9Eb2N1bWVudEFkZGl0aW9ucy9Eb2N1bWVudEFkZGl0aW9ucy5odG1sXG5cdFx0XHRcdFx0d2Via2l0OiBbXG5cdFx0XHRcdFx0XHQnJyxcblx0XHRcdFx0XHRcdCd3ZWJraXRDdXJyZW50RnVsbFNjcmVlbkVsZW1lbnQnLFxuXHRcdFx0XHRcdFx0J3dlYmtpdFJlcXVlc3RGdWxsU2NyZWVuJyxcblx0XHRcdFx0XHRcdCd3ZWJraXRDYW5jZWxGdWxsU2NyZWVuJyxcblx0XHRcdFx0XHRcdCd3ZWJraXRmdWxsc2NyZWVuY2hhbmdlJyxcblx0XHRcdFx0XHRcdCcnXG5cdFx0XHRcdFx0XSxcblx0XHRcdFx0XHQvLyBodHRwOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9saWJyYXJ5L3NhZmFyaS8jZG9jdW1lbnRhdGlvbi9BdWRpb1ZpZGVvL1JlZmVyZW5jZS9IVE1MVmlkZW9FbGVtZW50Q2xhc3NSZWZlcmVuY2UvSFRNTFZpZGVvRWxlbWVudC9IVE1MVmlkZW9FbGVtZW50Lmh0bWxcblx0XHRcdFx0XHQvLyBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vbGlicmFyeS9zYWZhcmkvc2FtcGxlY29kZS9IVE1MNVZpZGVvRXZlbnRGbG93L0xpc3RpbmdzL2V2ZW50c19qcy5odG1sIy8vYXBwbGVfcmVmL2RvYy91aWQvRFRTNDAwMTAwODUtZXZlbnRzX2pzLURvbnRMaW5rRWxlbWVudElEXzVcblx0XHRcdFx0XHQvLyBFdmVudHM6ICd3ZWJraXRiZWdpbmZ1bGxzY3JlZW4nIGFuZCAnd2Via2l0ZW5kZnVsbHNjcmVlbidcblx0XHRcdFx0XHR3ZWJraXRWaWRlbzogW1xuXHRcdFx0XHRcdFx0J3dlYmtpdFN1cHBvcnRzRnVsbHNjcmVlbicsXG5cdFx0XHRcdFx0XHQnd2Via2l0RGlzcGxheWluZ0Z1bGxzY3JlZW4nLFxuXHRcdFx0XHRcdFx0J3dlYmtpdEVudGVyRnVsbHNjcmVlbicsXG5cdFx0XHRcdFx0XHQnd2Via2l0RXhpdEZ1bGxzY3JlZW4nLFxuXHRcdFx0XHRcdFx0JycsXG5cdFx0XHRcdFx0XHQnJ1xuXHRcdFx0XHRcdF0sXG5cdFx0XHRcdFx0bXM6IFtcblx0XHRcdFx0XHRcdCcnLFxuXHRcdFx0XHRcdFx0J21zRnVsbHNjcmVlbkVsZW1lbnQnLFxuXHRcdFx0XHRcdFx0J21zUmVxdWVzdEZ1bGxzY3JlZW4nLFxuXHRcdFx0XHRcdFx0J21zRXhpdEZ1bGxzY3JlZW4nLFxuXHRcdFx0XHRcdFx0J01TRnVsbHNjcmVlbkNoYW5nZScsXG5cdFx0XHRcdFx0XHQnTVNGdWxsc2NyZWVuRXJyb3InXG5cdFx0XHRcdFx0XVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRzcGVjT3JkZXIgPSBbXG5cdFx0XHRcdFx0J3czYycsXG5cdFx0XHRcdFx0J21veicsXG5cdFx0XHRcdFx0J3dlYmtpdCcsXG5cdFx0XHRcdFx0J3dlYmtpdFZpZGVvJyxcblx0XHRcdFx0XHQnbXMnXG5cdFx0XHRcdF0sXG5cdFx0XHRcdGZzLCBpLCBpbDtcblxuXHRcdFx0dGhpcy5mdWxsc2NyZWVuID0gZnMgPSB7XG5cdFx0XHRcdHN1cHBvcnQ6IHtcblx0XHRcdFx0XHR3M2M6ICEhZFtzcGVjLnczY1swXV0sXG5cdFx0XHRcdFx0bW96OiAhIWRbc3BlYy5tb3pbMF1dLFxuXHRcdFx0XHRcdHdlYmtpdDogdHlwZW9mIGRbc3BlYy53ZWJraXRbM11dID09PSAnZnVuY3Rpb24nLFxuXHRcdFx0XHRcdHdlYmtpdFZpZGVvOiB0eXBlb2YgdltzcGVjLndlYmtpdFZpZGVvWzJdXSA9PT0gJ2Z1bmN0aW9uJyxcblx0XHRcdFx0XHRtczogdHlwZW9mIHZbc3BlYy5tc1syXV0gPT09ICdmdW5jdGlvbidcblx0XHRcdFx0fSxcblx0XHRcdFx0dXNlZDoge31cblx0XHRcdH07XG5cblx0XHRcdC8vIFN0b3JlIHRoZSBuYW1lIG9mIHRoZSBzcGVjIGJlaW5nIHVzZWQgYW5kIGFzIGEgaGFuZHkgYm9vbGVhbi5cblx0XHRcdGZvcihpID0gMCwgaWwgPSBzcGVjT3JkZXIubGVuZ3RoOyBpIDwgaWw7IGkrKykge1xuXHRcdFx0XHR2YXIgbiA9IHNwZWNPcmRlcltpXTtcblx0XHRcdFx0aWYoZnMuc3VwcG9ydFtuXSkge1xuXHRcdFx0XHRcdGZzLnNwZWMgPSBuO1xuXHRcdFx0XHRcdGZzLnVzZWRbbl0gPSB0cnVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmKGZzLnNwZWMpIHtcblx0XHRcdFx0dmFyIHMgPSBzcGVjW2ZzLnNwZWNdO1xuXHRcdFx0XHRmcy5hcGkgPSB7XG5cdFx0XHRcdFx0ZnVsbHNjcmVlbkVuYWJsZWQ6IHRydWUsXG5cdFx0XHRcdFx0ZnVsbHNjcmVlbkVsZW1lbnQ6IGZ1bmN0aW9uKGVsZW0pIHtcblx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtID8gZWxlbSA6IGQ7IC8vIFZpZGVvIGVsZW1lbnQgcmVxdWlyZWQgZm9yIHdlYmtpdFZpZGVvXG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbVtzWzFdXTtcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdHJlcXVlc3RGdWxsc2NyZWVuOiBmdW5jdGlvbihlbGVtKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbVtzWzJdXSgpOyAvLyBDaHJvbWUgYW5kIE9wZXJhIHdhbnQgcGFyYW1ldGVyIChFbGVtZW50LkFMTE9XX0tFWUJPQVJEX0lOUFVUKSBidXQgU2FmYXJpIGZhaWxzIGlmIGZsYWcgdXNlZC5cblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGV4aXRGdWxsc2NyZWVuOiBmdW5jdGlvbihlbGVtKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gZWxlbSA/IGVsZW0gOiBkOyAvLyBWaWRlbyBlbGVtZW50IHJlcXVpcmVkIGZvciB3ZWJraXRWaWRlb1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1bc1szXV0oKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHRcdGZzLmV2ZW50ID0ge1xuXHRcdFx0XHRcdGZ1bGxzY3JlZW5jaGFuZ2U6IHNbNF0sXG5cdFx0XHRcdFx0ZnVsbHNjcmVlbmVycm9yOiBzWzVdXG5cdFx0XHRcdH07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmcy5hcGkgPSB7XG5cdFx0XHRcdFx0ZnVsbHNjcmVlbkVuYWJsZWQ6IGZhbHNlLFxuXHRcdFx0XHRcdGZ1bGxzY3JlZW5FbGVtZW50OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0cmVxdWVzdEZ1bGxzY3JlZW46IGZ1bmN0aW9uKCkge30sXG5cdFx0XHRcdFx0ZXhpdEZ1bGxzY3JlZW46IGZ1bmN0aW9uKCkge31cblx0XHRcdFx0fTtcblx0XHRcdFx0ZnMuZXZlbnQgPSB7fTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdCQualBsYXllci5uYXRpdmVGZWF0dXJlcy5pbml0KCk7XG5cblx0Ly8gVGhlIGtleWJvYXJkIGNvbnRyb2wgc3lzdGVtLlxuXG5cdC8vIFRoZSBjdXJyZW50IGpQbGF5ZXIgaW5zdGFuY2UgaW4gZm9jdXMuXG5cdCQualBsYXllci5mb2N1cyA9IG51bGw7XG5cblx0Ly8gVGhlIGxpc3Qgb2YgZWxlbWVudCBub2RlIG5hbWVzIHRvIGlnbm9yZSB3aXRoIGtleSBjb250cm9scy5cblx0JC5qUGxheWVyLmtleUlnbm9yZUVsZW1lbnROYW1lcyA9IFwiQSBJTlBVVCBURVhUQVJFQSBTRUxFQ1QgQlVUVE9OXCI7XG5cblx0Ly8gVGhlIGZ1bmN0aW9uIHRoYXQgZGVhbHMgd2l0aCBrZXkgcHJlc3Nlcy5cblx0dmFyIGtleUJpbmRpbmdzID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0XHR2YXIgZiA9ICQualBsYXllci5mb2N1cyxcblx0XHRcdGlnbm9yZUtleTtcblxuXHRcdC8vIEEgalBsYXllciBpbnN0YW5jZSBtdXN0IGJlIGluIGZvY3VzLiBpZS4sIGtleUVuYWJsZWQgYW5kIHRoZSBsYXN0IG9uZSBwbGF5ZWQuXG5cdFx0aWYoZikge1xuXHRcdFx0Ly8gV2hhdCBnZW5lcmF0ZWQgdGhlIGtleSBwcmVzcz9cblx0XHRcdCQuZWFjaCggJC5qUGxheWVyLmtleUlnbm9yZUVsZW1lbnROYW1lcy5zcGxpdCgvXFxzKy9nKSwgZnVuY3Rpb24oaSwgbmFtZSkge1xuXHRcdFx0XHQvLyBUaGUgc3RyaW5ncyBzaG91bGQgYWxyZWFkeSBiZSB1cHBlcmNhc2UuXG5cdFx0XHRcdGlmKGV2ZW50LnRhcmdldC5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpID09PSBuYW1lLnRvVXBwZXJDYXNlKCkpIHtcblx0XHRcdFx0XHRpZ25vcmVLZXkgPSB0cnVlO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTsgLy8gZXhpdCBlYWNoLlxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdGlmKCFpZ25vcmVLZXkpIHtcblx0XHRcdFx0Ly8gU2VlIGlmIHRoZSBrZXkgcHJlc3NlZCBtYXRjaGVzIGFueSBvZiB0aGUgYmluZGluZ3MuXG5cdFx0XHRcdCQuZWFjaChmLm9wdGlvbnMua2V5QmluZGluZ3MsIGZ1bmN0aW9uKGFjdGlvbiwgYmluZGluZykge1xuXHRcdFx0XHRcdC8vIFRoZSBiaW5kaW5nIGNvdWxkIGJlIGEgbnVsbCB3aGVuIHRoZSBkZWZhdWx0IGhhcyBiZWVuIGRpc2FibGVkLiBpZS4sIDFzdCBjbGF1c2UgaW4gaWYoKVxuXHRcdFx0XHRcdGlmKFxuXHRcdFx0XHRcdFx0KGJpbmRpbmcgJiYgJC5pc0Z1bmN0aW9uKGJpbmRpbmcuZm4pKSAmJlxuXHRcdFx0XHRcdFx0KCh0eXBlb2YgYmluZGluZy5rZXkgPT09ICdudW1iZXInICYmIGV2ZW50LndoaWNoID09PSBiaW5kaW5nLmtleSkgfHxcblx0XHRcdFx0XHRcdCh0eXBlb2YgYmluZGluZy5rZXkgPT09ICdzdHJpbmcnICYmIGV2ZW50LmtleSA9PT0gYmluZGluZy5rZXkpKVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gS2V5IGJlaW5nIHVzZWQgYnkgalBsYXllciwgc28gcHJldmVudCBkZWZhdWx0IG9wZXJhdGlvbi5cblx0XHRcdFx0XHRcdGJpbmRpbmcuZm4oZik7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7IC8vIGV4aXQgZWFjaC5cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHQkLmpQbGF5ZXIua2V5cyA9IGZ1bmN0aW9uKGVuKSB7XG5cdFx0dmFyIGV2ZW50ID0gXCJrZXlkb3duLmpQbGF5ZXJcIjtcblx0XHQvLyBSZW1vdmUgYW55IGJpbmRpbmcsIGp1c3QgaW4gY2FzZSBlbmFibGVkIG1vcmUgdGhhbiBvbmNlLlxuXHRcdCQoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KS51bmJpbmQoZXZlbnQpO1xuXHRcdGlmKGVuKSB7XG5cdFx0XHQkKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkuYmluZChldmVudCwga2V5QmluZGluZ3MpO1xuXHRcdH1cblx0fTtcblxuXHQvLyBFbmFibGUgdGhlIGdsb2JhbCBrZXkgY29udHJvbCBoYW5kbGVyIHJlYWR5IGZvciBhbnkgalBsYXllciBpbnN0YW5jZSB3aXRoIHRoZSBrZXlFbmFibGVkIG9wdGlvbiBlbmFibGVkLlxuXHQkLmpQbGF5ZXIua2V5cyh0cnVlKTtcblxuXHQkLmpQbGF5ZXIucHJvdG90eXBlID0ge1xuXHRcdGNvdW50OiAwLCAvLyBTdGF0aWMgVmFyaWFibGU6IENoYW5nZSBpdCB2aWEgcHJvdG90eXBlLlxuXHRcdHZlcnNpb246IHsgLy8gU3RhdGljIE9iamVjdFxuXHRcdFx0c2NyaXB0OiBcIjIuOS4yXCIsXG5cdFx0XHRuZWVkRmxhc2g6IFwiMi45LjBcIixcblx0XHRcdGZsYXNoOiBcInVua25vd25cIlxuXHRcdH0sXG5cdFx0b3B0aW9uczogeyAvLyBJbnN0YW5jZWQgaW4gJC5qUGxheWVyKCkgY29uc3RydWN0b3Jcblx0XHRcdHN3ZlBhdGg6IFwianNcIiwgLy8gUGF0aCB0byBqcXVlcnkuanBsYXllci5zd2YuIENhbiBiZSByZWxhdGl2ZSwgYWJzb2x1dGUgb3Igc2VydmVyIHJvb3QgcmVsYXRpdmUuXG5cdFx0XHRzb2x1dGlvbjogXCJodG1sLCBmbGFzaFwiLCAvLyBWYWxpZCBzb2x1dGlvbnM6IGh0bWwsIGZsYXNoLCBhdXJvcmEuIE9yZGVyIGRlZmluZXMgcHJpb3JpdHkuIDFzdCBpcyBoaWdoZXN0LFxuXHRcdFx0c3VwcGxpZWQ6IFwibXAzXCIsIC8vIERlZmluZXMgd2hpY2ggZm9ybWF0cyBqUGxheWVyIHdpbGwgdHJ5IGFuZCBzdXBwb3J0IGFuZCB0aGUgcHJpb3JpdHkgYnkgdGhlIG9yZGVyLiAxc3QgaXMgaGlnaGVzdCxcblx0XHRcdGF1cm9yYUZvcm1hdHM6IFwid2F2XCIsIC8vIExpc3QgdGhlIGF1cm9yYS5qcyBjb2RlY3MgYmVpbmcgbG9hZGVkIGV4dGVybmFsbHkuIEl0cyBjb3JlIHN1cHBvcnRzIFwid2F2XCIuIFNwZWNpZnkgZm9ybWF0IGluIGpQbGF5ZXIgY29udGV4dC4gRUcuLCBUaGUgYWFjLmpzIGNvZGVjIGdpdmVzIHRoZSBcIm00YVwiIGZvcm1hdC5cblx0XHRcdHByZWxvYWQ6ICdtZXRhZGF0YScsICAvLyBIVE1MNSBTcGVjIHZhbHVlczogbm9uZSwgbWV0YWRhdGEsIGF1dG8uXG5cdFx0XHR2b2x1bWU6IDAuOCwgLy8gVGhlIHZvbHVtZS4gTnVtYmVyIDAgdG8gMS5cblx0XHRcdG11dGVkOiBmYWxzZSxcblx0XHRcdHJlbWFpbmluZ0R1cmF0aW9uOiBmYWxzZSwgLy8gV2hlbiB0cnVlLCB0aGUgcmVtYWluaW5nIHRpbWUgaXMgc2hvd24gaW4gdGhlIGR1cmF0aW9uIEdVSSBlbGVtZW50LlxuXHRcdFx0dG9nZ2xlRHVyYXRpb246IGZhbHNlLCAvLyBXaGVuIHRydWUsIGNsaWNrcyBvbiB0aGUgZHVyYXRpb24gdG9nZ2xlIGJldHdlZW4gdGhlIGR1cmF0aW9uIGFuZCByZW1haW5pbmcgZGlzcGxheS5cblx0XHRcdGNhcHR1cmVEdXJhdGlvbjogdHJ1ZSwgLy8gV2hlbiB0cnVlLCBjbGlja3Mgb24gdGhlIGR1cmF0aW9uIGFyZSBjYXB0dXJlZCBhbmQgbm8gbG9uZ2VyIHByb3BhZ2F0ZSB1cCB0aGUgRE9NLlxuXHRcdFx0cGxheWJhY2tSYXRlOiAxLFxuXHRcdFx0ZGVmYXVsdFBsYXliYWNrUmF0ZTogMSxcblx0XHRcdG1pblBsYXliYWNrUmF0ZTogMC41LFxuXHRcdFx0bWF4UGxheWJhY2tSYXRlOiA0LFxuXHRcdFx0d21vZGU6IFwib3BhcXVlXCIsIC8vIFZhbGlkIHdtb2RlOiB3aW5kb3csIHRyYW5zcGFyZW50LCBvcGFxdWUsIGRpcmVjdCwgZ3B1LlxuXHRcdFx0YmFja2dyb3VuZENvbG9yOiBcIiMwMDAwMDBcIiwgLy8gVG8gZGVmaW5lIHRoZSBqUGxheWVyIGRpdiBhbmQgRmxhc2ggYmFja2dyb3VuZCBjb2xvci5cblx0XHRcdGNzc1NlbGVjdG9yQW5jZXN0b3I6IFwiI2pwX2NvbnRhaW5lcl8xXCIsXG5cdFx0XHRjc3NTZWxlY3RvcjogeyAvLyAqIGRlbm90ZXMgcHJvcGVydGllcyB0aGF0IHNob3VsZCBvbmx5IGJlIHJlcXVpcmVkIHdoZW4gdmlkZW8gbWVkaWEgdHlwZSByZXF1aXJlZC4gX2Nzc1NlbGVjdG9yKCkgd291bGQgcmVxdWlyZSBjaGFuZ2VzIHRvIGVuYWJsZSBzcGxpdHRpbmcgdGhlc2UgaW50byBBdWRpbyBhbmQgVmlkZW8gZGVmYXVsdHMuXG5cdFx0XHRcdHZpZGVvUGxheTogXCIuanAtdmlkZW8tcGxheVwiLCAvLyAqXG5cdFx0XHRcdHBsYXk6IFwiLmpwLXBsYXlcIixcblx0XHRcdFx0cGF1c2U6IFwiLmpwLXBhdXNlXCIsXG5cdFx0XHRcdHN0b3A6IFwiLmpwLXN0b3BcIixcblx0XHRcdFx0c2Vla0JhcjogXCIuanAtc2Vlay1iYXJcIixcblx0XHRcdFx0cGxheUJhcjogXCIuanAtcGxheS1iYXJcIixcblx0XHRcdFx0bXV0ZTogXCIuanAtbXV0ZVwiLFxuXHRcdFx0XHR1bm11dGU6IFwiLmpwLXVubXV0ZVwiLFxuXHRcdFx0XHR2b2x1bWVCYXI6IFwiLmpwLXZvbHVtZS1iYXJcIixcblx0XHRcdFx0dm9sdW1lQmFyVmFsdWU6IFwiLmpwLXZvbHVtZS1iYXItdmFsdWVcIixcblx0XHRcdFx0dm9sdW1lTWF4OiBcIi5qcC12b2x1bWUtbWF4XCIsXG5cdFx0XHRcdHBsYXliYWNrUmF0ZUJhcjogXCIuanAtcGxheWJhY2stcmF0ZS1iYXJcIixcblx0XHRcdFx0cGxheWJhY2tSYXRlQmFyVmFsdWU6IFwiLmpwLXBsYXliYWNrLXJhdGUtYmFyLXZhbHVlXCIsXG5cdFx0XHRcdGN1cnJlbnRUaW1lOiBcIi5qcC1jdXJyZW50LXRpbWVcIixcblx0XHRcdFx0ZHVyYXRpb246IFwiLmpwLWR1cmF0aW9uXCIsXG5cdFx0XHRcdHRpdGxlOiBcIi5qcC10aXRsZVwiLFxuXHRcdFx0XHRmdWxsU2NyZWVuOiBcIi5qcC1mdWxsLXNjcmVlblwiLCAvLyAqXG5cdFx0XHRcdHJlc3RvcmVTY3JlZW46IFwiLmpwLXJlc3RvcmUtc2NyZWVuXCIsIC8vICpcblx0XHRcdFx0cmVwZWF0OiBcIi5qcC1yZXBlYXRcIixcblx0XHRcdFx0cmVwZWF0T2ZmOiBcIi5qcC1yZXBlYXQtb2ZmXCIsXG5cdFx0XHRcdGd1aTogXCIuanAtZ3VpXCIsIC8vIFRoZSBpbnRlcmZhY2UgdXNlZCB3aXRoIGF1dG9oaWRlIGZlYXR1cmUuXG5cdFx0XHRcdG5vU29sdXRpb246IFwiLmpwLW5vLXNvbHV0aW9uXCIgLy8gRm9yIGVycm9yIGZlZWRiYWNrIHdoZW4galBsYXllciBjYW5ub3QgZmluZCBhIHNvbHV0aW9uLlxuXHRcdFx0fSxcblx0XHRcdHN0YXRlQ2xhc3M6IHsgLy8gQ2xhc3NlcyBhZGRlZCB0byB0aGUgY3NzU2VsZWN0b3JBbmNlc3RvciB0byBpbmRpY2F0ZSB0aGUgc3RhdGUuXG5cdFx0XHRcdHBsYXlpbmc6IFwianAtc3RhdGUtcGxheWluZ1wiLFxuXHRcdFx0XHRzZWVraW5nOiBcImpwLXN0YXRlLXNlZWtpbmdcIixcblx0XHRcdFx0bXV0ZWQ6IFwianAtc3RhdGUtbXV0ZWRcIixcblx0XHRcdFx0bG9vcGVkOiBcImpwLXN0YXRlLWxvb3BlZFwiLFxuXHRcdFx0XHRmdWxsU2NyZWVuOiBcImpwLXN0YXRlLWZ1bGwtc2NyZWVuXCIsXG5cdFx0XHRcdG5vVm9sdW1lOiBcImpwLXN0YXRlLW5vLXZvbHVtZVwiXG5cdFx0XHR9LFxuXHRcdFx0dXNlU3RhdGVDbGFzc1NraW46IGZhbHNlLCAvLyBBIHN0YXRlIGNsYXNzIHNraW4gcmVsaWVzIG9uIHRoZSBzdGF0ZSBjbGFzc2VzIHRvIGNoYW5nZSB0aGUgdmlzdWFsIGFwcGVhcmFuY2UuIFRoZSBzaW5nbGUgY29udHJvbCB0b2dnbGVzIHRoZSBlZmZlY3QsIGZvciBleGFtcGxlOiBwbGF5IHRoZW4gcGF1c2UsIG11dGUgdGhlbiB1bm11dGUuXG5cdFx0XHRhdXRvQmx1cjogdHJ1ZSwgLy8gR1VJIGNvbnRyb2wgaGFuZGxlcnMgd2lsbCBkcm9wIGZvY3VzIGFmdGVyIGNsaWNrcy5cblx0XHRcdHNtb290aFBsYXlCYXI6IGZhbHNlLCAvLyBTbW9vdGhzIHRoZSBwbGF5IGJhciB0cmFuc2l0aW9ucywgd2hpY2ggYWZmZWN0cyBjbGlja3MgYW5kIHNob3J0IG1lZGlhIHdpdGggYmlnIGNoYW5nZXMgcGVyIHNlY29uZC5cblx0XHRcdGZ1bGxTY3JlZW46IGZhbHNlLCAvLyBOYXRpdmUgRnVsbCBTY3JlZW5cblx0XHRcdGZ1bGxXaW5kb3c6IGZhbHNlLFxuXHRcdFx0YXV0b2hpZGU6IHtcblx0XHRcdFx0cmVzdG9yZWQ6IGZhbHNlLCAvLyBDb250cm9scyB0aGUgaW50ZXJmYWNlIGF1dG9oaWRlIGZlYXR1cmUuXG5cdFx0XHRcdGZ1bGw6IHRydWUsIC8vIENvbnRyb2xzIHRoZSBpbnRlcmZhY2UgYXV0b2hpZGUgZmVhdHVyZS5cblx0XHRcdFx0ZmFkZUluOiAyMDAsIC8vIE1pbGxpc2Vjb25kcy4gVGhlIHBlcmlvZCBvZiB0aGUgZmFkZUluIGFuaW0uXG5cdFx0XHRcdGZhZGVPdXQ6IDYwMCwgLy8gTWlsbGlzZWNvbmRzLiBUaGUgcGVyaW9kIG9mIHRoZSBmYWRlT3V0IGFuaW0uXG5cdFx0XHRcdGhvbGQ6IDEwMDAgLy8gTWlsbGlzZWNvbmRzLiBUaGUgcGVyaW9kIG9mIHRoZSBwYXVzZSBiZWZvcmUgYXV0b2hpZGUgYmVpbmdzLlxuXHRcdFx0fSxcblx0XHRcdGxvb3A6IGZhbHNlLFxuXHRcdFx0cmVwZWF0OiBmdW5jdGlvbihldmVudCkgeyAvLyBUaGUgZGVmYXVsdCBqUGxheWVyIHJlcGVhdCBldmVudCBoYW5kbGVyXG5cdFx0XHRcdGlmKGV2ZW50LmpQbGF5ZXIub3B0aW9ucy5sb29wKSB7XG5cdFx0XHRcdFx0JCh0aGlzKS51bmJpbmQoXCIualBsYXllclJlcGVhdFwiKS5iaW5kKCQualBsYXllci5ldmVudC5lbmRlZCArIFwiLmpQbGF5ZXIualBsYXllclJlcGVhdFwiLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdCQodGhpcykualBsYXllcihcInBsYXlcIik7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0JCh0aGlzKS51bmJpbmQoXCIualBsYXllclJlcGVhdFwiKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdG5hdGl2ZVZpZGVvQ29udHJvbHM6IHtcblx0XHRcdFx0Ly8gV29ya3Mgd2VsbCBvbiBzdGFuZGFyZCBicm93c2Vycy5cblx0XHRcdFx0Ly8gUGhvbmUgYW5kIHRhYmxldCBicm93c2VycyBjYW4gaGF2ZSBwcm9ibGVtcyB3aXRoIHRoZSBjb250cm9scyBkaXNhcHBlYXJpbmcuXG5cdFx0XHR9LFxuXHRcdFx0bm9GdWxsV2luZG93OiB7XG5cdFx0XHRcdG1zaWU6IC9tc2llIFswLTZdXFwuLyxcblx0XHRcdFx0aXBhZDogL2lwYWQuKj9vcyBbMC00XVxcLi8sXG5cdFx0XHRcdGlwaG9uZTogL2lwaG9uZS8sXG5cdFx0XHRcdGlwb2Q6IC9pcG9kLyxcblx0XHRcdFx0YW5kcm9pZF9wYWQ6IC9hbmRyb2lkIFswLTNdXFwuKD8hLio/bW9iaWxlKS8sXG5cdFx0XHRcdGFuZHJvaWRfcGhvbmU6IC8oPz0uKmFuZHJvaWQpKD8hLipjaHJvbWUpKD89Liptb2JpbGUpLyxcblx0XHRcdFx0YmxhY2tiZXJyeTogL2JsYWNrYmVycnkvLFxuXHRcdFx0XHR3aW5kb3dzX2NlOiAvd2luZG93cyBjZS8sXG5cdFx0XHRcdGllbW9iaWxlOiAvaWVtb2JpbGUvLFxuXHRcdFx0XHR3ZWJvczogL3dlYm9zL1xuXHRcdFx0fSxcblx0XHRcdG5vVm9sdW1lOiB7XG5cdFx0XHRcdGlwYWQ6IC9pcGFkLyxcblx0XHRcdFx0aXBob25lOiAvaXBob25lLyxcblx0XHRcdFx0aXBvZDogL2lwb2QvLFxuXHRcdFx0XHRhbmRyb2lkX3BhZDogL2FuZHJvaWQoPyEuKj9tb2JpbGUpLyxcblx0XHRcdFx0YW5kcm9pZF9waG9uZTogL2FuZHJvaWQuKj9tb2JpbGUvLFxuXHRcdFx0XHRibGFja2JlcnJ5OiAvYmxhY2tiZXJyeS8sXG5cdFx0XHRcdHdpbmRvd3NfY2U6IC93aW5kb3dzIGNlLyxcblx0XHRcdFx0aWVtb2JpbGU6IC9pZW1vYmlsZS8sXG5cdFx0XHRcdHdlYm9zOiAvd2Vib3MvLFxuXHRcdFx0XHRwbGF5Ym9vazogL3BsYXlib29rL1xuXHRcdFx0fSxcblx0XHRcdHRpbWVGb3JtYXQ6IHtcblx0XHRcdFx0Ly8gU3BlY2lmaWMgdGltZSBmb3JtYXQgZm9yIHRoaXMgaW5zdGFuY2UuIFRoZSBzdXBwb3J0ZWQgb3B0aW9ucyBhcmUgZGVmaW5lZCBpbiAkLmpQbGF5ZXIudGltZUZvcm1hdFxuXHRcdFx0XHQvLyBGb3IgdGhlIHVuZGVmaW5lZCBvcHRpb25zIHdlIHVzZSB0aGUgZGVmYXVsdCBmcm9tICQualBsYXllci50aW1lRm9ybWF0XG5cdFx0XHR9LFxuXHRcdFx0a2V5RW5hYmxlZDogZmFsc2UsIC8vIEVuYWJsZXMga2V5Ym9hcmQgY29udHJvbHMuXG5cdFx0XHRhdWRpb0Z1bGxTY3JlZW46IGZhbHNlLCAvLyBFbmFibGVzIGtleWJvYXJkIGNvbnRyb2xzIHRvIGVudGVyIGZ1bGwgc2NyZWVuIHdpdGggYXVkaW8gbWVkaWEuXG5cdFx0XHRrZXlCaW5kaW5nczogeyAvLyBUaGUga2V5IGNvbnRyb2wgb2JqZWN0LCBkZWZpbmluZyB0aGUga2V5IGNvZGVzIGFuZCB0aGUgZnVuY3Rpb25zIHRvIGV4ZWN1dGUuXG5cdFx0XHRcdC8vIFRoZSBwYXJhbWV0ZXIsIGYgPSAkLmpQbGF5ZXIuZm9jdXMsIHdpbGwgYmUgY2hlY2tlZCB0cnVldGh5IGJlZm9yZSBhdHRlbXB0aW5nIHRvIGNhbGwgYW55IG9mIHRoZXNlIGZ1bmN0aW9ucy5cblx0XHRcdFx0Ly8gUHJvcGVydGllcyBtYXkgYmUgYWRkZWQgdG8gdGhpcyBvYmplY3QsIGluIGtleS9mbiBwYWlycywgdG8gZW5hYmxlIG90aGVyIGtleSBjb250cm9scy4gRUcsIGZvciB0aGUgcGxheWxpc3QgYWRkLW9uLlxuXHRcdFx0XHRwbGF5OiB7XG5cdFx0XHRcdFx0a2V5OiA4MCwgLy8gcFxuXHRcdFx0XHRcdGZuOiBmdW5jdGlvbihmKSB7XG5cdFx0XHRcdFx0XHRpZihmLnN0YXR1cy5wYXVzZWQpIHtcblx0XHRcdFx0XHRcdFx0Zi5wbGF5KCk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRmLnBhdXNlKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRmdWxsU2NyZWVuOiB7XG5cdFx0XHRcdFx0a2V5OiA3MCwgLy8gZlxuXHRcdFx0XHRcdGZuOiBmdW5jdGlvbihmKSB7XG5cdFx0XHRcdFx0XHRpZihmLnN0YXR1cy52aWRlbyB8fCBmLm9wdGlvbnMuYXVkaW9GdWxsU2NyZWVuKSB7XG5cdFx0XHRcdFx0XHRcdGYuX3NldE9wdGlvbihcImZ1bGxTY3JlZW5cIiwgIWYub3B0aW9ucy5mdWxsU2NyZWVuKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cdFx0XHRcdG11dGVkOiB7XG5cdFx0XHRcdFx0a2V5OiA3NywgLy8gbVxuXHRcdFx0XHRcdGZuOiBmdW5jdGlvbihmKSB7XG5cdFx0XHRcdFx0XHRmLl9tdXRlZCghZi5vcHRpb25zLm11dGVkKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHZvbHVtZVVwOiB7XG5cdFx0XHRcdFx0a2V5OiAxOTAsIC8vIC5cblx0XHRcdFx0XHRmbjogZnVuY3Rpb24oZikge1xuXHRcdFx0XHRcdFx0Zi52b2x1bWUoZi5vcHRpb25zLnZvbHVtZSArIDAuMSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHR2b2x1bWVEb3duOiB7XG5cdFx0XHRcdFx0a2V5OiAxODgsIC8vICxcblx0XHRcdFx0XHRmbjogZnVuY3Rpb24oZikge1xuXHRcdFx0XHRcdFx0Zi52b2x1bWUoZi5vcHRpb25zLnZvbHVtZSAtIDAuMSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXHRcdFx0XHRsb29wOiB7XG5cdFx0XHRcdFx0a2V5OiA3NiwgLy8gbFxuXHRcdFx0XHRcdGZuOiBmdW5jdGlvbihmKSB7XG5cdFx0XHRcdFx0XHRmLl9sb29wKCFmLm9wdGlvbnMubG9vcCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0dmVydGljYWxWb2x1bWU6IGZhbHNlLCAvLyBDYWxjdWxhdGUgdm9sdW1lIGZyb20gdGhlIGJvdHRvbSBvZiB0aGUgdm9sdW1lIGJhci4gRGVmYXVsdCBpcyBmcm9tIHRoZSBsZWZ0LiBBbHNvIHZvbHVtZSBhZmZlY3RzIGVpdGhlciB3aWR0aCBvciBoZWlnaHQuXG5cdFx0XHR2ZXJ0aWNhbFBsYXliYWNrUmF0ZTogZmFsc2UsXG5cdFx0XHRnbG9iYWxWb2x1bWU6IGZhbHNlLCAvLyBTZXQgdG8gbWFrZSB2b2x1bWUgYW5kIG11dGVkIGNoYW5nZXMgYWZmZWN0IGFsbCBqUGxheWVyIGluc3RhbmNlcyB3aXRoIHRoaXMgb3B0aW9uIGVuYWJsZWRcblx0XHRcdGlkUHJlZml4OiBcImpwXCIsIC8vIFByZWZpeCBmb3IgdGhlIGlkcyBvZiBodG1sIGVsZW1lbnRzIGNyZWF0ZWQgYnkgalBsYXllci4gRm9yIGZsYXNoLCB0aGlzIG11c3Qgbm90IGluY2x1ZGUgY2hhcmFjdGVyczogLiAtICsgKiAvIFxcXG5cdFx0XHRub0NvbmZsaWN0OiBcImpRdWVyeVwiLFxuXHRcdFx0ZW11bGF0ZUh0bWw6IGZhbHNlLCAvLyBFbXVsYXRlcyB0aGUgSFRNTDUgTWVkaWEgZWxlbWVudCBvbiB0aGUgalBsYXllciBlbGVtZW50LlxuXHRcdFx0Y29uc29sZUFsZXJ0czogdHJ1ZSwgLy8gQWxlcnRzIGFyZSBzZW50IHRvIHRoZSBjb25zb2xlLmxvZygpIGluc3RlYWQgb2YgYWxlcnQoKS5cblx0XHRcdGVycm9yQWxlcnRzOiBmYWxzZSxcblx0XHRcdHdhcm5pbmdBbGVydHM6IGZhbHNlXG5cdFx0fSxcblx0XHRvcHRpb25zQXVkaW86IHtcblx0XHRcdHNpemU6IHtcblx0XHRcdFx0d2lkdGg6IFwiMHB4XCIsXG5cdFx0XHRcdGhlaWdodDogXCIwcHhcIixcblx0XHRcdFx0Y3NzQ2xhc3M6IFwiXCJcblx0XHRcdH0sXG5cdFx0XHRzaXplRnVsbDoge1xuXHRcdFx0XHR3aWR0aDogXCIwcHhcIixcblx0XHRcdFx0aGVpZ2h0OiBcIjBweFwiLFxuXHRcdFx0XHRjc3NDbGFzczogXCJcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0b3B0aW9uc1ZpZGVvOiB7XG5cdFx0XHRzaXplOiB7XG5cdFx0XHRcdHdpZHRoOiBcIjQ4MHB4XCIsXG5cdFx0XHRcdGhlaWdodDogXCIyNzBweFwiLFxuXHRcdFx0XHRjc3NDbGFzczogXCJqcC12aWRlby0yNzBwXCJcblx0XHRcdH0sXG5cdFx0XHRzaXplRnVsbDoge1xuXHRcdFx0XHR3aWR0aDogXCIxMDAlXCIsXG5cdFx0XHRcdGhlaWdodDogXCIxMDAlXCIsXG5cdFx0XHRcdGNzc0NsYXNzOiBcImpwLXZpZGVvLWZ1bGxcIlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0aW5zdGFuY2VzOiB7fSwgLy8gU3RhdGljIE9iamVjdFxuXHRcdHN0YXR1czogeyAvLyBJbnN0YW5jZWQgaW4gX2luaXQoKVxuXHRcdFx0c3JjOiBcIlwiLFxuXHRcdFx0bWVkaWE6IHt9LFxuXHRcdFx0cGF1c2VkOiB0cnVlLFxuXHRcdFx0Zm9ybWF0OiB7fSxcblx0XHRcdGZvcm1hdFR5cGU6IFwiXCIsXG5cdFx0XHR3YWl0Rm9yUGxheTogdHJ1ZSwgLy8gU2FtZSBhcyB3YWl0Rm9yTG9hZCBleGNlcHQgaW4gY2FzZSB3aGVyZSBwcmVsb2FkaW5nLlxuXHRcdFx0d2FpdEZvckxvYWQ6IHRydWUsXG5cdFx0XHRzcmNTZXQ6IGZhbHNlLFxuXHRcdFx0dmlkZW86IGZhbHNlLCAvLyBUcnVlIGlmIHBsYXlpbmcgYSB2aWRlb1xuXHRcdFx0c2Vla1BlcmNlbnQ6IDAsXG5cdFx0XHRjdXJyZW50UGVyY2VudFJlbGF0aXZlOiAwLFxuXHRcdFx0Y3VycmVudFBlcmNlbnRBYnNvbHV0ZTogMCxcblx0XHRcdGN1cnJlbnRUaW1lOiAwLFxuXHRcdFx0ZHVyYXRpb246IDAsXG5cdFx0XHRyZW1haW5pbmc6IDAsXG5cdFx0XHR2aWRlb1dpZHRoOiAwLCAvLyBJbnRyaW5zaWMgd2lkdGggb2YgdGhlIHZpZGVvIGluIHBpeGVscy5cblx0XHRcdHZpZGVvSGVpZ2h0OiAwLCAvLyBJbnRyaW5zaWMgaGVpZ2h0IG9mIHRoZSB2aWRlbyBpbiBwaXhlbHMuXG5cdFx0XHRyZWFkeVN0YXRlOiAwLFxuXHRcdFx0bmV0d29ya1N0YXRlOiAwLFxuXHRcdFx0cGxheWJhY2tSYXRlOiAxLCAvLyBXYXJuaW5nIC0gTm93IGJvdGggYW4gb3B0aW9uIGFuZCBhIHN0YXR1cyBwcm9wZXJ0eVxuXHRcdFx0ZW5kZWQ6IDBcblxuLypcdFx0UGVyc2lzdGFudCBzdGF0dXMgcHJvcGVydGllcyBjcmVhdGVkIGR5bmFtaWNhbGx5IGF0IF9pbml0KCk6XG5cdFx0XHR3aWR0aFxuXHRcdFx0aGVpZ2h0XG5cdFx0XHRjc3NDbGFzc1xuXHRcdFx0bmF0aXZlVmlkZW9Db250cm9sc1xuXHRcdFx0bm9GdWxsV2luZG93XG5cdFx0XHRub1ZvbHVtZVxuXHRcdFx0cGxheWJhY2tSYXRlRW5hYmxlZCAvLyBXYXJuaW5nIC0gVGVjaG5pY2FsbHksIHdlIGNhbiBoYXZlIGJvdGggRmxhc2ggYW5kIEhUTUwsIHNvIHRoaXMgbWlnaHQgbm90IGJlIGNvcnJlY3QgaWYgdGhlIEZsYXNoIGlzIGFjdGl2ZS4gVGhhdCBpcyBhIG5pY2hlIGNhc2UuXG4qL1xuXHRcdH0sXG5cblx0XHRpbnRlcm5hbDogeyAvLyBJbnN0YW5jZWQgaW4gX2luaXQoKVxuXHRcdFx0cmVhZHk6IGZhbHNlXG5cdFx0XHQvLyBpbnN0YW5jZTogdW5kZWZpbmVkXG5cdFx0XHQvLyBkb21Ob2RlOiB1bmRlZmluZWRcblx0XHRcdC8vIGh0bWxEbHlDbWRJZDogdW5kZWZpbmVkXG5cdFx0XHQvLyBhdXRvaGlkZUlkOiB1bmRlZmluZWRcblx0XHRcdC8vIG1vdXNlOiB1bmRlZmluZWRcblx0XHRcdC8vIGNtZHNJZ25vcmVkXG5cdFx0fSxcblx0XHRzb2x1dGlvbjogeyAvLyBTdGF0aWMgT2JqZWN0OiBEZWZpbmVzIHRoZSBzb2x1dGlvbnMgYnVpbHQgaW4galBsYXllci5cblx0XHRcdGh0bWw6IHRydWUsXG5cdFx0XHRhdXJvcmE6IHRydWUsXG5cdFx0XHRmbGFzaDogdHJ1ZVxuXHRcdH0sXG5cdFx0Ly8gJ01QRUctNCBzdXBwb3J0JyA6IGNhblBsYXlUeXBlKCd2aWRlby9tcDQ7IGNvZGVjcz1cIm1wNHYuMjAuOFwiJylcblx0XHRmb3JtYXQ6IHsgLy8gU3RhdGljIE9iamVjdFxuXHRcdFx0bXAzOiB7XG5cdFx0XHRcdGNvZGVjOiAnYXVkaW8vbXBlZycsXG5cdFx0XHRcdGZsYXNoQ2FuUGxheTogdHJ1ZSxcblx0XHRcdFx0bWVkaWE6ICdhdWRpbydcblx0XHRcdH0sXG5cdFx0XHRtNGE6IHsgLy8gQUFDIC8gTVA0XG5cdFx0XHRcdGNvZGVjOiAnYXVkaW8vbXA0OyBjb2RlY3M9XCJtcDRhLjQwLjJcIicsXG5cdFx0XHRcdGZsYXNoQ2FuUGxheTogdHJ1ZSxcblx0XHRcdFx0bWVkaWE6ICdhdWRpbydcblx0XHRcdH0sXG5cdFx0XHRtM3U4YTogeyAvLyBBQUMgLyBNUDQgLyBBcHBsZSBITFNcblx0XHRcdFx0Y29kZWM6ICdhcHBsaWNhdGlvbi92bmQuYXBwbGUubXBlZ3VybDsgY29kZWNzPVwibXA0YS40MC4yXCInLFxuXHRcdFx0XHRmbGFzaENhblBsYXk6IGZhbHNlLFxuXHRcdFx0XHRtZWRpYTogJ2F1ZGlvJ1xuXHRcdFx0fSxcblx0XHRcdG0zdWE6IHsgLy8gTTNVXG5cdFx0XHRcdGNvZGVjOiAnYXVkaW8vbXBlZ3VybCcsXG5cdFx0XHRcdGZsYXNoQ2FuUGxheTogZmFsc2UsXG5cdFx0XHRcdG1lZGlhOiAnYXVkaW8nXG5cdFx0XHR9LFxuXHRcdFx0b2dhOiB7IC8vIE9HR1xuXHRcdFx0XHRjb2RlYzogJ2F1ZGlvL29nZzsgY29kZWNzPVwidm9yYmlzLCBvcHVzXCInLFxuXHRcdFx0XHRmbGFzaENhblBsYXk6IGZhbHNlLFxuXHRcdFx0XHRtZWRpYTogJ2F1ZGlvJ1xuXHRcdFx0fSxcblx0XHRcdGZsYWM6IHsgLy8gRkxBQ1xuXHRcdFx0XHRjb2RlYzogJ2F1ZGlvL3gtZmxhYycsXG5cdFx0XHRcdGZsYXNoQ2FuUGxheTogZmFsc2UsXG5cdFx0XHRcdG1lZGlhOiAnYXVkaW8nXG5cdFx0XHR9LFxuXHRcdFx0d2F2OiB7IC8vIFBDTVxuXHRcdFx0XHRjb2RlYzogJ2F1ZGlvL3dhdjsgY29kZWNzPVwiMVwiJyxcblx0XHRcdFx0Zmxhc2hDYW5QbGF5OiBmYWxzZSxcblx0XHRcdFx0bWVkaWE6ICdhdWRpbydcblx0XHRcdH0sXG5cdFx0XHR3ZWJtYTogeyAvLyBXRUJNXG5cdFx0XHRcdGNvZGVjOiAnYXVkaW8vd2VibTsgY29kZWNzPVwidm9yYmlzXCInLFxuXHRcdFx0XHRmbGFzaENhblBsYXk6IGZhbHNlLFxuXHRcdFx0XHRtZWRpYTogJ2F1ZGlvJ1xuXHRcdFx0fSxcblx0XHRcdGZsYTogeyAvLyBGTFYgLyBGNEFcblx0XHRcdFx0Y29kZWM6ICdhdWRpby94LWZsdicsXG5cdFx0XHRcdGZsYXNoQ2FuUGxheTogdHJ1ZSxcblx0XHRcdFx0bWVkaWE6ICdhdWRpbydcblx0XHRcdH0sXG5cdFx0XHRydG1wYTogeyAvLyBSVE1QIEFVRElPXG5cdFx0XHRcdGNvZGVjOiAnYXVkaW8vcnRtcDsgY29kZWNzPVwicnRtcFwiJyxcblx0XHRcdFx0Zmxhc2hDYW5QbGF5OiB0cnVlLFxuXHRcdFx0XHRtZWRpYTogJ2F1ZGlvJ1xuXHRcdFx0fSxcblx0XHRcdG00djogeyAvLyBILjI2NCAvIE1QNFxuXHRcdFx0XHRjb2RlYzogJ3ZpZGVvL21wNDsgY29kZWNzPVwiYXZjMS40MkUwMUUsIG1wNGEuNDAuMlwiJyxcblx0XHRcdFx0Zmxhc2hDYW5QbGF5OiB0cnVlLFxuXHRcdFx0XHRtZWRpYTogJ3ZpZGVvJ1xuXHRcdFx0fSxcblx0XHRcdG0zdTh2OiB7IC8vIEguMjY0IC8gQUFDIC8gTVA0IC8gQXBwbGUgSExTXG5cdFx0XHRcdGNvZGVjOiAnYXBwbGljYXRpb24vdm5kLmFwcGxlLm1wZWd1cmw7IGNvZGVjcz1cImF2YzEuNDJFMDFFLCBtcDRhLjQwLjJcIicsXG5cdFx0XHRcdGZsYXNoQ2FuUGxheTogZmFsc2UsXG5cdFx0XHRcdG1lZGlhOiAndmlkZW8nXG5cdFx0XHR9LFxuXHRcdFx0bTN1djogeyAvLyBNM1Vcblx0XHRcdFx0Y29kZWM6ICdhdWRpby9tcGVndXJsJyxcblx0XHRcdFx0Zmxhc2hDYW5QbGF5OiBmYWxzZSxcblx0XHRcdFx0bWVkaWE6ICd2aWRlbydcblx0XHRcdH0sXG5cdFx0XHRvZ3Y6IHsgLy8gT0dHXG5cdFx0XHRcdGNvZGVjOiAndmlkZW8vb2dnOyBjb2RlY3M9XCJ0aGVvcmEsIHZvcmJpc1wiJyxcblx0XHRcdFx0Zmxhc2hDYW5QbGF5OiBmYWxzZSxcblx0XHRcdFx0bWVkaWE6ICd2aWRlbydcblx0XHRcdH0sXG5cdFx0XHR3ZWJtdjogeyAvLyBXRUJNXG5cdFx0XHRcdGNvZGVjOiAndmlkZW8vd2VibTsgY29kZWNzPVwidm9yYmlzLCB2cDhcIicsXG5cdFx0XHRcdGZsYXNoQ2FuUGxheTogZmFsc2UsXG5cdFx0XHRcdG1lZGlhOiAndmlkZW8nXG5cdFx0XHR9LFxuXHRcdFx0Zmx2OiB7IC8vIEZMViAvIEY0VlxuXHRcdFx0XHRjb2RlYzogJ3ZpZGVvL3gtZmx2Jyxcblx0XHRcdFx0Zmxhc2hDYW5QbGF5OiB0cnVlLFxuXHRcdFx0XHRtZWRpYTogJ3ZpZGVvJ1xuXHRcdFx0fSxcblx0XHRcdHJ0bXB2OiB7IC8vIFJUTVAgVklERU9cblx0XHRcdFx0Y29kZWM6ICd2aWRlby9ydG1wOyBjb2RlY3M9XCJydG1wXCInLFxuXHRcdFx0XHRmbGFzaENhblBsYXk6IHRydWUsXG5cdFx0XHRcdG1lZGlhOiAndmlkZW8nXG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfaW5pdDogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0XHRcdHRoaXMuZWxlbWVudC5lbXB0eSgpO1xuXG5cdFx0XHR0aGlzLnN0YXR1cyA9ICQuZXh0ZW5kKHt9LCB0aGlzLnN0YXR1cyk7IC8vIENvcHkgc3RhdGljIHRvIHVuaXF1ZSBpbnN0YW5jZS5cblx0XHRcdHRoaXMuaW50ZXJuYWwgPSAkLmV4dGVuZCh7fSwgdGhpcy5pbnRlcm5hbCk7IC8vIENvcHkgc3RhdGljIHRvIHVuaXF1ZSBpbnN0YW5jZS5cblxuXHRcdFx0Ly8gSW5pdGlhbGl6ZSB0aGUgdGltZSBmb3JtYXRcblx0XHRcdHRoaXMub3B0aW9ucy50aW1lRm9ybWF0ID0gJC5leHRlbmQoe30sICQualBsYXllci50aW1lRm9ybWF0LCB0aGlzLm9wdGlvbnMudGltZUZvcm1hdCk7XG5cblx0XHRcdC8vIE9uIGlPUywgYXNzdW1lIGNvbW1hbmRzIHdpbGwgYmUgaWdub3JlZCBiZWZvcmUgdXNlciBpbml0aWF0ZXMgdGhlbS5cblx0XHRcdHRoaXMuaW50ZXJuYWwuY21kc0lnbm9yZWQgPSAkLmpQbGF5ZXIucGxhdGZvcm0uaXBhZCB8fCAkLmpQbGF5ZXIucGxhdGZvcm0uaXBob25lIHx8ICQualBsYXllci5wbGF0Zm9ybS5pcG9kO1xuXG5cdFx0XHR0aGlzLmludGVybmFsLmRvbU5vZGUgPSB0aGlzLmVsZW1lbnQuZ2V0KDApO1xuXG5cdFx0XHQvLyBBZGQga2V5IGJpbmRpbmdzIGZvY3VzIHRvIDFzdCBqUGxheWVyIGluc3RhbmNlZCB3aXRoIGtleSBjb250cm9sIGVuYWJsZWQuXG5cdFx0XHRpZih0aGlzLm9wdGlvbnMua2V5RW5hYmxlZCAmJiAhJC5qUGxheWVyLmZvY3VzKSB7XG5cdFx0XHRcdCQualBsYXllci5mb2N1cyA9IHRoaXM7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEEgZml4IGZvciBBbmRyb2lkIHdoZXJlIG9sZGVyICgyLjMpIGFuZCBldmVuIHNvbWUgNC54IGRldmljZXMgZmFpbCB0byB3b3JrIHdoZW4gY2hhbmdpbmcgdGhlICphdWRpbyogU1JDIGFuZCB0aGVuIHBsYXlpbmcgaW1tZWRpYXRlbHkuXG5cdFx0XHR0aGlzLmFuZHJvaWRGaXggPSB7XG5cdFx0XHRcdHNldE1lZGlhOiBmYWxzZSwgLy8gVHJ1ZSB3aGVuIG1lZGlhIHNldFxuXHRcdFx0XHRwbGF5OiBmYWxzZSwgLy8gVHJ1ZSB3aGVuIGEgcHJvZ3Jlc3MgZXZlbnQgd2lsbCBpbnN0cnVjdCB0aGUgbWVkaWEgdG8gcGxheVxuXHRcdFx0XHRwYXVzZTogZmFsc2UsIC8vIFRydWUgd2hlbiBhIHByb2dyZXNzIGV2ZW50IHdpbGwgaW5zdHJ1Y3QgdGhlIG1lZGlhIHRvIHBhdXNlIGF0IGEgdGltZS5cblx0XHRcdFx0dGltZTogTmFOIC8vIFRoZSBwbGF5KHRpbWUpIHBhcmFtZXRlclxuXHRcdFx0fTtcblx0XHRcdGlmKCQualBsYXllci5wbGF0Zm9ybS5hbmRyb2lkKSB7XG5cdFx0XHRcdHRoaXMub3B0aW9ucy5wcmVsb2FkID0gdGhpcy5vcHRpb25zLnByZWxvYWQgIT09ICdhdXRvJyA/ICdtZXRhZGF0YScgOiAnYXV0byc7IC8vIERlZmF1bHQgdG8gbWV0YWRhdGEsIGJ1dCBhbGxvdyBhdXRvLlxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmZvcm1hdHMgPSBbXTsgLy8gQXJyYXkgYmFzZWQgb24gc3VwcGxpZWQgc3RyaW5nIG9wdGlvbi4gT3JkZXIgZGVmaW5lcyBwcmlvcml0eS5cblx0XHRcdHRoaXMuc29sdXRpb25zID0gW107IC8vIEFycmF5IGJhc2VkIG9uIHNvbHV0aW9uIHN0cmluZyBvcHRpb24uIE9yZGVyIGRlZmluZXMgcHJpb3JpdHkuXG5cdFx0XHR0aGlzLnJlcXVpcmUgPSB7fTsgLy8gV2hpY2ggbWVkaWEgdHlwZXMgYXJlIHJlcXVpcmVkOiB2aWRlbywgYXVkaW8uXG5cblx0XHRcdHRoaXMuaHRtbEVsZW1lbnQgPSB7fTsgLy8gRE9NIGVsZW1lbnRzIGNyZWF0ZWQgYnkgalBsYXllclxuXHRcdFx0dGhpcy5odG1sID0ge307IC8vIEluIF9pbml0KCkncyB0aGlzLmRlc2lyZWQgY29kZSBhbmQgc2V0bWVkaWEoKTogQWNjZXNzZWQgdmlhIHRoaXNbc29sdXRpb25dLCB3aGVyZSBzb2x1dGlvbiBmcm9tIHRoaXMuc29sdXRpb25zIGFycmF5LlxuXHRcdFx0dGhpcy5odG1sLmF1ZGlvID0ge307XG5cdFx0XHR0aGlzLmh0bWwudmlkZW8gPSB7fTtcblx0XHRcdHRoaXMuYXVyb3JhID0ge307IC8vIEluIF9pbml0KCkncyB0aGlzLmRlc2lyZWQgY29kZSBhbmQgc2V0bWVkaWEoKTogQWNjZXNzZWQgdmlhIHRoaXNbc29sdXRpb25dLCB3aGVyZSBzb2x1dGlvbiBmcm9tIHRoaXMuc29sdXRpb25zIGFycmF5LlxuXHRcdFx0dGhpcy5hdXJvcmEuZm9ybWF0cyA9IFtdO1xuXHRcdFx0dGhpcy5hdXJvcmEucHJvcGVydGllcyA9IFtdO1xuXHRcdFx0dGhpcy5mbGFzaCA9IHt9OyAvLyBJbiBfaW5pdCgpJ3MgdGhpcy5kZXNpcmVkIGNvZGUgYW5kIHNldG1lZGlhKCk6IEFjY2Vzc2VkIHZpYSB0aGlzW3NvbHV0aW9uXSwgd2hlcmUgc29sdXRpb24gZnJvbSB0aGlzLnNvbHV0aW9ucyBhcnJheS5cblxuXHRcdFx0dGhpcy5jc3MgPSB7fTtcblx0XHRcdHRoaXMuY3NzLmNzID0ge307IC8vIEhvbGRzIHRoZSBjc3Mgc2VsZWN0b3Igc3RyaW5nc1xuXHRcdFx0dGhpcy5jc3MuanEgPSB7fTsgLy8gSG9sZHMgalF1ZXJ5IHNlbGVjdG9ycy4gaWUuLCAkKGNzcy5jcy5tZXRob2QpXG5cblx0XHRcdHRoaXMuYW5jZXN0b3JKcSA9IFtdOyAvLyBIb2xkcyBqUXVlcnkgc2VsZWN0b3Igb2YgY3NzU2VsZWN0b3JBbmNlc3Rvci4gSW5pdCB3b3VsZCB1c2UgJCgpIGluc3RlYWQgb2YgW10sIGJ1dCBpdCBpcyBvbmx5IDEuNCtcblxuXHRcdFx0dGhpcy5vcHRpb25zLnZvbHVtZSA9IHRoaXMuX2xpbWl0VmFsdWUodGhpcy5vcHRpb25zLnZvbHVtZSwgMCwgMSk7IC8vIExpbWl0IHZvbHVtZSB2YWx1ZSdzIGJvdW5kcy5cblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmb3JtYXRzIGFycmF5LCB3aXRoIHByb3JpdHkgYmFzZWQgb24gdGhlIG9yZGVyIG9mIHRoZSBzdXBwbGllZCBmb3JtYXRzIHN0cmluZ1xuXHRcdFx0JC5lYWNoKHRoaXMub3B0aW9ucy5zdXBwbGllZC50b0xvd2VyQ2FzZSgpLnNwbGl0KFwiLFwiKSwgZnVuY3Rpb24oaW5kZXgxLCB2YWx1ZTEpIHtcblx0XHRcdFx0dmFyIGZvcm1hdCA9IHZhbHVlMS5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCBcIlwiKTsgLy90cmltXG5cdFx0XHRcdGlmKHNlbGYuZm9ybWF0W2Zvcm1hdF0pIHsgLy8gQ2hlY2sgZm9ybWF0IGlzIHZhbGlkLlxuXHRcdFx0XHRcdHZhciBkdXBGb3VuZCA9IGZhbHNlO1xuXHRcdFx0XHRcdCQuZWFjaChzZWxmLmZvcm1hdHMsIGZ1bmN0aW9uKGluZGV4MiwgdmFsdWUyKSB7IC8vIENoZWNrIGZvciBkdXBsaWNhdGVzXG5cdFx0XHRcdFx0XHRpZihmb3JtYXQgPT09IHZhbHVlMikge1xuXHRcdFx0XHRcdFx0XHRkdXBGb3VuZCA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRpZighZHVwRm91bmQpIHtcblx0XHRcdFx0XHRcdHNlbGYuZm9ybWF0cy5wdXNoKGZvcm1hdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBzb2x1dGlvbnMgYXJyYXksIHdpdGggcHJvcml0eSBiYXNlZCBvbiB0aGUgb3JkZXIgb2YgdGhlIHNvbHV0aW9uIHN0cmluZ1xuXHRcdFx0JC5lYWNoKHRoaXMub3B0aW9ucy5zb2x1dGlvbi50b0xvd2VyQ2FzZSgpLnNwbGl0KFwiLFwiKSwgZnVuY3Rpb24oaW5kZXgxLCB2YWx1ZTEpIHtcblx0XHRcdFx0dmFyIHNvbHV0aW9uID0gdmFsdWUxLnJlcGxhY2UoL15cXHMrfFxccyskL2csIFwiXCIpOyAvL3RyaW1cblx0XHRcdFx0aWYoc2VsZi5zb2x1dGlvbltzb2x1dGlvbl0pIHsgLy8gQ2hlY2sgc29sdXRpb24gaXMgdmFsaWQuXG5cdFx0XHRcdFx0dmFyIGR1cEZvdW5kID0gZmFsc2U7XG5cdFx0XHRcdFx0JC5lYWNoKHNlbGYuc29sdXRpb25zLCBmdW5jdGlvbihpbmRleDIsIHZhbHVlMikgeyAvLyBDaGVjayBmb3IgZHVwbGljYXRlc1xuXHRcdFx0XHRcdFx0aWYoc29sdXRpb24gPT09IHZhbHVlMikge1xuXHRcdFx0XHRcdFx0XHRkdXBGb3VuZCA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRpZighZHVwRm91bmQpIHtcblx0XHRcdFx0XHRcdHNlbGYuc29sdXRpb25zLnB1c2goc29sdXRpb24pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdC8vIENyZWF0ZSBBdXJvcmEuanMgZm9ybWF0cyBhcnJheVxuXHRcdFx0JC5lYWNoKHRoaXMub3B0aW9ucy5hdXJvcmFGb3JtYXRzLnRvTG93ZXJDYXNlKCkuc3BsaXQoXCIsXCIpLCBmdW5jdGlvbihpbmRleDEsIHZhbHVlMSkge1xuXHRcdFx0XHR2YXIgZm9ybWF0ID0gdmFsdWUxLnJlcGxhY2UoL15cXHMrfFxccyskL2csIFwiXCIpOyAvL3RyaW1cblx0XHRcdFx0aWYoc2VsZi5mb3JtYXRbZm9ybWF0XSkgeyAvLyBDaGVjayBmb3JtYXQgaXMgdmFsaWQuXG5cdFx0XHRcdFx0dmFyIGR1cEZvdW5kID0gZmFsc2U7XG5cdFx0XHRcdFx0JC5lYWNoKHNlbGYuYXVyb3JhLmZvcm1hdHMsIGZ1bmN0aW9uKGluZGV4MiwgdmFsdWUyKSB7IC8vIENoZWNrIGZvciBkdXBsaWNhdGVzXG5cdFx0XHRcdFx0XHRpZihmb3JtYXQgPT09IHZhbHVlMikge1xuXHRcdFx0XHRcdFx0XHRkdXBGb3VuZCA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRpZighZHVwRm91bmQpIHtcblx0XHRcdFx0XHRcdHNlbGYuYXVyb3JhLmZvcm1hdHMucHVzaChmb3JtYXQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMuaW50ZXJuYWwuaW5zdGFuY2UgPSBcImpwX1wiICsgdGhpcy5jb3VudDtcblx0XHRcdHRoaXMuaW5zdGFuY2VzW3RoaXMuaW50ZXJuYWwuaW5zdGFuY2VdID0gdGhpcy5lbGVtZW50O1xuXG5cdFx0XHQvLyBDaGVjayB0aGUgalBsYXllciBkaXYgaGFzIGFuIGlkIGFuZCBjcmVhdGUgb25lIGlmIHJlcXVpcmVkLiBJbXBvcnRhbnQgZm9yIEZsYXNoIHRvIGtub3cgdGhlIHVuaXF1ZSBpZCBmb3IgY29tbXMuXG5cdFx0XHRpZighdGhpcy5lbGVtZW50LmF0dHIoXCJpZFwiKSkge1xuXHRcdFx0XHR0aGlzLmVsZW1lbnQuYXR0cihcImlkXCIsIHRoaXMub3B0aW9ucy5pZFByZWZpeCArIFwiX2pwbGF5ZXJfXCIgKyB0aGlzLmNvdW50KTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5pbnRlcm5hbC5zZWxmID0gJC5leHRlbmQoe30sIHtcblx0XHRcdFx0aWQ6IHRoaXMuZWxlbWVudC5hdHRyKFwiaWRcIiksXG5cdFx0XHRcdGpxOiB0aGlzLmVsZW1lbnRcblx0XHRcdH0pO1xuXHRcdFx0dGhpcy5pbnRlcm5hbC5hdWRpbyA9ICQuZXh0ZW5kKHt9LCB7XG5cdFx0XHRcdGlkOiB0aGlzLm9wdGlvbnMuaWRQcmVmaXggKyBcIl9hdWRpb19cIiArIHRoaXMuY291bnQsXG5cdFx0XHRcdGpxOiB1bmRlZmluZWRcblx0XHRcdH0pO1xuXHRcdFx0dGhpcy5pbnRlcm5hbC52aWRlbyA9ICQuZXh0ZW5kKHt9LCB7XG5cdFx0XHRcdGlkOiB0aGlzLm9wdGlvbnMuaWRQcmVmaXggKyBcIl92aWRlb19cIiArIHRoaXMuY291bnQsXG5cdFx0XHRcdGpxOiB1bmRlZmluZWRcblx0XHRcdH0pO1xuXHRcdFx0dGhpcy5pbnRlcm5hbC5mbGFzaCA9ICQuZXh0ZW5kKHt9LCB7XG5cdFx0XHRcdGlkOiB0aGlzLm9wdGlvbnMuaWRQcmVmaXggKyBcIl9mbGFzaF9cIiArIHRoaXMuY291bnQsXG5cdFx0XHRcdGpxOiB1bmRlZmluZWQsXG5cdFx0XHRcdHN3ZjogdGhpcy5vcHRpb25zLnN3ZlBhdGggKyAodGhpcy5vcHRpb25zLnN3ZlBhdGgudG9Mb3dlckNhc2UoKS5zbGljZSgtNCkgIT09IFwiLnN3ZlwiID8gKHRoaXMub3B0aW9ucy5zd2ZQYXRoICYmIHRoaXMub3B0aW9ucy5zd2ZQYXRoLnNsaWNlKC0xKSAhPT0gXCIvXCIgPyBcIi9cIiA6IFwiXCIpICsgXCJqcXVlcnkuanBsYXllci5zd2ZcIiA6IFwiXCIpXG5cdFx0XHR9KTtcblx0XHRcdHRoaXMuaW50ZXJuYWwucG9zdGVyID0gJC5leHRlbmQoe30sIHtcblx0XHRcdFx0aWQ6IHRoaXMub3B0aW9ucy5pZFByZWZpeCArIFwiX3Bvc3Rlcl9cIiArIHRoaXMuY291bnQsXG5cdFx0XHRcdGpxOiB1bmRlZmluZWRcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBSZWdpc3RlciBsaXN0ZW5lcnMgZGVmaW5lZCBpbiB0aGUgY29uc3RydWN0b3Jcblx0XHRcdCQuZWFjaCgkLmpQbGF5ZXIuZXZlbnQsIGZ1bmN0aW9uKGV2ZW50TmFtZSxldmVudFR5cGUpIHtcblx0XHRcdFx0aWYoc2VsZi5vcHRpb25zW2V2ZW50TmFtZV0gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHNlbGYuZWxlbWVudC5iaW5kKGV2ZW50VHlwZSArIFwiLmpQbGF5ZXJcIiwgc2VsZi5vcHRpb25zW2V2ZW50TmFtZV0pOyAvLyBXaXRoIC5qUGxheWVyIG5hbWVzcGFjZS5cblx0XHRcdFx0XHRzZWxmLm9wdGlvbnNbZXZlbnROYW1lXSA9IHVuZGVmaW5lZDsgLy8gRGVzdHJveSB0aGUgaGFuZGxlciBwb2ludGVyIGNvcHkgb24gdGhlIG9wdGlvbnMuIFJlYXNvbiwgZXZlbnRzIGNhbiBiZSBhZGRlZC9yZW1vdmVkIGluIG90aGVyIHdheXMgc28gdGhpcyBjb3VsZCBiZSBvYnNvbGV0ZSBhbmQgbWlzbGVhZGluZy5cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiB3ZSByZXF1aXJlIHNvbHV0aW9ucyBmb3IgYXVkaW8sIHZpZGVvIG9yIGJvdGggbWVkaWEgdHlwZXMuXG5cdFx0XHR0aGlzLnJlcXVpcmUuYXVkaW8gPSBmYWxzZTtcblx0XHRcdHRoaXMucmVxdWlyZS52aWRlbyA9IGZhbHNlO1xuXHRcdFx0JC5lYWNoKHRoaXMuZm9ybWF0cywgZnVuY3Rpb24ocHJpb3JpdHksIGZvcm1hdCkge1xuXHRcdFx0XHRzZWxmLnJlcXVpcmVbc2VsZi5mb3JtYXRbZm9ybWF0XS5tZWRpYV0gPSB0cnVlO1xuXHRcdFx0fSk7XG5cblx0XHRcdC8vIE5vdyByZXF1aXJlZCB0eXBlcyBhcmUga25vd24sIGZpbmlzaCB0aGUgb3B0aW9ucyBkZWZhdWx0IHNldHRpbmdzLlxuXHRcdFx0aWYodGhpcy5yZXF1aXJlLnZpZGVvKSB7XG5cdFx0XHRcdHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LFxuXHRcdFx0XHRcdHRoaXMub3B0aW9uc1ZpZGVvLFxuXHRcdFx0XHRcdHRoaXMub3B0aW9uc1xuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5vcHRpb25zID0gJC5leHRlbmQodHJ1ZSwge30sXG5cdFx0XHRcdFx0dGhpcy5vcHRpb25zQXVkaW8sXG5cdFx0XHRcdFx0dGhpcy5vcHRpb25zXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9zZXRTaXplKCk7IC8vIHVwZGF0ZSBzdGF0dXMgYW5kIGpQbGF5ZXIgZWxlbWVudCBzaXplXG5cblx0XHRcdC8vIERldGVybWluZSB0aGUgc3RhdHVzIGZvciBCbG9ja2xpc3RlZCBvcHRpb25zLlxuXHRcdFx0dGhpcy5zdGF0dXMubmF0aXZlVmlkZW9Db250cm9scyA9IHRoaXMuX3VhQmxvY2tsaXN0KHRoaXMub3B0aW9ucy5uYXRpdmVWaWRlb0NvbnRyb2xzKTtcblx0XHRcdHRoaXMuc3RhdHVzLm5vRnVsbFdpbmRvdyA9IHRoaXMuX3VhQmxvY2tsaXN0KHRoaXMub3B0aW9ucy5ub0Z1bGxXaW5kb3cpO1xuXHRcdFx0dGhpcy5zdGF0dXMubm9Wb2x1bWUgPSB0aGlzLl91YUJsb2NrbGlzdCh0aGlzLm9wdGlvbnMubm9Wb2x1bWUpO1xuXG5cdFx0XHQvLyBDcmVhdGUgZXZlbnQgaGFuZGxlcnMgaWYgbmF0aXZlIGZ1bGxzY3JlZW4gaXMgc3VwcG9ydGVkXG5cdFx0XHRpZigkLmpQbGF5ZXIubmF0aXZlRmVhdHVyZXMuZnVsbHNjcmVlbi5hcGkuZnVsbHNjcmVlbkVuYWJsZWQpIHtcblx0XHRcdFx0dGhpcy5fZnVsbHNjcmVlbkFkZEV2ZW50TGlzdGVuZXJzKCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBuYXRpdmUgY29udHJvbHMgYXJlIG9ubHkgZm9yIHZpZGVvIGFuZCBhcmUgZGlzYWJsZWQgd2hlbiBhdWRpbyBpcyBhbHNvIHVzZWQuXG5cdFx0XHR0aGlzLl9yZXN0cmljdE5hdGl2ZVZpZGVvQ29udHJvbHMoKTtcblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBwb3N0ZXIgaW1hZ2UuXG5cdFx0XHR0aGlzLmh0bWxFbGVtZW50LnBvc3RlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXHRcdFx0dGhpcy5odG1sRWxlbWVudC5wb3N0ZXIuaWQgPSB0aGlzLmludGVybmFsLnBvc3Rlci5pZDtcblx0XHRcdHRoaXMuaHRtbEVsZW1lbnQucG9zdGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkgeyAvLyBOb3RlIHRoYXQgdGhpcyBkaWQgbm90IHdvcmsgb24gRmlyZWZveCAzLjY6IHBvc3Rlci5hZGRFdmVudExpc3RlbmVyKFwib25sb2FkXCIsIGZ1bmN0aW9uKCkge30sIGZhbHNlKTsgRGlkIG5vdCBpbnZlc3RpZ2F0ZSB4LWJyb3dzZXIuXG5cdFx0XHRcdGlmKCFzZWxmLnN0YXR1cy52aWRlbyB8fCBzZWxmLnN0YXR1cy53YWl0Rm9yUGxheSkge1xuXHRcdFx0XHRcdHNlbGYuaW50ZXJuYWwucG9zdGVyLmpxLnNob3coKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdHRoaXMuZWxlbWVudC5hcHBlbmQodGhpcy5odG1sRWxlbWVudC5wb3N0ZXIpO1xuXHRcdFx0dGhpcy5pbnRlcm5hbC5wb3N0ZXIuanEgPSAkKFwiI1wiICsgdGhpcy5pbnRlcm5hbC5wb3N0ZXIuaWQpO1xuXHRcdFx0dGhpcy5pbnRlcm5hbC5wb3N0ZXIuanEuY3NzKHsnd2lkdGgnOiB0aGlzLnN0YXR1cy53aWR0aCwgJ2hlaWdodCc6IHRoaXMuc3RhdHVzLmhlaWdodH0pO1xuXHRcdFx0dGhpcy5pbnRlcm5hbC5wb3N0ZXIuanEuaGlkZSgpO1xuXHRcdFx0dGhpcy5pbnRlcm5hbC5wb3N0ZXIuanEuYmluZChcImNsaWNrLmpQbGF5ZXJcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuX3RyaWdnZXIoJC5qUGxheWVyLmV2ZW50LmNsaWNrKTtcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBHZW5lcmF0ZSB0aGUgcmVxdWlyZWQgbWVkaWEgZWxlbWVudHNcblx0XHRcdHRoaXMuaHRtbC5hdWRpby5hdmFpbGFibGUgPSBmYWxzZTtcblx0XHRcdGlmKHRoaXMucmVxdWlyZS5hdWRpbykgeyAvLyBJZiBhIHN1cHBsaWVkIGZvcm1hdCBpcyBhdWRpb1xuXHRcdFx0XHR0aGlzLmh0bWxFbGVtZW50LmF1ZGlvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXVkaW8nKTtcblx0XHRcdFx0dGhpcy5odG1sRWxlbWVudC5hdWRpby5pZCA9IHRoaXMuaW50ZXJuYWwuYXVkaW8uaWQ7XG5cdFx0XHRcdHRoaXMuaHRtbC5hdWRpby5hdmFpbGFibGUgPSAhIXRoaXMuaHRtbEVsZW1lbnQuYXVkaW8uY2FuUGxheVR5cGUgJiYgdGhpcy5fdGVzdENhblBsYXlUeXBlKHRoaXMuaHRtbEVsZW1lbnQuYXVkaW8pOyAvLyBUZXN0IGlzIGZvciBJRTkgb24gV2luIFNlcnZlciAyMDA4LlxuXHRcdFx0fVxuXHRcdFx0dGhpcy5odG1sLnZpZGVvLmF2YWlsYWJsZSA9IGZhbHNlO1xuXHRcdFx0aWYodGhpcy5yZXF1aXJlLnZpZGVvKSB7IC8vIElmIGEgc3VwcGxpZWQgZm9ybWF0IGlzIHZpZGVvXG5cdFx0XHRcdHRoaXMuaHRtbEVsZW1lbnQudmlkZW8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpO1xuXHRcdFx0XHR0aGlzLmh0bWxFbGVtZW50LnZpZGVvLmlkID0gdGhpcy5pbnRlcm5hbC52aWRlby5pZDtcblx0XHRcdFx0dGhpcy5odG1sLnZpZGVvLmF2YWlsYWJsZSA9ICEhdGhpcy5odG1sRWxlbWVudC52aWRlby5jYW5QbGF5VHlwZSAmJiB0aGlzLl90ZXN0Q2FuUGxheVR5cGUodGhpcy5odG1sRWxlbWVudC52aWRlbyk7IC8vIFRlc3QgaXMgZm9yIElFOSBvbiBXaW4gU2VydmVyIDIwMDguXG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuZmxhc2guYXZhaWxhYmxlID0gdGhpcy5fY2hlY2tGb3JGbGFzaCgxMC4xKTtcblxuXHRcdFx0dGhpcy5odG1sLmNhblBsYXkgPSB7fTtcblx0XHRcdHRoaXMuYXVyb3JhLmNhblBsYXkgPSB7fTtcblx0XHRcdHRoaXMuZmxhc2guY2FuUGxheSA9IHt9O1xuXHRcdFx0JC5lYWNoKHRoaXMuZm9ybWF0cywgZnVuY3Rpb24ocHJpb3JpdHksIGZvcm1hdCkge1xuXHRcdFx0XHRzZWxmLmh0bWwuY2FuUGxheVtmb3JtYXRdID0gc2VsZi5odG1sW3NlbGYuZm9ybWF0W2Zvcm1hdF0ubWVkaWFdLmF2YWlsYWJsZSAmJiBcIlwiICE9PSBzZWxmLmh0bWxFbGVtZW50W3NlbGYuZm9ybWF0W2Zvcm1hdF0ubWVkaWFdLmNhblBsYXlUeXBlKHNlbGYuZm9ybWF0W2Zvcm1hdF0uY29kZWMpO1xuXHRcdFx0XHRzZWxmLmF1cm9yYS5jYW5QbGF5W2Zvcm1hdF0gPSAoJC5pbkFycmF5KGZvcm1hdCwgc2VsZi5hdXJvcmEuZm9ybWF0cykgPiAtMSk7XG5cdFx0XHRcdHNlbGYuZmxhc2guY2FuUGxheVtmb3JtYXRdID0gc2VsZi5mb3JtYXRbZm9ybWF0XS5mbGFzaENhblBsYXkgJiYgc2VsZi5mbGFzaC5hdmFpbGFibGU7XG5cdFx0XHR9KTtcblx0XHRcdHRoaXMuaHRtbC5kZXNpcmVkID0gZmFsc2U7XG5cdFx0XHR0aGlzLmF1cm9yYS5kZXNpcmVkID0gZmFsc2U7XG5cdFx0XHR0aGlzLmZsYXNoLmRlc2lyZWQgPSBmYWxzZTtcblx0XHRcdCQuZWFjaCh0aGlzLnNvbHV0aW9ucywgZnVuY3Rpb24oc29sdXRpb25Qcmlvcml0eSwgc29sdXRpb24pIHtcblx0XHRcdFx0aWYoc29sdXRpb25Qcmlvcml0eSA9PT0gMCkge1xuXHRcdFx0XHRcdHNlbGZbc29sdXRpb25dLmRlc2lyZWQgPSB0cnVlO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZhciBhdWRpb0NhblBsYXkgPSBmYWxzZTtcblx0XHRcdFx0XHR2YXIgdmlkZW9DYW5QbGF5ID0gZmFsc2U7XG5cdFx0XHRcdFx0JC5lYWNoKHNlbGYuZm9ybWF0cywgZnVuY3Rpb24oZm9ybWF0UHJpb3JpdHksIGZvcm1hdCkge1xuXHRcdFx0XHRcdFx0aWYoc2VsZltzZWxmLnNvbHV0aW9uc1swXV0uY2FuUGxheVtmb3JtYXRdKSB7IC8vIFRoZSBvdGhlciBzb2x1dGlvbiBjYW4gcGxheVxuXHRcdFx0XHRcdFx0XHRpZihzZWxmLmZvcm1hdFtmb3JtYXRdLm1lZGlhID09PSAndmlkZW8nKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmlkZW9DYW5QbGF5ID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRhdWRpb0NhblBsYXkgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0c2VsZltzb2x1dGlvbl0uZGVzaXJlZCA9IChzZWxmLnJlcXVpcmUuYXVkaW8gJiYgIWF1ZGlvQ2FuUGxheSkgfHwgKHNlbGYucmVxdWlyZS52aWRlbyAmJiAhdmlkZW9DYW5QbGF5KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHQvLyBUaGlzIGlzIHdoYXQgalBsYXllciB3aWxsIHN1cHBvcnQsIGJhc2VkIG9uIHNvbHV0aW9uIGFuZCBzdXBwbGllZC5cblx0XHRcdHRoaXMuaHRtbC5zdXBwb3J0ID0ge307XG5cdFx0XHR0aGlzLmF1cm9yYS5zdXBwb3J0ID0ge307XG5cdFx0XHR0aGlzLmZsYXNoLnN1cHBvcnQgPSB7fTtcblx0XHRcdCQuZWFjaCh0aGlzLmZvcm1hdHMsIGZ1bmN0aW9uKHByaW9yaXR5LCBmb3JtYXQpIHtcblx0XHRcdFx0c2VsZi5odG1sLnN1cHBvcnRbZm9ybWF0XSA9IHNlbGYuaHRtbC5jYW5QbGF5W2Zvcm1hdF0gJiYgc2VsZi5odG1sLmRlc2lyZWQ7XG5cdFx0XHRcdHNlbGYuYXVyb3JhLnN1cHBvcnRbZm9ybWF0XSA9IHNlbGYuYXVyb3JhLmNhblBsYXlbZm9ybWF0XSAmJiBzZWxmLmF1cm9yYS5kZXNpcmVkO1xuXHRcdFx0XHRzZWxmLmZsYXNoLnN1cHBvcnRbZm9ybWF0XSA9IHNlbGYuZmxhc2guY2FuUGxheVtmb3JtYXRdICYmIHNlbGYuZmxhc2guZGVzaXJlZDtcblx0XHRcdH0pO1xuXHRcdFx0Ly8gSWYgalBsYXllciBpcyBzdXBwb3J0aW5nIGFueSBmb3JtYXQgaW4gYSBzb2x1dGlvbiwgdGhlbiB0aGUgc29sdXRpb24gaXMgdXNlZC5cblx0XHRcdHRoaXMuaHRtbC51c2VkID0gZmFsc2U7XG5cdFx0XHR0aGlzLmF1cm9yYS51c2VkID0gZmFsc2U7XG5cdFx0XHR0aGlzLmZsYXNoLnVzZWQgPSBmYWxzZTtcblx0XHRcdCQuZWFjaCh0aGlzLnNvbHV0aW9ucywgZnVuY3Rpb24oc29sdXRpb25Qcmlvcml0eSwgc29sdXRpb24pIHtcblx0XHRcdFx0JC5lYWNoKHNlbGYuZm9ybWF0cywgZnVuY3Rpb24oZm9ybWF0UHJpb3JpdHksIGZvcm1hdCkge1xuXHRcdFx0XHRcdGlmKHNlbGZbc29sdXRpb25dLnN1cHBvcnRbZm9ybWF0XSkge1xuXHRcdFx0XHRcdFx0c2VsZltzb2x1dGlvbl0udXNlZCA9IHRydWU7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBJbml0IHNvbHV0aW9uIGFjdGl2ZSBzdGF0ZSBhbmQgdGhlIGV2ZW50IGdhdGVzIHRvIGZhbHNlLlxuXHRcdFx0dGhpcy5fcmVzZXRBY3RpdmUoKTtcblx0XHRcdHRoaXMuX3Jlc2V0R2F0ZSgpO1xuXG5cdFx0XHQvLyBTZXQgdXAgdGhlIGNzcyBzZWxlY3RvcnMgZm9yIHRoZSBjb250cm9sIGFuZCBmZWVkYmFjayBlbnRpdGllcy5cblx0XHRcdHRoaXMuX2Nzc1NlbGVjdG9yQW5jZXN0b3IodGhpcy5vcHRpb25zLmNzc1NlbGVjdG9yQW5jZXN0b3IpO1xuXG5cdFx0XHQvLyBJZiBuZWl0aGVyIGh0bWwgbm9yIGF1cm9yYSBub3IgZmxhc2ggYXJlIGJlaW5nIHVzZWQgYnkgdGhpcyBicm93c2VyLCB0aGVuIG1lZGlhIHBsYXliYWNrIGlzIG5vdCBwb3NzaWJsZS4gVHJpZ2dlciBhbiBlcnJvciBldmVudC5cblx0XHRcdGlmKCEodGhpcy5odG1sLnVzZWQgfHwgdGhpcy5hdXJvcmEudXNlZCB8fCB0aGlzLmZsYXNoLnVzZWQpKSB7XG5cdFx0XHRcdHRoaXMuX2Vycm9yKCB7XG5cdFx0XHRcdFx0dHlwZTogJC5qUGxheWVyLmVycm9yLk5PX1NPTFVUSU9OLFxuXHRcdFx0XHRcdGNvbnRleHQ6IFwie3NvbHV0aW9uOidcIiArIHRoaXMub3B0aW9ucy5zb2x1dGlvbiArIFwiJywgc3VwcGxpZWQ6J1wiICsgdGhpcy5vcHRpb25zLnN1cHBsaWVkICsgXCInfVwiLFxuXHRcdFx0XHRcdG1lc3NhZ2U6ICQualBsYXllci5lcnJvck1zZy5OT19TT0xVVElPTixcblx0XHRcdFx0XHRoaW50OiAkLmpQbGF5ZXIuZXJyb3JIaW50Lk5PX1NPTFVUSU9OXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRpZih0aGlzLmNzcy5qcS5ub1NvbHV0aW9uLmxlbmd0aCkge1xuXHRcdFx0XHRcdHRoaXMuY3NzLmpxLm5vU29sdXRpb24uc2hvdygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZih0aGlzLmNzcy5qcS5ub1NvbHV0aW9uLmxlbmd0aCkge1xuXHRcdFx0XHRcdHRoaXMuY3NzLmpxLm5vU29sdXRpb24uaGlkZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCB0aGUgZmxhc2ggc29sdXRpb24gaWYgaXQgaXMgYmVpbmcgdXNlZC5cblx0XHRcdGlmKHRoaXMuZmxhc2gudXNlZCkge1xuXHRcdFx0XHR2YXIgaHRtbE9iaixcblx0XHRcdFx0Zmxhc2hWYXJzID0gJ2pRdWVyeT0nICsgZW5jb2RlVVJJKHRoaXMub3B0aW9ucy5ub0NvbmZsaWN0KSArICcmaWQ9JyArIGVuY29kZVVSSSh0aGlzLmludGVybmFsLnNlbGYuaWQpICsgJyZ2b2w9JyArIHRoaXMub3B0aW9ucy52b2x1bWUgKyAnJm11dGVkPScgKyB0aGlzLm9wdGlvbnMubXV0ZWQ7XG5cblx0XHRcdFx0Ly8gQ29kZSBpbmZsdWVuY2VkIGJ5IFNXRk9iamVjdCAyLjI6IGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9zd2ZvYmplY3QvXG5cdFx0XHRcdC8vIE5vbiBJRSBicm93c2VycyBoYXZlIGFuIGluaXRpYWwgRmxhc2ggc2l6ZSBvZiAxIGJ5IDEgb3RoZXJ3aXNlIHRoZSB3bW9kZSBhZmZlY3RlZCB0aGUgRmxhc2ggcmVhZHkgZXZlbnQuXG5cblx0XHRcdFx0aWYoJC5qUGxheWVyLmJyb3dzZXIubXNpZSAmJiAoTnVtYmVyKCQualBsYXllci5icm93c2VyLnZlcnNpb24pIDwgOSB8fCAkLmpQbGF5ZXIuYnJvd3Nlci5kb2N1bWVudE1vZGUgPCA5KSkge1xuXHRcdFx0XHRcdHZhciBvYmpTdHIgPSAnPG9iamVjdCBpZD1cIicgKyB0aGlzLmludGVybmFsLmZsYXNoLmlkICsgJ1wiIGNsYXNzaWQ9XCJjbHNpZDpkMjdjZGI2ZS1hZTZkLTExY2YtOTZiOC00NDQ1NTM1NDAwMDBcIiB3aWR0aD1cIjBcIiBoZWlnaHQ9XCIwXCIgdGFiaW5kZXg9XCItMVwiPjwvb2JqZWN0Pic7XG5cblx0XHRcdFx0XHR2YXIgcGFyYW1TdHIgPSBbXG5cdFx0XHRcdFx0XHQnPHBhcmFtIG5hbWU9XCJtb3ZpZVwiIHZhbHVlPVwiJyArIHRoaXMuaW50ZXJuYWwuZmxhc2guc3dmICsgJ1wiIC8+Jyxcblx0XHRcdFx0XHRcdCc8cGFyYW0gbmFtZT1cIkZsYXNoVmFyc1wiIHZhbHVlPVwiJyArIGZsYXNoVmFycyArICdcIiAvPicsXG5cdFx0XHRcdFx0XHQnPHBhcmFtIG5hbWU9XCJhbGxvd1NjcmlwdEFjY2Vzc1wiIHZhbHVlPVwiYWx3YXlzXCIgLz4nLFxuXHRcdFx0XHRcdFx0JzxwYXJhbSBuYW1lPVwiYmdjb2xvclwiIHZhbHVlPVwiJyArIHRoaXMub3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IgKyAnXCIgLz4nLFxuXHRcdFx0XHRcdFx0JzxwYXJhbSBuYW1lPVwid21vZGVcIiB2YWx1ZT1cIicgKyB0aGlzLm9wdGlvbnMud21vZGUgKyAnXCIgLz4nXG5cdFx0XHRcdFx0XTtcblxuXHRcdFx0XHRcdGh0bWxPYmogPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG9ialN0cik7XG5cdFx0XHRcdFx0Zm9yKHZhciBpPTA7IGkgPCBwYXJhbVN0ci5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdFx0aHRtbE9iai5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KHBhcmFtU3RyW2ldKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZhciBjcmVhdGVQYXJhbSA9IGZ1bmN0aW9uKGVsLCBuLCB2KSB7XG5cdFx0XHRcdFx0XHR2YXIgcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwYXJhbVwiKTtcblx0XHRcdFx0XHRcdHAuc2V0QXR0cmlidXRlKFwibmFtZVwiLCBuKTtcblx0XHRcdFx0XHRcdHAuc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgdik7XG5cdFx0XHRcdFx0XHRlbC5hcHBlbmRDaGlsZChwKTtcblx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0aHRtbE9iaiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJvYmplY3RcIik7XG5cdFx0XHRcdFx0aHRtbE9iai5zZXRBdHRyaWJ1dGUoXCJpZFwiLCB0aGlzLmludGVybmFsLmZsYXNoLmlkKTtcblx0XHRcdFx0XHRodG1sT2JqLnNldEF0dHJpYnV0ZShcIm5hbWVcIiwgdGhpcy5pbnRlcm5hbC5mbGFzaC5pZCk7XG5cdFx0XHRcdFx0aHRtbE9iai5zZXRBdHRyaWJ1dGUoXCJkYXRhXCIsIHRoaXMuaW50ZXJuYWwuZmxhc2guc3dmKTtcblx0XHRcdFx0XHRodG1sT2JqLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJhcHBsaWNhdGlvbi94LXNob2Nrd2F2ZS1mbGFzaFwiKTtcblx0XHRcdFx0XHRodG1sT2JqLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIFwiMVwiKTsgLy8gTm9uLXplcm9cblx0XHRcdFx0XHRodG1sT2JqLnNldEF0dHJpYnV0ZShcImhlaWdodFwiLCBcIjFcIik7IC8vIE5vbi16ZXJvXG5cdFx0XHRcdFx0aHRtbE9iai5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLCBcIi0xXCIpO1xuXHRcdFx0XHRcdGNyZWF0ZVBhcmFtKGh0bWxPYmosIFwiZmxhc2h2YXJzXCIsIGZsYXNoVmFycyk7XG5cdFx0XHRcdFx0Y3JlYXRlUGFyYW0oaHRtbE9iaiwgXCJhbGxvd3NjcmlwdGFjY2Vzc1wiLCBcImFsd2F5c1wiKTtcblx0XHRcdFx0XHRjcmVhdGVQYXJhbShodG1sT2JqLCBcImJnY29sb3JcIiwgdGhpcy5vcHRpb25zLmJhY2tncm91bmRDb2xvcik7XG5cdFx0XHRcdFx0Y3JlYXRlUGFyYW0oaHRtbE9iaiwgXCJ3bW9kZVwiLCB0aGlzLm9wdGlvbnMud21vZGUpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhpcy5lbGVtZW50LmFwcGVuZChodG1sT2JqKTtcblx0XHRcdFx0dGhpcy5pbnRlcm5hbC5mbGFzaC5qcSA9ICQoaHRtbE9iaik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldHVwIHBsYXliYWNrUmF0ZSBhYmlsaXR5IGJlZm9yZSB1c2luZyBfYWRkSHRtbEV2ZW50TGlzdGVuZXJzKClcblx0XHRcdGlmKHRoaXMuaHRtbC51c2VkICYmICF0aGlzLmZsYXNoLnVzZWQpIHsgLy8gSWYgb25seSBIVE1MXG5cdFx0XHRcdC8vIFVzaW5nIHRoZSBhdWRpbyBlbGVtZW50IGNhcGFiaWxpdGllcyBmb3IgcGxheWJhY2tSYXRlLiBpZS4sIEFzc3VtaW5nIHZpZGVvIGVsZW1lbnQgaXMgdGhlIHNhbWUuXG5cdFx0XHRcdHRoaXMuc3RhdHVzLnBsYXliYWNrUmF0ZUVuYWJsZWQgPSB0aGlzLl90ZXN0UGxheWJhY2tSYXRlKCdhdWRpbycpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5zdGF0dXMucGxheWJhY2tSYXRlRW5hYmxlZCA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl91cGRhdGVQbGF5YmFja1JhdGUoKTtcblxuXHRcdFx0Ly8gQWRkIHRoZSBIVE1MIHNvbHV0aW9uIGlmIGJlaW5nIHVzZWQuXG5cdFx0XHRpZih0aGlzLmh0bWwudXNlZCkge1xuXG5cdFx0XHRcdC8vIFRoZSBIVE1MIEF1ZGlvIGhhbmRsZXJzXG5cdFx0XHRcdGlmKHRoaXMuaHRtbC5hdWRpby5hdmFpbGFibGUpIHtcblx0XHRcdFx0XHR0aGlzLl9hZGRIdG1sRXZlbnRMaXN0ZW5lcnModGhpcy5odG1sRWxlbWVudC5hdWRpbywgdGhpcy5odG1sLmF1ZGlvKTtcblx0XHRcdFx0XHR0aGlzLmVsZW1lbnQuYXBwZW5kKHRoaXMuaHRtbEVsZW1lbnQuYXVkaW8pO1xuXHRcdFx0XHRcdHRoaXMuaW50ZXJuYWwuYXVkaW8uanEgPSAkKFwiI1wiICsgdGhpcy5pbnRlcm5hbC5hdWRpby5pZCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUaGUgSFRNTCBWaWRlbyBoYW5kbGVyc1xuXHRcdFx0XHRpZih0aGlzLmh0bWwudmlkZW8uYXZhaWxhYmxlKSB7XG5cdFx0XHRcdFx0dGhpcy5fYWRkSHRtbEV2ZW50TGlzdGVuZXJzKHRoaXMuaHRtbEVsZW1lbnQudmlkZW8sIHRoaXMuaHRtbC52aWRlbyk7XG5cdFx0XHRcdFx0dGhpcy5lbGVtZW50LmFwcGVuZCh0aGlzLmh0bWxFbGVtZW50LnZpZGVvKTtcblx0XHRcdFx0XHR0aGlzLmludGVybmFsLnZpZGVvLmpxID0gJChcIiNcIiArIHRoaXMuaW50ZXJuYWwudmlkZW8uaWQpO1xuXHRcdFx0XHRcdGlmKHRoaXMuc3RhdHVzLm5hdGl2ZVZpZGVvQ29udHJvbHMpIHtcblx0XHRcdFx0XHRcdHRoaXMuaW50ZXJuYWwudmlkZW8uanEuY3NzKHsnd2lkdGgnOiB0aGlzLnN0YXR1cy53aWR0aCwgJ2hlaWdodCc6IHRoaXMuc3RhdHVzLmhlaWdodH0pO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0aGlzLmludGVybmFsLnZpZGVvLmpxLmNzcyh7J3dpZHRoJzonMHB4JywgJ2hlaWdodCc6JzBweCd9KTsgLy8gVXNpbmcgc2l6ZSAweDAgc2luY2UgYSAuaGlkZSgpIGNhdXNlcyBpc3N1ZXMgaW4gaU9TXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMuaW50ZXJuYWwudmlkZW8uanEuYmluZChcImNsaWNrLmpQbGF5ZXJcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRzZWxmLl90cmlnZ2VyKCQualBsYXllci5ldmVudC5jbGljayk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRoZSBBdXJvcmEuanMgc29sdXRpb24gaWYgYmVpbmcgdXNlZC5cblx0XHRcdGlmKHRoaXMuYXVyb3JhLnVzZWQpIHtcblx0XHRcdFx0Ly8gQXVyb3JhLmpzIHBsYXllciBuZWVkIHRvIGJlIGNyZWF0ZWQgZm9yIGVhY2ggbWVkaWEsIHNlZSBzZXRNZWRpYSBmdW5jdGlvbi5cblx0XHRcdH1cblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBicmlkZ2UgdGhhdCBlbXVsYXRlcyB0aGUgSFRNTCBNZWRpYSBlbGVtZW50IG9uIHRoZSBqUGxheWVyIERJVlxuXHRcdFx0aWYoIHRoaXMub3B0aW9ucy5lbXVsYXRlSHRtbCApIHtcblx0XHRcdFx0dGhpcy5fZW11bGF0ZUh0bWxCcmlkZ2UoKTtcblx0XHRcdH1cblxuXHRcdFx0aWYoKHRoaXMuaHRtbC51c2VkIHx8IHRoaXMuYXVyb3JhLnVzZWQpICYmICF0aGlzLmZsYXNoLnVzZWQpIHsgLy8gSWYgb25seSBIVE1MLCB0aGVuIGVtdWxhdGUgZmxhc2ggcmVhZHkoKSBjYWxsIGFmdGVyIDEwMG1zLlxuXHRcdFx0XHRzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRzZWxmLmludGVybmFsLnJlYWR5ID0gdHJ1ZTtcblx0XHRcdFx0XHRzZWxmLnZlcnNpb24uZmxhc2ggPSBcIm4vYVwiO1xuXHRcdFx0XHRcdHNlbGYuX3RyaWdnZXIoJC5qUGxheWVyLmV2ZW50LnJlcGVhdCk7IC8vIFRyaWdnZXIgdGhlIHJlcGVhdCBldmVudCBzbyBpdHMgaGFuZGxlciBjYW4gaW5pdGlhbGl6ZSBpdHNlbGYgd2l0aCB0aGUgbG9vcCBvcHRpb24uXG5cdFx0XHRcdFx0c2VsZi5fdHJpZ2dlcigkLmpQbGF5ZXIuZXZlbnQucmVhZHkpO1xuXHRcdFx0XHR9LCAxMDApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJbml0aWFsaXplIHRoZSBpbnRlcmZhY2UgY29tcG9uZW50cyB3aXRoIHRoZSBvcHRpb25zLlxuXHRcdFx0dGhpcy5fdXBkYXRlTmF0aXZlVmlkZW9Db250cm9scygpO1xuXHRcdFx0Ly8gVGhlIG90aGVyIGNvbnRyb2xzIGFyZSBub3cgc2V0dXAgaW4gX2Nzc1NlbGVjdG9yQW5jZXN0b3IoKVxuXHRcdFx0aWYodGhpcy5jc3MuanEudmlkZW9QbGF5Lmxlbmd0aCkge1xuXHRcdFx0XHR0aGlzLmNzcy5qcS52aWRlb1BsYXkuaGlkZSgpO1xuXHRcdFx0fVxuXG5cdFx0XHQkLmpQbGF5ZXIucHJvdG90eXBlLmNvdW50Kys7IC8vIENoYW5nZSBzdGF0aWMgdmFyaWFibGUgdmlhIHByb3RvdHlwZS5cblx0XHR9LFxuXHRcdGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gTUpQOiBUaGUgYmFja2dyb3VuZCBjaGFuZ2UgcmVtYWlucy4gV291bGQgbmVlZCB0byBzdG9yZSB0aGUgb3JpZ2luYWwgdG8gcmVzdG9yZSBpdCBjb3JyZWN0bHkuXG5cdFx0XHQvLyBNSlA6IFRoZSBqUGxheWVyIGVsZW1lbnQncyBzaXplIGNoYW5nZSByZW1haW5zLlxuXG5cdFx0XHQvLyBDbGVhciB0aGUgbWVkaWEgdG8gcmVzZXQgdGhlIEdVSSBhbmQgc3RvcCBhbnkgZG93bmxvYWRzLiBTdHJlYW1zIG9uIHNvbWUgYnJvd3NlcnMgaGFkIHBlcnNpdGVkLiAoQ2hyb21lKVxuXHRcdFx0dGhpcy5jbGVhck1lZGlhKCk7XG5cdFx0XHQvLyBSZW1vdmUgdGhlIHNpemUvc2l6ZUZ1bGwgY3NzQ2xhc3MgZnJvbSB0aGUgY3NzU2VsZWN0b3JBbmNlc3RvclxuXHRcdFx0dGhpcy5fcmVtb3ZlVWlDbGFzcygpO1xuXHRcdFx0Ly8gUmVtb3ZlIHRoZSB0aW1lcyBmcm9tIHRoZSBHVUlcblx0XHRcdGlmKHRoaXMuY3NzLmpxLmN1cnJlbnRUaW1lLmxlbmd0aCkge1xuXHRcdFx0XHR0aGlzLmNzcy5qcS5jdXJyZW50VGltZS50ZXh0KFwiXCIpO1xuXHRcdFx0fVxuXHRcdFx0aWYodGhpcy5jc3MuanEuZHVyYXRpb24ubGVuZ3RoKSB7XG5cdFx0XHRcdHRoaXMuY3NzLmpxLmR1cmF0aW9uLnRleHQoXCJcIik7XG5cdFx0XHR9XG5cdFx0XHQvLyBSZW1vdmUgYW55IGJpbmRpbmdzIGZyb20gdGhlIGludGVyZmFjZSBjb250cm9scy5cblx0XHRcdCQuZWFjaCh0aGlzLmNzcy5qcSwgZnVuY3Rpb24oZm4sIGpxKSB7XG5cdFx0XHRcdC8vIENoZWNrIHNlbGVjdG9yIGlzIHZhbGlkIGJlZm9yZSB0cnlpbmcgdG8gZXhlY3V0ZSBtZXRob2QuXG5cdFx0XHRcdGlmKGpxLmxlbmd0aCkge1xuXHRcdFx0XHRcdGpxLnVuYmluZChcIi5qUGxheWVyXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdC8vIFJlbW92ZSB0aGUgY2xpY2sgaGFuZGxlcnMgZm9yICQualBsYXllci5ldmVudC5jbGlja1xuXHRcdFx0dGhpcy5pbnRlcm5hbC5wb3N0ZXIuanEudW5iaW5kKFwiLmpQbGF5ZXJcIik7XG5cdFx0XHRpZih0aGlzLmludGVybmFsLnZpZGVvLmpxKSB7XG5cdFx0XHRcdHRoaXMuaW50ZXJuYWwudmlkZW8uanEudW5iaW5kKFwiLmpQbGF5ZXJcIik7XG5cdFx0XHR9XG5cdFx0XHQvLyBSZW1vdmUgdGhlIGZ1bGxzY3JlZW4gZXZlbnQgaGFuZGxlcnNcblx0XHRcdHRoaXMuX2Z1bGxzY3JlZW5SZW1vdmVFdmVudExpc3RlbmVycygpO1xuXHRcdFx0Ly8gUmVtb3ZlIGtleSBiaW5kaW5nc1xuXHRcdFx0aWYodGhpcyA9PT0gJC5qUGxheWVyLmZvY3VzKSB7XG5cdFx0XHRcdCQualBsYXllci5mb2N1cyA9IG51bGw7XG5cdFx0XHR9XG5cdFx0XHQvLyBEZXN0cm95IHRoZSBIVE1MIGJyaWRnZS5cblx0XHRcdGlmKHRoaXMub3B0aW9ucy5lbXVsYXRlSHRtbCkge1xuXHRcdFx0XHR0aGlzLl9kZXN0cm95SHRtbEJyaWRnZSgpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5lbGVtZW50LnJlbW92ZURhdGEoXCJqUGxheWVyXCIpOyAvLyBSZW1vdmUgalBsYXllciBkYXRhXG5cdFx0XHR0aGlzLmVsZW1lbnQudW5iaW5kKFwiLmpQbGF5ZXJcIik7IC8vIFJlbW92ZSBhbGwgZXZlbnQgaGFuZGxlcnMgY3JlYXRlZCBieSB0aGUgalBsYXllciBjb25zdHJ1Y3RvclxuXHRcdFx0dGhpcy5lbGVtZW50LmVtcHR5KCk7IC8vIFJlbW92ZSB0aGUgaW5zZXJ0ZWQgY2hpbGQgZWxlbWVudHNcblxuXHRcdFx0ZGVsZXRlIHRoaXMuaW5zdGFuY2VzW3RoaXMuaW50ZXJuYWwuaW5zdGFuY2VdOyAvLyBDbGVhciB0aGUgaW5zdGFuY2Ugb24gdGhlIHN0YXRpYyBpbnN0YW5jZSBvYmplY3Rcblx0XHR9LFxuXHRcdGRlc3Ryb3lSZW1vdmVkOiBmdW5jdGlvbigpIHsgLy8gRGVzdHJveSBhbnkgaW5zdGFuY2VzIHRoYXQgaGF2ZSBnb25lIGF3YXkuXG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0XHQkLmVhY2godGhpcy5pbnN0YW5jZXMsIGZ1bmN0aW9uKGksIGVsZW1lbnQpIHtcblx0XHRcdFx0aWYoc2VsZi5lbGVtZW50ICE9PSBlbGVtZW50KSB7IC8vIERvIG5vdCBkZXN0cm95IHRoaXMgaW5zdGFuY2UuXG5cdFx0XHRcdFx0aWYoIWVsZW1lbnQuZGF0YShcImpQbGF5ZXJcIikpIHsgLy8gQ2hlY2sgdGhhdCBlbGVtZW50IGlzIGEgcmVhbCBqUGxheWVyLlxuXHRcdFx0XHRcdFx0ZWxlbWVudC5qUGxheWVyKFwiZGVzdHJveVwiKTtcblx0XHRcdFx0XHRcdGRlbGV0ZSBzZWxmLmluc3RhbmNlc1tpXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0sXG5cdFx0ZW5hYmxlOiBmdW5jdGlvbigpIHsgLy8gUGxhbiB0byBpbXBsZW1lbnRcblx0XHRcdC8vIG9wdGlvbnMuZGlzYWJsZWQgPSBmYWxzZVxuXHRcdH0sXG5cdFx0ZGlzYWJsZTogZnVuY3Rpb24gKCkgeyAvLyBQbGFuIHRvIGltcGxlbWVudFxuXHRcdFx0Ly8gb3B0aW9ucy5kaXNhYmxlZCA9IHRydWVcblx0XHR9LFxuXHRcdF90ZXN0Q2FuUGxheVR5cGU6IGZ1bmN0aW9uKGVsZW0pIHtcblx0XHRcdC8vIElFOSBvbiBXaW4gU2VydmVyIDIwMDggZGlkIG5vdCBpbXBsZW1lbnQgY2FuUGxheVR5cGUoKSwgYnV0IGl0IGhhcyB0aGUgcHJvcGVydHkuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRlbGVtLmNhblBsYXlUeXBlKHRoaXMuZm9ybWF0Lm1wMy5jb2RlYyk7IC8vIFRoZSB0eXBlIGlzIGlycmVsZXZhbnQuXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSBjYXRjaChlcnIpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0X3Rlc3RQbGF5YmFja1JhdGU6IGZ1bmN0aW9uKHR5cGUpIHtcblx0XHRcdC8vIHR5cGU6IFN0cmluZyAnYXVkaW8nIG9yICd2aWRlbydcblx0XHRcdHZhciBlbCwgcmF0ZSA9IDAuNTtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycgPyB0eXBlIDogJ2F1ZGlvJztcblx0XHRcdGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0eXBlKTtcblx0XHRcdC8vIFdyYXBwaW5nIGluIGEgdHJ5L2NhdGNoLCBqdXN0IGluIGNhc2Ugb2xkZXIgSFRNTDUgYnJvd3NlcnMgdGhyb3cgYW5kIGVycm9yLlxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0aWYoJ3BsYXliYWNrUmF0ZScgaW4gZWwpIHtcblx0XHRcdFx0XHRlbC5wbGF5YmFja1JhdGUgPSByYXRlO1xuXHRcdFx0XHRcdHJldHVybiBlbC5wbGF5YmFja1JhdGUgPT09IHJhdGU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGNhdGNoKGVycikge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfdWFCbG9ja2xpc3Q6IGZ1bmN0aW9uKGxpc3QpIHtcblx0XHRcdC8vIGxpc3QgOiBvYmplY3Qgd2l0aCBwcm9wZXJ0aWVzIHRoYXQgYXJlIGFsbCByZWd1bGFyIGV4cHJlc3Npb25zLiBQcm9wZXJ0eSBuYW1lcyBhcmUgaXJyZWxldmFudC5cblx0XHRcdC8vIFJldHVybnMgdHJ1ZSBpZiB0aGUgdXNlciBhZ2VudCBpcyBtYXRjaGVkIGluIGxpc3QuXG5cdFx0XHR2YXJcdHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRibG9jayA9IGZhbHNlO1xuXG5cdFx0XHQkLmVhY2gobGlzdCwgZnVuY3Rpb24ocCwgcmUpIHtcblx0XHRcdFx0aWYocmUgJiYgcmUudGVzdCh1YSkpIHtcblx0XHRcdFx0XHRibG9jayA9IHRydWU7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlOyAvLyBleGl0ICQuZWFjaC5cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gYmxvY2s7XG5cdFx0fSxcblx0XHRfcmVzdHJpY3ROYXRpdmVWaWRlb0NvbnRyb2xzOiBmdW5jdGlvbigpIHtcblx0XHRcdC8vIEZhbGxiYWNrIHRvIG5vRnVsbFdpbmRvdyB3aGVuIG5hdGl2ZVZpZGVvQ29udHJvbHMgaXMgdHJ1ZSBhbmQgYXVkaW8gbWVkaWEgaXMgYmVpbmcgdXNlZC4gQWZmZWN0cyB3aGVuIGJvdGggbWVkaWEgdHlwZXMgYXJlIHVzZWQuXG5cdFx0XHRpZih0aGlzLnJlcXVpcmUuYXVkaW8pIHtcblx0XHRcdFx0aWYodGhpcy5zdGF0dXMubmF0aXZlVmlkZW9Db250cm9scykge1xuXHRcdFx0XHRcdHRoaXMuc3RhdHVzLm5hdGl2ZVZpZGVvQ29udHJvbHMgPSBmYWxzZTtcblx0XHRcdFx0XHR0aGlzLnN0YXR1cy5ub0Z1bGxXaW5kb3cgPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfdXBkYXRlTmF0aXZlVmlkZW9Db250cm9sczogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZih0aGlzLmh0bWwudmlkZW8uYXZhaWxhYmxlICYmIHRoaXMuaHRtbC51c2VkKSB7XG5cdFx0XHRcdC8vIFR1cm4gdGhlIEhUTUwgVmlkZW8gY29udHJvbHMgb24vb2ZmXG5cdFx0XHRcdHRoaXMuaHRtbEVsZW1lbnQudmlkZW8uY29udHJvbHMgPSB0aGlzLnN0YXR1cy5uYXRpdmVWaWRlb0NvbnRyb2xzO1xuXHRcdFx0XHQvLyBTaG93L2hpZGUgdGhlIGpQbGF5ZXIgR1VJLlxuXHRcdFx0XHR0aGlzLl91cGRhdGVBdXRvaGlkZSgpO1xuXHRcdFx0XHQvLyBGb3Igd2hlbiBvcHRpb24gY2hhbmdlZC4gVGhlIHBvc3RlciBpbWFnZSBpcyBub3QgdXBkYXRlZCwgYXMgaXQgaXMgZGVhbHQgd2l0aCBpbiBzZXRNZWRpYSgpLiBBY2NlcHRhYmxlIGRlZ3JhZGF0aW9uIHNpbmNlIHNlcmlvdXNseSBkb3VidCB0aGVzZSBvcHRpb25zIHdpbGwgY2hhbmdlIG9uIHRoZSBmbHkuIENhbiBhZ2FpbiByZXZpZXcgbGF0ZXIuXG5cdFx0XHRcdGlmKHRoaXMuc3RhdHVzLm5hdGl2ZVZpZGVvQ29udHJvbHMgJiYgdGhpcy5yZXF1aXJlLnZpZGVvKSB7XG5cdFx0XHRcdFx0dGhpcy5pbnRlcm5hbC5wb3N0ZXIuanEuaGlkZSgpO1xuXHRcdFx0XHRcdHRoaXMuaW50ZXJuYWwudmlkZW8uanEuY3NzKHsnd2lkdGgnOiB0aGlzLnN0YXR1cy53aWR0aCwgJ2hlaWdodCc6IHRoaXMuc3RhdHVzLmhlaWdodH0pO1xuXHRcdFx0XHR9IGVsc2UgaWYodGhpcy5zdGF0dXMud2FpdEZvclBsYXkgJiYgdGhpcy5zdGF0dXMudmlkZW8pIHtcblx0XHRcdFx0XHR0aGlzLmludGVybmFsLnBvc3Rlci5qcS5zaG93KCk7XG5cdFx0XHRcdFx0dGhpcy5pbnRlcm5hbC52aWRlby5qcS5jc3Moeyd3aWR0aCc6ICcwcHgnLCAnaGVpZ2h0JzogJzBweCd9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0X2FkZEh0bWxFdmVudExpc3RlbmVyczogZnVuY3Rpb24obWVkaWFFbGVtZW50LCBlbnRpdHkpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRcdG1lZGlhRWxlbWVudC5wcmVsb2FkID0gdGhpcy5vcHRpb25zLnByZWxvYWQ7XG5cdFx0XHRtZWRpYUVsZW1lbnQubXV0ZWQgPSB0aGlzLm9wdGlvbnMubXV0ZWQ7XG5cdFx0XHRtZWRpYUVsZW1lbnQudm9sdW1lID0gdGhpcy5vcHRpb25zLnZvbHVtZTtcblxuXHRcdFx0aWYodGhpcy5zdGF0dXMucGxheWJhY2tSYXRlRW5hYmxlZCkge1xuXHRcdFx0XHRtZWRpYUVsZW1lbnQuZGVmYXVsdFBsYXliYWNrUmF0ZSA9IHRoaXMub3B0aW9ucy5kZWZhdWx0UGxheWJhY2tSYXRlO1xuXHRcdFx0XHRtZWRpYUVsZW1lbnQucGxheWJhY2tSYXRlID0gdGhpcy5vcHRpb25zLnBsYXliYWNrUmF0ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBldmVudCBsaXN0ZW5lcnNcblx0XHRcdC8vIE9ubHkgd2FudCB0aGUgYWN0aXZlIGVudGl0eSB0byBhZmZlY3QgalBsYXllciBhbmQgYnViYmxlIGV2ZW50cy5cblx0XHRcdC8vIFVzaW5nIGVudGl0eS5nYXRlIHNvIHRoYXQgb2JqZWN0IGlzIHJlZmVyZW5jZWQgYW5kIGdhdGUgcHJvcGVydHkgYWx3YXlzIGN1cnJlbnRcblxuXHRcdFx0bWVkaWFFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJwcm9ncmVzc1wiLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYoZW50aXR5LmdhdGUpIHtcblx0XHRcdFx0XHRpZihzZWxmLmludGVybmFsLmNtZHNJZ25vcmVkICYmIHRoaXMucmVhZHlTdGF0ZSA+IDApIHsgLy8gRGV0ZWN0IGlPUyBleGVjdXRlZCB0aGUgY29tbWFuZFxuXHRcdFx0XHRcdFx0c2VsZi5pbnRlcm5hbC5jbWRzSWdub3JlZCA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRzZWxmLl9nZXRIdG1sU3RhdHVzKG1lZGlhRWxlbWVudCk7XG5cdFx0XHRcdFx0c2VsZi5fdXBkYXRlSW50ZXJmYWNlKCk7XG5cdFx0XHRcdFx0c2VsZi5fdHJpZ2dlcigkLmpQbGF5ZXIuZXZlbnQucHJvZ3Jlc3MpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCBmYWxzZSk7XG5cdFx0XHRtZWRpYUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRlZGRhdGFcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKGVudGl0eS5nYXRlKSB7XG5cdFx0XHRcdFx0c2VsZi5hbmRyb2lkRml4LnNldE1lZGlhID0gZmFsc2U7IC8vIERpc2FibGUgdGhlIGZpeCBhZnRlciB0aGUgZmlyc3QgcHJvZ3Jlc3MgZXZlbnQuXG5cdFx0XHRcdFx0aWYoc2VsZi5hbmRyb2lkRml4LnBsYXkpIHsgLy8gUGxheSBBbmRyb2lkIGF1ZGlvIC0gcGVyZm9ybWluZyB0aGUgZml4LlxuXHRcdFx0XHRcdFx0c2VsZi5hbmRyb2lkRml4LnBsYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdHNlbGYucGxheShzZWxmLmFuZHJvaWRGaXgudGltZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmKHNlbGYuYW5kcm9pZEZpeC5wYXVzZSkgeyAvLyBQYXVzZSBBbmRyb2lkIGF1ZGlvIGF0IHRpbWUgLSBwZXJmb3JtaW5nIHRoZSBmaXguXG5cdFx0XHRcdFx0XHRzZWxmLmFuZHJvaWRGaXgucGF1c2UgPSBmYWxzZTtcblx0XHRcdFx0XHRcdHNlbGYucGF1c2Uoc2VsZi5hbmRyb2lkRml4LnRpbWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRzZWxmLl90cmlnZ2VyKCQualBsYXllci5ldmVudC5sb2FkZWRkYXRhKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgZmFsc2UpO1xuXHRcdFx0bWVkaWFFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0aW1ldXBkYXRlXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZihlbnRpdHkuZ2F0ZSkge1xuXHRcdFx0XHRcdHNlbGYuX2dldEh0bWxTdGF0dXMobWVkaWFFbGVtZW50KTtcblx0XHRcdFx0XHRzZWxmLl91cGRhdGVJbnRlcmZhY2UoKTtcblx0XHRcdFx0XHRzZWxmLl90cmlnZ2VyKCQualBsYXllci5ldmVudC50aW1ldXBkYXRlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgZmFsc2UpO1xuXHRcdFx0bWVkaWFFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJkdXJhdGlvbmNoYW5nZVwiLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYoZW50aXR5LmdhdGUpIHtcblx0XHRcdFx0XHRzZWxmLl9nZXRIdG1sU3RhdHVzKG1lZGlhRWxlbWVudCk7XG5cdFx0XHRcdFx0c2VsZi5fdXBkYXRlSW50ZXJmYWNlKCk7XG5cdFx0XHRcdFx0c2VsZi5fdHJpZ2dlcigkLmpQbGF5ZXIuZXZlbnQuZHVyYXRpb25jaGFuZ2UpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCBmYWxzZSk7XG5cdFx0XHRtZWRpYUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInBsYXlcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKGVudGl0eS5nYXRlKSB7XG5cdFx0XHRcdFx0c2VsZi5fdXBkYXRlQnV0dG9ucyh0cnVlKTtcblx0XHRcdFx0XHRzZWxmLl9odG1sX2NoZWNrV2FpdEZvclBsYXkoKTsgLy8gU28gdGhlIG5hdGl2ZSBjb250cm9scyB1cGRhdGUgdGhpcyB2YXJpYWJsZSBhbmQgcHV0cyB0aGUgaGlkZGVuIGludGVyZmFjZSBpbiB0aGUgY29ycmVjdCBzdGF0ZS4gQWZmZWN0cyB0b2dnbGluZyBuYXRpdmUgY29udHJvbHMuXG5cdFx0XHRcdFx0c2VsZi5fdHJpZ2dlcigkLmpQbGF5ZXIuZXZlbnQucGxheSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIGZhbHNlKTtcblx0XHRcdG1lZGlhRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwicGxheWluZ1wiLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYoZW50aXR5LmdhdGUpIHtcblx0XHRcdFx0XHRzZWxmLl91cGRhdGVCdXR0b25zKHRydWUpO1xuXHRcdFx0XHRcdHNlbGYuX3NlZWtlZCgpO1xuXHRcdFx0XHRcdHNlbGYuX3RyaWdnZXIoJC5qUGxheWVyLmV2ZW50LnBsYXlpbmcpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCBmYWxzZSk7XG5cdFx0XHRtZWRpYUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInBhdXNlXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZihlbnRpdHkuZ2F0ZSkge1xuXHRcdFx0XHRcdHNlbGYuX3VwZGF0ZUJ1dHRvbnMoZmFsc2UpO1xuXHRcdFx0XHRcdHNlbGYuX3RyaWdnZXIoJC5qUGxheWVyLmV2ZW50LnBhdXNlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgZmFsc2UpO1xuXHRcdFx0bWVkaWFFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ3YWl0aW5nXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZihlbnRpdHkuZ2F0ZSkge1xuXHRcdFx0XHRcdHNlbGYuX3NlZWtpbmcoKTtcblx0XHRcdFx0XHRzZWxmLl90cmlnZ2VyKCQualBsYXllci5ldmVudC53YWl0aW5nKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgZmFsc2UpO1xuXHRcdFx0bWVkaWFFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzZWVraW5nXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZihlbnRpdHkuZ2F0ZSkge1xuXHRcdFx0XHRcdHNlbGYuX3NlZWtpbmcoKTtcblx0XHRcdFx0XHRzZWxmLl90cmlnZ2VyKCQualBsYXllci5ldmVudC5zZWVraW5nKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgZmFsc2UpO1xuXHRcdFx0bWVkaWFFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzZWVrZWRcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKGVudGl0eS5nYXRlKSB7XG5cdFx0XHRcdFx0c2VsZi5fc2Vla2VkKCk7XG5cdFx0XHRcdFx0c2VsZi5fdHJpZ2dlcigkLmpQbGF5ZXIuZXZlbnQuc2Vla2VkKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgZmFsc2UpO1xuXHRcdFx0bWVkaWFFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ2b2x1bWVjaGFuZ2VcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKGVudGl0eS5nYXRlKSB7XG5cdFx0XHRcdFx0Ly8gUmVhZCB0aGUgdmFsdWVzIGJhY2sgZnJvbSB0aGUgZWxlbWVudCBhcyB0aGUgQmxhY2tiZXJyeSBQbGF5Qm9vayBzaGFyZXMgdGhlIHZvbHVtZSB3aXRoIHRoZSBwaHlzaWNhbCBidXR0b25zIG1hc3RlciB2b2x1bWUgY29udHJvbC5cblx0XHRcdFx0XHQvLyBIb3dldmVyLCB3aGVuIHRlc3RlZCA2dGggSnVseSAyMDExLCB0aG9zZSBidXR0b25zIGRvIG5vdCBnZW5lcmF0ZSBhbiBldmVudC4gVGhlIHBoeXNpY2FsIHBsYXkvcGF1c2UgYnV0dG9uIGRvZXMgdGhvdWdoLlxuXHRcdFx0XHRcdHNlbGYub3B0aW9ucy52b2x1bWUgPSBtZWRpYUVsZW1lbnQudm9sdW1lO1xuXHRcdFx0XHRcdHNlbGYub3B0aW9ucy5tdXRlZCA9IG1lZGlhRWxlbWVudC5tdXRlZDtcblx0XHRcdFx0XHRzZWxmLl91cGRhdGVNdXRlKCk7XG5cdFx0XHRcdFx0c2VsZi5fdXBkYXRlVm9sdW1lKCk7XG5cdFx0XHRcdFx0c2VsZi5fdHJpZ2dlcigkLmpQbGF5ZXIuZXZlbnQudm9sdW1lY2hhbmdlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgZmFsc2UpO1xuXHRcdFx0bWVkaWFFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJyYXRlY2hhbmdlXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZihlbnRpdHkuZ2F0ZSkge1xuXHRcdFx0XHRcdHNlbGYub3B0aW9ucy5kZWZhdWx0UGxheWJhY2tSYXRlID0gbWVkaWFFbGVtZW50LmRlZmF1bHRQbGF5YmFja1JhdGU7XG5cdFx0XHRcdFx0c2VsZi5vcHRpb25zLnBsYXliYWNrUmF0ZSA9IG1lZGlhRWxlbWVudC5wbGF5YmFja1JhdGU7XG5cdFx0XHRcdFx0c2VsZi5fdXBkYXRlUGxheWJhY2tSYXRlKCk7XG5cdFx0XHRcdFx0c2VsZi5fdHJpZ2dlcigkLmpQbGF5ZXIuZXZlbnQucmF0ZWNoYW5nZSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIGZhbHNlKTtcblx0XHRcdG1lZGlhRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwic3VzcGVuZFwiLCBmdW5jdGlvbigpIHsgLy8gU2VlbXMgdG8gYmUgdGhlIG9ubHkgd2F5IG9mIGNhcHR1cmluZyB0aGF0IHRoZSBpT1M0IGJyb3dzZXIgZGlkIG5vdCBhY3R1YWxseSBwbGF5IHRoZSBtZWRpYSBmcm9tIHRoZSBwYWdlIGNvZGUuIGllLiwgSXQgbmVlZHMgYSB1c2VyIGdlc3R1cmUuXG5cdFx0XHRcdGlmKGVudGl0eS5nYXRlKSB7XG5cdFx0XHRcdFx0c2VsZi5fc2Vla2VkKCk7XG5cdFx0XHRcdFx0c2VsZi5fdHJpZ2dlcigkLmpQbGF5ZXIuZXZlbnQuc3VzcGVuZCk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIGZhbHNlKTtcblx0XHRcdG1lZGlhRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiZW5kZWRcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKGVudGl0eS5nYXRlKSB7XG5cdFx0XHRcdFx0Ly8gT3JkZXIgb2YgdGhlIG5leHQgZmV3IGNvbW1hbmRzIGFyZSBpbXBvcnRhbnQuIENoYW5nZSB0aGUgdGltZSBhbmQgdGhlbiBwYXVzZS5cblx0XHRcdFx0XHQvLyBTb2x2ZXMgYSBidWcgaW4gRmlyZWZveCwgd2hlcmUgaXNzdWluZyBwYXVzZSAxc3QgY2F1c2VzIHRoZSBtZWRpYSB0byBwbGF5IGZyb20gdGhlIHN0YXJ0LiBpZS4sIFRoZSBwYXVzZSBpcyBpZ25vcmVkLlxuXHRcdFx0XHRcdGlmKCEkLmpQbGF5ZXIuYnJvd3Nlci53ZWJraXQpIHsgLy8gQ2hyb21lIGNyYXNoZXMgaWYgeW91IGRvIHRoaXMgaW4gY29uanVuY3Rpb24gd2l0aCBhIHNldE1lZGlhIGNvbW1hbmQgaW4gYW4gZW5kZWQgZXZlbnQgaGFuZGxlci4gaWUuLCBUaGUgcGxheWxpc3QgZGVtby5cblx0XHRcdFx0XHRcdHNlbGYuaHRtbEVsZW1lbnQubWVkaWEuY3VycmVudFRpbWUgPSAwOyAvLyBTYWZhcmkgZG9lcyBub3QgY2FyZSBhYm91dCB0aGlzIGNvbW1hbmQuIGllLiwgSXQgd29ya3Mgd2l0aCBvciB3aXRob3V0IHRoaXMgbGluZS4gKEJvdGggU2FmYXJpIGFuZCBDaHJvbWUgYXJlIFdlYmtpdC4pXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHNlbGYuaHRtbEVsZW1lbnQubWVkaWEucGF1c2UoKTsgLy8gUGF1c2Ugb3RoZXJ3aXNlIGEgY2xpY2sgb24gdGhlIHByb2dyZXNzIGJhciB3aWxsIHBsYXkgZnJvbSB0aGF0IHBvaW50LCB3aGVuIGl0IHNob3VsZG4ndCwgc2luY2UgaXQgc3RvcHBlZCBwbGF5YmFjay5cblx0XHRcdFx0XHRzZWxmLl91cGRhdGVCdXR0b25zKGZhbHNlKTtcblx0XHRcdFx0XHRzZWxmLl9nZXRIdG1sU3RhdHVzKG1lZGlhRWxlbWVudCwgdHJ1ZSk7IC8vIFdpdGggb3ZlcnJpZGUgdHJ1ZS4gT3RoZXJ3aXNlIENocm9tZSBsZWF2ZXMgcHJvZ3Jlc3MgYXQgZnVsbC5cblx0XHRcdFx0XHRzZWxmLl91cGRhdGVJbnRlcmZhY2UoKTtcblx0XHRcdFx0XHRzZWxmLl90cmlnZ2VyKCQualBsYXllci5ldmVudC5lbmRlZCk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIGZhbHNlKTtcblx0XHRcdG1lZGlhRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKGVudGl0eS5nYXRlKSB7XG5cdFx0XHRcdFx0c2VsZi5fdXBkYXRlQnV0dG9ucyhmYWxzZSk7XG5cdFx0XHRcdFx0c2VsZi5fc2Vla2VkKCk7XG5cdFx0XHRcdFx0aWYoc2VsZi5zdGF0dXMuc3JjU2V0KSB7IC8vIERlYWxzIHdpdGggY2FzZSBvZiBjbGVhck1lZGlhKCkgY2F1c2luZyBhbiBlcnJvciBldmVudC5cblx0XHRcdFx0XHRcdGNsZWFyVGltZW91dChzZWxmLmludGVybmFsLmh0bWxEbHlDbWRJZCk7IC8vIENsZWFycyBhbnkgZGVsYXllZCBjb21tYW5kcyB1c2VkIGluIHRoZSBIVE1MIHNvbHV0aW9uLlxuXHRcdFx0XHRcdFx0c2VsZi5zdGF0dXMud2FpdEZvckxvYWQgPSB0cnVlOyAvLyBBbGxvd3MgdGhlIGxvYWQgb3BlcmF0aW9uIHRvIHRyeSBhZ2Fpbi5cblx0XHRcdFx0XHRcdHNlbGYuc3RhdHVzLndhaXRGb3JQbGF5ID0gdHJ1ZTsgLy8gUmVzZXQgc2luY2UgYSBwbGF5IHdhcyBjYXB0dXJlZC5cblx0XHRcdFx0XHRcdGlmKHNlbGYuc3RhdHVzLnZpZGVvICYmICFzZWxmLnN0YXR1cy5uYXRpdmVWaWRlb0NvbnRyb2xzKSB7XG5cdFx0XHRcdFx0XHRcdHNlbGYuaW50ZXJuYWwudmlkZW8uanEuY3NzKHsnd2lkdGgnOicwcHgnLCAnaGVpZ2h0JzonMHB4J30pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYoc2VsZi5fdmFsaWRTdHJpbmcoc2VsZi5zdGF0dXMubWVkaWEucG9zdGVyKSAmJiAhc2VsZi5zdGF0dXMubmF0aXZlVmlkZW9Db250cm9scykge1xuXHRcdFx0XHRcdFx0XHRzZWxmLmludGVybmFsLnBvc3Rlci5qcS5zaG93KCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZihzZWxmLmNzcy5qcS52aWRlb1BsYXkubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRcdHNlbGYuY3NzLmpxLnZpZGVvUGxheS5zaG93KCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRzZWxmLl9lcnJvcigge1xuXHRcdFx0XHRcdFx0XHR0eXBlOiAkLmpQbGF5ZXIuZXJyb3IuVVJMLFxuXHRcdFx0XHRcdFx0XHRjb250ZXh0OiBzZWxmLnN0YXR1cy5zcmMsIC8vIHRoaXMuc3JjIHNob3dzIGFic29sdXRlIHVybHMuIFdhbnQgY29udGV4dCB0byBzaG93IHRoZSB1cmwgZ2l2ZW4uXG5cdFx0XHRcdFx0XHRcdG1lc3NhZ2U6ICQualBsYXllci5lcnJvck1zZy5VUkwsXG5cdFx0XHRcdFx0XHRcdGhpbnQ6ICQualBsYXllci5lcnJvckhpbnQuVVJMXG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sIGZhbHNlKTtcblx0XHRcdC8vIENyZWF0ZSBhbGwgdGhlIG90aGVyIGV2ZW50IGxpc3RlbmVycyB0aGF0IGJ1YmJsZSB1cCB0byBhIGpQbGF5ZXIgZXZlbnQgZnJvbSBodG1sLCB3aXRob3V0IGJlaW5nIHVzZWQgYnkgalBsYXllci5cblx0XHRcdCQuZWFjaCgkLmpQbGF5ZXIuaHRtbEV2ZW50LCBmdW5jdGlvbihpLCBldmVudFR5cGUpIHtcblx0XHRcdFx0bWVkaWFFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodGhpcywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYoZW50aXR5LmdhdGUpIHtcblx0XHRcdFx0XHRcdHNlbGYuX3RyaWdnZXIoJC5qUGxheWVyLmV2ZW50W2V2ZW50VHlwZV0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSwgZmFsc2UpO1xuXHRcdFx0fSk7XG5cdFx0fSxcblx0XHRfYWRkQXVyb3JhRXZlbnRMaXN0ZW5lcnMgOiBmdW5jdGlvbihwbGF5ZXIsIGVudGl0eSkge1xuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcdFx0Ly9wbGF5ZXIucHJlbG9hZCA9IHRoaXMub3B0aW9ucy5wcmVsb2FkO1xuXHRcdFx0Ly9wbGF5ZXIubXV0ZWQgPSB0aGlzLm9wdGlvbnMubXV0ZWQ7XG5cdFx0XHRwbGF5ZXIudm9sdW1lID0gdGhpcy5vcHRpb25zLnZvbHVtZSAqIDEwMDtcblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBldmVudCBsaXN0ZW5lcnNcblx0XHRcdC8vIE9ubHkgd2FudCB0aGUgYWN0aXZlIGVudGl0eSB0byBhZmZlY3QgalBsYXllciBhbmQgYnViYmxlIGV2ZW50cy5cblx0XHRcdC8vIFVzaW5nIGVudGl0eS5nYXRlIHNvIHRoYXQgb2JqZWN0IGlzIHJlZmVyZW5jZWQgYW5kIGdhdGUgcHJvcGVydHkgYWx3YXlzIGN1cnJlbnRcblxuXHRcdFx0cGxheWVyLm9uKFwicHJvZ3Jlc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKGVudGl0eS5nYXRlKSB7XG5cdFx0XHRcdFx0aWYoc2VsZi5pbnRlcm5hbC5jbWRzSWdub3JlZCAmJiB0aGlzLnJlYWR5U3RhdGUgPiAwKSB7IC8vIERldGVjdCBpT1MgZXhlY3V0ZWQgdGhlIGNvbW1hbmRcblx0XHRcdFx0XHRcdHNlbGYuaW50ZXJuYWwuY21kc0lnbm9yZWQgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0c2VsZi5fZ2V0QXVyb3JhU3RhdHVzKHBsYXllcik7XG5cdFx0XHRcdFx0c2VsZi5fdXBkYXRlSW50ZXJmYWNlKCk7XG5cdFx0XHRcdFx0c2VsZi5fdHJpZ2dlcigkLmpQbGF5ZXIuZXZlbnQucHJvZ3Jlc3MpO1xuXHRcdFx0XHRcdC8vIFByb2dyZXNzIHdpdGggc29uZyBkdXJhdGlvbiwgd2UgZXN0aW1hdGUgdGltZXVwZGF0ZSBuZWVkIHRvIGJlIHRyaWdnZXJlZCB0b28uXG5cdFx0XHRcdFx0aWYgKHBsYXllci5kdXJhdGlvbiA+IDApIHtcblx0XHRcdFx0XHRcdHNlbGYuX3RyaWdnZXIoJC5qUGxheWVyLmV2ZW50LnRpbWV1cGRhdGUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSwgZmFsc2UpO1xuXHRcdFx0cGxheWVyLm9uKFwicmVhZHlcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmKGVudGl0eS5nYXRlKSB7XG5cdFx0XHRcdFx0c2VsZi5fdHJpZ2dlcigkLmpQbGF5ZXIuZXZlbnQubG9hZGVkZGF0YSk7XG5cdFx0XHRcdH1cblx0XHRcdH0sIGZhbHNlKTtcblx0XHRcdHBsYXllci5vbihcImR1cmF0aW9uXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZihlbnRpdHkuZ2F0ZSkge1xuXHRcdFx0XHRcdHNlbGYuX2dldEF1cm9yYVN0YXR1cyhwbGF5ZXIpO1xuXHRcdFx0XHRcdHNlbGYuX3VwZGF0ZUludGVyZmFjZSgpO1xuXHRcdFx0XHRcdHNlbGYuX3RyaWdnZXIoJC5qUGxheWVyLmV2ZW50LmR1cmF0aW9uY2hhbmdlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSwgZmFsc2UpO1xuXHRcdFx0cGxheWVyLm9uKFwiZW5kXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZihlbnRpdHkuZ2F0ZSkge1xuXHRcdFx0XHRcdC8vIE9yZGVyIG9mIHRoZSBuZXh0IGZldyBjb21tYW5kcyBhcmUgaW1wb3J0YW50LiBDaGFuZ2UgdGhlIHRpbWUgYW5kIHRoZW4gcGF1c2UuXG5cdFx0XHRcdFx0c2VsZi5fdXBkYXRlQnV0dG9ucyhmYWxzZSk7XG5cdFx0XHRcdFx0c2VsZi5fZ2V0QXVyb3JhU3RhdHVzKHBsYXllciwgdHJ1ZSk7XG5cdFx0XHRcdFx0c2VsZi5fdXBkYXRlSW50ZXJmYWNlKCk7XG5cdFx0XHRcdFx0c2VsZi5fdHJpZ2dlcigkLmpQbGF5ZXIuZXZlbnQuZW5kZWQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCBmYWxzZSk7XG5cdFx0XHRwbGF5ZXIub24oXCJlcnJvclwiLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYoZW50aXR5LmdhdGUpIHtcblx0XHRcdFx0XHRzZWxmLl91cGRhdGVCdXR0b25zKGZhbHNlKTtcblx0XHRcdFx0XHRzZWxmLl9zZWVrZWQoKTtcblx0XHRcdFx0XHRpZihzZWxmLnN0YXR1cy5zcmNTZXQpIHsgLy8gRGVhbHMgd2l0aCBjYXNlIG9mIGNsZWFyTWVkaWEoKSBjYXVzaW5nIGFuIGVycm9yIGV2ZW50LlxuXHRcdFx0XHRcdFx0c2VsZi5zdGF0dXMud2FpdEZvckxvYWQgPSB0cnVlOyAvLyBBbGxvd3MgdGhlIGxvYWQgb3BlcmF0aW9uIHRvIHRyeSBhZ2Fpbi5cblx0XHRcdFx0XHRcdHNlbGYuc3RhdHVzLndhaXRGb3JQbGF5ID0gdHJ1ZTsgLy8gUmVzZXQgc2luY2UgYSBwbGF5IHdhcyBjYXB0dXJlZC5cblx0XHRcdFx0XHRcdGlmKHNlbGYuc3RhdHVzLnZpZGVvICYmICFzZWxmLnN0YXR1cy5uYXRpdmVWaWRlb0NvbnRyb2xzKSB7XG5cdFx0XHRcdFx0XHRcdHNlbGYuaW50ZXJuYWwudmlkZW8uanEuY3NzKHsnd2lkdGgnOicwcHgnLCAnaGVpZ2h0JzonMHB4J30pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYoc2VsZi5fdmFsaWRTdHJpbmcoc2VsZi5zdGF0dXMubWVkaWEucG9zdGVyKSAmJiAhc2VsZi5zdGF0dXMubmF0aXZlVmlkZW9Db250cm9scykge1xuXHRcdFx0XHRcdFx0XHRzZWxmLmludGVybmFsLnBvc3Rlci5qcS5zaG93KCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZihzZWxmLmNzcy5qcS52aWRlb1BsYXkubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHRcdHNlbGYuY3NzLmpxLnZpZGVvUGxheS5zaG93KCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRzZWxmLl9lcnJvcigge1xuXHRcdFx0XHRcdFx0XHR0eXBlOiAkLmpQbGF5ZXIuZXJyb3IuVVJMLFxuXHRcdFx0XHRcdFx0XHRjb250ZXh0OiBzZWxmLnN0YXR1cy5zcmMsIC8vIHRoaXMuc3JjIHNob3dzIGFic29sdXRlIHVybHMuIFdhbnQgY29udGV4dCB0byBzaG93IHRoZSB1cmwgZ2l2ZW4uXG5cdFx0XHRcdFx0XHRcdG1lc3NhZ2U6ICQualBsYXllci5lcnJvck1zZy5VUkwsXG5cdFx0XHRcdFx0XHRcdGhpbnQ6ICQualBsYXllci5lcnJvckhpbnQuVVJMXG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sIGZhbHNlKTtcblx0XHR9LFxuXHRcdF9nZXRIdG1sU3RhdHVzOiBmdW5jdGlvbihtZWRpYSwgb3ZlcnJpZGUpIHtcblx0XHRcdHZhciBjdCA9IDAsIGNwYSA9IDAsIHNwID0gMCwgY3ByID0gMDtcblxuXHRcdFx0Ly8gRml4ZXMgdGhlIGR1cmF0aW9uIGJ1ZyBpbiBpT1MsIHdoZXJlIHRoZSBkdXJhdGlvbmNoYW5nZSBldmVudCBvY2N1cnMgd2hlbiBtZWRpYS5kdXJhdGlvbiBpcyBub3QgYWx3YXlzIGNvcnJlY3QuXG5cdFx0XHQvLyBGaXhlcyB0aGUgaW5pdGlhbCBkdXJhdGlvbiBidWcgaW4gQkIgT1M3LCB3aGVyZSB0aGUgbWVkaWEuZHVyYXRpb24gaXMgaW5maW5pdHkgYW5kIGRpc3BsYXlzIGFzIE5hTjpOYU4gZHVlIHRvIERhdGUoKSB1c2luZyBpbmlmaXR5LlxuXHRcdFx0aWYoaXNGaW5pdGUobWVkaWEuZHVyYXRpb24pKSB7XG5cdFx0XHRcdHRoaXMuc3RhdHVzLmR1cmF0aW9uID0gbWVkaWEuZHVyYXRpb247XG5cdFx0XHR9XG5cblx0XHRcdGN0ID0gbWVkaWEuY3VycmVudFRpbWU7XG5cdFx0XHRjcGEgPSAodGhpcy5zdGF0dXMuZHVyYXRpb24gPiAwKSA/IDEwMCAqIGN0IC8gdGhpcy5zdGF0dXMuZHVyYXRpb24gOiAwO1xuXHRcdFx0aWYoKHR5cGVvZiBtZWRpYS5zZWVrYWJsZSA9PT0gXCJvYmplY3RcIikgJiYgKG1lZGlhLnNlZWthYmxlLmxlbmd0aCA+IDApKSB7XG5cdFx0XHRcdHNwID0gKHRoaXMuc3RhdHVzLmR1cmF0aW9uID4gMCkgPyAxMDAgKiBtZWRpYS5zZWVrYWJsZS5lbmQobWVkaWEuc2Vla2FibGUubGVuZ3RoLTEpIC8gdGhpcy5zdGF0dXMuZHVyYXRpb24gOiAxMDA7XG5cdFx0XHRcdGNwciA9ICh0aGlzLnN0YXR1cy5kdXJhdGlvbiA+IDApID8gMTAwICogbWVkaWEuY3VycmVudFRpbWUgLyBtZWRpYS5zZWVrYWJsZS5lbmQobWVkaWEuc2Vla2FibGUubGVuZ3RoLTEpIDogMDsgLy8gRHVyYXRpb24gY29uZGl0aW9uYWwgZm9yIGlPUyBkdXJhdGlvbiBidWcuIGllLiwgc2Vla2FibGUuZW5kIGlzIGEgTmFOIGluIHRoYXQgY2FzZS5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNwID0gMTAwO1xuXHRcdFx0XHRjcHIgPSBjcGE7XG5cdFx0XHR9XG5cblx0XHRcdGlmKG92ZXJyaWRlKSB7XG5cdFx0XHRcdGN0ID0gMDtcblx0XHRcdFx0Y3ByID0gMDtcblx0XHRcdFx0Y3BhID0gMDtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5zdGF0dXMuc2Vla1BlcmNlbnQgPSBzcDtcblx0XHRcdHRoaXMuc3RhdHVzLmN1cnJlbnRQZXJjZW50UmVsYXRpdmUgPSBjcHI7XG5cdFx0XHR0aGlzLnN0YXR1cy5jdXJyZW50UGVyY2VudEFic29sdXRlID0gY3BhO1xuXHRcdFx0dGhpcy5zdGF0dXMuY3VycmVudFRpbWUgPSBjdDtcblxuXHRcdFx0dGhpcy5zdGF0dXMucmVtYWluaW5nID0gdGhpcy5zdGF0dXMuZHVyYXRpb24gLSB0aGlzLnN0YXR1cy5jdXJyZW50VGltZTtcblxuXHRcdFx0dGhpcy5zdGF0dXMudmlkZW9XaWR0aCA9IG1lZGlhLnZpZGVvV2lkdGg7XG5cdFx0XHR0aGlzLnN0YXR1cy52aWRlb0hlaWdodCA9IG1lZGlhLnZpZGVvSGVpZ2h0O1xuXG5cdFx0XHR0aGlzLnN0YXR1cy5yZWFkeVN0YXRlID0gbWVkaWEucmVhZHlTdGF0ZTtcblx0XHRcdHRoaXMuc3RhdHVzLm5ldHdvcmtTdGF0ZSA9IG1lZGlhLm5ldHdvcmtTdGF0ZTtcblx0XHRcdHRoaXMuc3RhdHVzLnBsYXliYWNrUmF0ZSA9IG1lZGlhLnBsYXliYWNrUmF0ZTtcblx0XHRcdHRoaXMuc3RhdHVzLmVuZGVkID0gbWVkaWEuZW5kZWQ7XG5cdFx0fSxcblx0XHRfZ2V0QXVyb3JhU3RhdHVzOiBmdW5jdGlvbihwbGF5ZXIsIG92ZXJyaWRlKSB7XG5cdFx0XHR2YXIgY3QgPSAwLCBjcGEgPSAwLCBzcCA9IDAsIGNwciA9IDA7XG5cblx0XHRcdHRoaXMuc3RhdHVzLmR1cmF0aW9uID0gcGxheWVyLmR1cmF0aW9uIC8gMTAwMDtcblxuXHRcdFx0Y3QgPSBwbGF5ZXIuY3VycmVudFRpbWUgLyAxMDAwO1xuXHRcdFx0Y3BhID0gKHRoaXMuc3RhdHVzLmR1cmF0aW9uID4gMCkgPyAxMDAgKiBjdCAvIHRoaXMuc3RhdHVzLmR1cmF0aW9uIDogMDtcblx0XHRcdGlmKHBsYXllci5idWZmZXJlZCA+IDApIHtcblx0XHRcdFx0c3AgPSAodGhpcy5zdGF0dXMuZHVyYXRpb24gPiAwKSA/IChwbGF5ZXIuYnVmZmVyZWQgKiB0aGlzLnN0YXR1cy5kdXJhdGlvbikgLyB0aGlzLnN0YXR1cy5kdXJhdGlvbiA6IDEwMDtcblx0XHRcdFx0Y3ByID0gKHRoaXMuc3RhdHVzLmR1cmF0aW9uID4gMCkgPyBjdCAvIChwbGF5ZXIuYnVmZmVyZWQgKiB0aGlzLnN0YXR1cy5kdXJhdGlvbikgOiAwO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c3AgPSAxMDA7XG5cdFx0XHRcdGNwciA9IGNwYTtcblx0XHRcdH1cblxuXHRcdFx0aWYob3ZlcnJpZGUpIHtcblx0XHRcdFx0Y3QgPSAwO1xuXHRcdFx0XHRjcHIgPSAwO1xuXHRcdFx0XHRjcGEgPSAwO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnN0YXR1cy5zZWVrUGVyY2VudCA9IHNwO1xuXHRcdFx0dGhpcy5zdGF0dXMuY3VycmVudFBlcmNlbnRSZWxhdGl2ZSA9IGNwcjtcblx0XHRcdHRoaXMuc3RhdHVzLmN1cnJlbnRQZXJjZW50QWJzb2x1dGUgPSBjcGE7XG5cdFx0XHR0aGlzLnN0YXR1cy5jdXJyZW50VGltZSA9IGN0O1xuXG5cdFx0XHR0aGlzLnN0YXR1cy5yZW1haW5pbmcgPSB0aGlzLnN0YXR1cy5kdXJhdGlvbiAtIHRoaXMuc3RhdHVzLmN1cnJlbnRUaW1lO1xuXG5cdFx0XHR0aGlzLnN0YXR1cy5yZWFkeVN0YXRlID0gNDsgLy8gc3RhdHVzLnJlYWR5U3RhdGU7XG5cdFx0XHR0aGlzLnN0YXR1cy5uZXR3b3JrU3RhdGUgPSAwOyAvLyBzdGF0dXMubmV0d29ya1N0YXRlO1xuXHRcdFx0dGhpcy5zdGF0dXMucGxheWJhY2tSYXRlID0gMTsgLy8gc3RhdHVzLnBsYXliYWNrUmF0ZTtcblx0XHRcdHRoaXMuc3RhdHVzLmVuZGVkID0gZmFsc2U7IC8vIHN0YXR1cy5lbmRlZDtcblx0XHR9LFxuXHRcdF9yZXNldFN0YXR1czogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLnN0YXR1cyA9ICQuZXh0ZW5kKHt9LCB0aGlzLnN0YXR1cywgJC5qUGxheWVyLnByb3RvdHlwZS5zdGF0dXMpOyAvLyBNYWludGFpbnMgdGhlIHN0YXR1cyBwcm9wZXJ0aWVzIHRoYXQgcGVyc2lzdCB0aHJvdWdoIGEgcmVzZXQuXG5cdFx0fSxcblx0XHRfdHJpZ2dlcjogZnVuY3Rpb24oZXZlbnRUeXBlLCBlcnJvciwgd2FybmluZykgeyAvLyBldmVudFR5cGUgYWx3YXlzIHZhbGlkIGFzIGNhbGxlZCB1c2luZyAkLmpQbGF5ZXIuZXZlbnQuZXZlbnRUeXBlXG5cdFx0XHR2YXIgZXZlbnQgPSAkLkV2ZW50KGV2ZW50VHlwZSk7XG5cdFx0XHRldmVudC5qUGxheWVyID0ge307XG5cdFx0XHRldmVudC5qUGxheWVyLnZlcnNpb24gPSAkLmV4dGVuZCh7fSwgdGhpcy52ZXJzaW9uKTtcblx0XHRcdGV2ZW50LmpQbGF5ZXIub3B0aW9ucyA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLm9wdGlvbnMpOyAvLyBEZWVwIGNvcHlcblx0XHRcdGV2ZW50LmpQbGF5ZXIuc3RhdHVzID0gJC5leHRlbmQodHJ1ZSwge30sIHRoaXMuc3RhdHVzKTsgLy8gRGVlcCBjb3B5XG5cdFx0XHRldmVudC5qUGxheWVyLmh0bWwgPSAkLmV4dGVuZCh0cnVlLCB7fSwgdGhpcy5odG1sKTsgLy8gRGVlcCBjb3B5XG5cdFx0XHRldmVudC5qUGxheWVyLmF1cm9yYSA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLmF1cm9yYSk7IC8vIERlZXAgY29weVxuXHRcdFx0ZXZlbnQualBsYXllci5mbGFzaCA9ICQuZXh0ZW5kKHRydWUsIHt9LCB0aGlzLmZsYXNoKTsgLy8gRGVlcCBjb3B5XG5cdFx0XHRpZihlcnJvcikge1xuXHRcdFx0XHRldmVudC5qUGxheWVyLmVycm9yID0gJC5leHRlbmQoe30sIGVycm9yKTtcblx0XHRcdH1cblx0XHRcdGlmKHdhcm5pbmcpIHtcblx0XHRcdFx0ZXZlbnQualBsYXllci53YXJuaW5nID0gJC5leHRlbmQoe30sIHdhcm5pbmcpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5lbGVtZW50LnRyaWdnZXIoZXZlbnQpO1xuXHRcdH0sXG5cdFx0alBsYXllckZsYXNoRXZlbnQ6IGZ1bmN0aW9uKGV2ZW50VHlwZSwgc3RhdHVzKSB7IC8vIENhbGxlZCBmcm9tIEZsYXNoXG5cdFx0XHRpZihldmVudFR5cGUgPT09ICQualBsYXllci5ldmVudC5yZWFkeSkge1xuXHRcdFx0XHRpZighdGhpcy5pbnRlcm5hbC5yZWFkeSkge1xuXHRcdFx0XHRcdHRoaXMuaW50ZXJuYWwucmVhZHkgPSB0cnVlO1xuXHRcdFx0XHRcdHRoaXMuaW50ZXJuYWwuZmxhc2guanEuY3NzKHsnd2lkdGgnOicwcHgnLCAnaGVpZ2h0JzonMHB4J30pOyAvLyBPbmNlIEZsYXNoIGdlbmVyYXRlcyB0aGUgcmVhZHkgZXZlbnQsIG1pbmltaXNlIHRvIHplcm8gYXMgaXQgaXMgbm90IGFmZmVjdGVkIGJ5IHdtb2RlIGFueW1vcmUuXG5cblx0XHRcdFx0XHR0aGlzLnZlcnNpb24uZmxhc2ggPSBzdGF0dXMudmVyc2lvbjtcblx0XHRcdFx0XHRpZih0aGlzLnZlcnNpb24ubmVlZEZsYXNoICE9PSB0aGlzLnZlcnNpb24uZmxhc2gpIHtcblx0XHRcdFx0XHRcdHRoaXMuX2Vycm9yKCB7XG5cdFx0XHRcdFx0XHRcdHR5cGU6ICQualBsYXllci5lcnJvci5WRVJTSU9OLFxuXHRcdFx0XHRcdFx0XHRjb250ZXh0OiB0aGlzLnZlcnNpb24uZmxhc2gsXG5cdFx0XHRcdFx0XHRcdG1lc3NhZ2U6ICQualBsYXllci5lcnJvck1zZy5WRVJTSU9OICsgdGhpcy52ZXJzaW9uLmZsYXNoLFxuXHRcdFx0XHRcdFx0XHRoaW50OiAkLmpQbGF5ZXIuZXJyb3JIaW50LlZFUlNJT05cblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0aGlzLl90cmlnZ2VyKCQualBsYXllci5ldmVudC5yZXBlYXQpOyAvLyBUcmlnZ2VyIHRoZSByZXBlYXQgZXZlbnQgc28gaXRzIGhhbmRsZXIgY2FuIGluaXRpYWxpemUgaXRzZWxmIHdpdGggdGhlIGxvb3Agb3B0aW9uLlxuXHRcdFx0XHRcdHRoaXMuX3RyaWdnZXIoZXZlbnRUeXBlKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyBUaGlzIGNvbmRpdGlvbiBvY2N1cnMgaWYgdGhlIEZsYXNoIGlzIGhpZGRlbiBhbmQgdGhlbiBzaG93biBhZ2Fpbi5cblx0XHRcdFx0XHQvLyBGaXJlZm94IGFsc28gcmVsb2FkcyB0aGUgRmxhc2ggaWYgdGhlIENTUyBwb3NpdGlvbiBjaGFuZ2VzLiBwb3NpdGlvbjpmaXhlZCBpcyB1c2VkIGZvciBmdWxsIHNjcmVlbi5cblxuXHRcdFx0XHRcdC8vIE9ubHkgZG8gdGhpcyBpZiB0aGUgRmxhc2ggaXMgdGhlIHNvbHV0aW9uIGJlaW5nIHVzZWQgYXQgdGhlIG1vbWVudC4gQWZmZWN0cyBNZWRpYSBwbGF5ZXJzIHdoZXJlIGJvdGggc29sdXRpb24gbWF5IGJlIGJlaW5nIHVzZWQuXG5cdFx0XHRcdFx0aWYodGhpcy5mbGFzaC5nYXRlKSB7XG5cblx0XHRcdFx0XHRcdC8vIFNlbmQgdGhlIGN1cnJlbnQgc3RhdHVzIHRvIHRoZSBGbGFzaCBub3cgdGhhdCBpdCBpcyByZWFkeSAoYXZhaWxhYmxlKSBhZ2Fpbi5cblx0XHRcdFx0XHRcdGlmKHRoaXMuc3RhdHVzLnNyY1NldCkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE5lZWQgdG8gcmVhZCBvcmlnaW5hbCBzdGF0dXMgYmVmb3JlIGlzc3VpbmcgdGhlIHNldE1lZGlhIGNvbW1hbmQuXG5cdFx0XHRcdFx0XHRcdHZhclx0Y3VycmVudFRpbWUgPSB0aGlzLnN0YXR1cy5jdXJyZW50VGltZSxcblx0XHRcdFx0XHRcdFx0XHRwYXVzZWQgPSB0aGlzLnN0YXR1cy5wYXVzZWQ7XG5cblx0XHRcdFx0XHRcdFx0dGhpcy5zZXRNZWRpYSh0aGlzLnN0YXR1cy5tZWRpYSk7XG5cdFx0XHRcdFx0XHRcdHRoaXMudm9sdW1lV29ya2VyKHRoaXMub3B0aW9ucy52b2x1bWUpO1xuXHRcdFx0XHRcdFx0XHRpZihjdXJyZW50VGltZSA+IDApIHtcblx0XHRcdFx0XHRcdFx0XHRpZihwYXVzZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMucGF1c2UoY3VycmVudFRpbWUpO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR0aGlzLnBsYXkoY3VycmVudFRpbWUpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0dGhpcy5fdHJpZ2dlcigkLmpQbGF5ZXIuZXZlbnQuZmxhc2hyZXNldCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZih0aGlzLmZsYXNoLmdhdGUpIHtcblx0XHRcdFx0c3dpdGNoKGV2ZW50VHlwZSkge1xuXHRcdFx0XHRcdGNhc2UgJC5qUGxheWVyLmV2ZW50LnByb2dyZXNzOlxuXHRcdFx0XHRcdFx0dGhpcy5fZ2V0Rmxhc2hTdGF0dXMoc3RhdHVzKTtcblx0XHRcdFx0XHRcdHRoaXMuX3VwZGF0ZUludGVyZmFjZSgpO1xuXHRcdFx0XHRcdFx0dGhpcy5fdHJpZ2dlcihldmVudFR5cGUpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAkLmpQbGF5ZXIuZXZlbnQudGltZXVwZGF0ZTpcblx0XHRcdFx0XHRcdHRoaXMuX2dldEZsYXNoU3RhdHVzKHN0YXR1cyk7XG5cdFx0XHRcdFx0XHR0aGlzLl91cGRhdGVJbnRlcmZhY2UoKTtcblx0XHRcdFx0XHRcdHRoaXMuX3RyaWdnZXIoZXZlbnRUeXBlKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJC5qUGxheWVyLmV2ZW50LnBsYXk6XG5cdFx0XHRcdFx0XHR0aGlzLl9zZWVrZWQoKTtcblx0XHRcdFx0XHRcdHRoaXMuX3VwZGF0ZUJ1dHRvbnModHJ1ZSk7XG5cdFx0XHRcdFx0XHR0aGlzLl90cmlnZ2VyKGV2ZW50VHlwZSk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICQualBsYXllci5ldmVudC5wYXVzZTpcblx0XHRcdFx0XHRcdHRoaXMuX3VwZGF0ZUJ1dHRvbnMoZmFsc2UpO1xuXHRcdFx0XHRcdFx0dGhpcy5fdHJpZ2dlcihldmVudFR5cGUpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0Y2FzZSAkLmpQbGF5ZXIuZXZlbnQuZW5kZWQ6XG5cdFx0XHRcdFx0XHR0aGlzLl91cGRhdGVCdXR0b25zKGZhbHNlKTtcblx0XHRcdFx0XHRcdHRoaXMuX3RyaWdnZXIoZXZlbnRUeXBlKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJC5qUGxheWVyLmV2ZW50LmNsaWNrOlxuXHRcdFx0XHRcdFx0dGhpcy5fdHJpZ2dlcihldmVudFR5cGUpOyAvLyBUaGlzIGNvdWxkIGJlIGRlYWx0IHdpdGggYnkgdGhlIGRlZmF1bHRcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJC5qUGxheWVyLmV2ZW50LmVycm9yOlxuXHRcdFx0XHRcdFx0dGhpcy5zdGF0dXMud2FpdEZvckxvYWQgPSB0cnVlOyAvLyBBbGxvd3MgdGhlIGxvYWQgb3BlcmF0aW9uIHRvIHRyeSBhZ2Fpbi5cblx0XHRcdFx0XHRcdHRoaXMuc3RhdHVzLndhaXRGb3JQbGF5ID0gdHJ1ZTsgLy8gUmVzZXQgc2luY2UgYSBwbGF5IHdhcyBjYXB0dXJlZC5cblx0XHRcdFx0XHRcdGlmKHRoaXMuc3RhdHVzLnZpZGVvKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuaW50ZXJuYWwuZmxhc2guanEuY3NzKHsnd2lkdGgnOicwcHgnLCAnaGVpZ2h0JzonMHB4J30pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYodGhpcy5fdmFsaWRTdHJpbmcodGhpcy5zdGF0dXMubWVkaWEucG9zdGVyKSkge1xuXHRcdFx0XHRcdFx0XHR0aGlzLmludGVybmFsLnBvc3Rlci5qcS5zaG93KCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZih0aGlzLmNzcy5qcS52aWRlb1BsYXkubGVuZ3RoICYmIHRoaXMuc3RhdHVzLnZpZGVvKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuY3NzLmpxLnZpZGVvUGxheS5zaG93KCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZih0aGlzLnN0YXR1cy52aWRlbykgeyAvLyBTZXQgdXAgZm9yIGFub3RoZXIgdHJ5LiBFeGVjdXRlIGJlZm9yZSBlcnJvciBldmVudC5cblx0XHRcdFx0XHRcdFx0dGhpcy5fZmxhc2hfc2V0VmlkZW8odGhpcy5zdGF0dXMubWVkaWEpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5fZmxhc2hfc2V0QXVkaW8odGhpcy5zdGF0dXMubWVkaWEpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0dGhpcy5fdXBkYXRlQnV0dG9ucyhmYWxzZSk7XG5cdFx0XHRcdFx0XHR0aGlzLl9lcnJvcigge1xuXHRcdFx0XHRcdFx0XHR0eXBlOiAkLmpQbGF5ZXIuZXJyb3IuVVJMLFxuXHRcdFx0XHRcdFx0XHRjb250ZXh0OnN0YXR1cy5zcmMsXG5cdFx0XHRcdFx0XHRcdG1lc3NhZ2U6ICQualBsYXllci5lcnJvck1zZy5VUkwsXG5cdFx0XHRcdFx0XHRcdGhpbnQ6ICQualBsYXllci5lcnJvckhpbnQuVVJMXG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJC5qUGxheWVyLmV2ZW50LnNlZWtpbmc6XG5cdFx0XHRcdFx0XHR0aGlzLl9zZWVraW5nKCk7XG5cdFx0XHRcdFx0XHR0aGlzLl90cmlnZ2VyKGV2ZW50VHlwZSk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRjYXNlICQualBsYXllci5ldmVudC5zZWVrZWQ6XG5cdFx0XHRcdFx0XHR0aGlzLl9zZWVrZWQoKTtcblx0XHRcdFx0XHRcdHRoaXMuX3RyaWdnZXIoZXZlbnRUeXBlKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdGNhc2UgJC5qUGxheWVyLmV2ZW50LnJlYWR5OlxuXHRcdFx0XHRcdFx0Ly8gVGhlIHJlYWR5IGV2ZW50IGlzIGhhbmRsZWQgb3V0c2lkZSB0aGUgc3dpdGNoIHN0YXRlbWVudC5cblx0XHRcdFx0XHRcdC8vIENhcHR1cmVkIGhlcmUgb3RoZXJ3aXNlIDIgcmVhZHkgZXZlbnRzIHdvdWxkIGJlIGdlbmVyYXRlZCBpZiB0aGUgcmVhZHkgZXZlbnQgaGFuZGxlciB1c2VkIHNldE1lZGlhLlxuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRcdHRoaXMuX3RyaWdnZXIoZXZlbnRUeXBlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0X2dldEZsYXNoU3RhdHVzOiBmdW5jdGlvbihzdGF0dXMpIHtcblx0XHRcdHRoaXMuc3RhdHVzLnNlZWtQZXJjZW50ID0gc3RhdHVzLnNlZWtQZXJjZW50O1xuXHRcdFx0dGhpcy5zdGF0dXMuY3VycmVudFBlcmNlbnRSZWxhdGl2ZSA9IHN0YXR1cy5jdXJyZW50UGVyY2VudFJlbGF0aXZlO1xuXHRcdFx0dGhpcy5zdGF0dXMuY3VycmVudFBlcmNlbnRBYnNvbHV0ZSA9IHN0YXR1cy5jdXJyZW50UGVyY2VudEFic29sdXRlO1xuXHRcdFx0dGhpcy5zdGF0dXMuY3VycmVudFRpbWUgPSBzdGF0dXMuY3VycmVudFRpbWU7XG5cdFx0XHR0aGlzLnN0YXR1cy5kdXJhdGlvbiA9IHN0YXR1cy5kdXJhdGlvbjtcblx0XHRcdHRoaXMuc3RhdHVzLnJlbWFpbmluZyA9IHN0YXR1cy5kdXJhdGlvbiAtIHN0YXR1cy5jdXJyZW50VGltZTtcblxuXHRcdFx0dGhpcy5zdGF0dXMudmlkZW9XaWR0aCA9IHN0YXR1cy52aWRlb1dpZHRoO1xuXHRcdFx0dGhpcy5zdGF0dXMudmlkZW9IZWlnaHQgPSBzdGF0dXMudmlkZW9IZWlnaHQ7XG5cblx0XHRcdC8vIFRoZSBGbGFzaCBkb2VzIG5vdCBnZW5lcmF0ZSB0aGlzIGluZm9ybWF0aW9uIGluIHRoaXMgcmVsZWFzZVxuXHRcdFx0dGhpcy5zdGF0dXMucmVhZHlTdGF0ZSA9IDQ7IC8vIHN0YXR1cy5yZWFkeVN0YXRlO1xuXHRcdFx0dGhpcy5zdGF0dXMubmV0d29ya1N0YXRlID0gMDsgLy8gc3RhdHVzLm5ldHdvcmtTdGF0ZTtcblx0XHRcdHRoaXMuc3RhdHVzLnBsYXliYWNrUmF0ZSA9IDE7IC8vIHN0YXR1cy5wbGF5YmFja1JhdGU7XG5cdFx0XHR0aGlzLnN0YXR1cy5lbmRlZCA9IGZhbHNlOyAvLyBzdGF0dXMuZW5kZWQ7XG5cdFx0fSxcblx0XHRfdXBkYXRlQnV0dG9uczogZnVuY3Rpb24ocGxheWluZykge1xuXHRcdFx0aWYocGxheWluZyA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdHBsYXlpbmcgPSAhdGhpcy5zdGF0dXMucGF1c2VkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5zdGF0dXMucGF1c2VkID0gIXBsYXlpbmc7XG5cdFx0XHR9XG5cdFx0XHQvLyBBcHBseSB0aGUgc3RhdGUgY2xhc3Nlcy4gKEZvciB0aGUgdXNlU3RhdGVDbGFzc1NraW46dHJ1ZSBvcHRpb24pXG5cdFx0XHRpZihwbGF5aW5nKSB7XG5cdFx0XHRcdHRoaXMuYWRkU3RhdGVDbGFzcygncGxheWluZycpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5yZW1vdmVTdGF0ZUNsYXNzKCdwbGF5aW5nJyk7XG5cdFx0XHR9XG5cdFx0XHRpZighdGhpcy5zdGF0dXMubm9GdWxsV2luZG93ICYmIHRoaXMub3B0aW9ucy5mdWxsV2luZG93KSB7XG5cdFx0XHRcdHRoaXMuYWRkU3RhdGVDbGFzcygnZnVsbFNjcmVlbicpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5yZW1vdmVTdGF0ZUNsYXNzKCdmdWxsU2NyZWVuJyk7XG5cdFx0XHR9XG5cdFx0XHRpZih0aGlzLm9wdGlvbnMubG9vcCkge1xuXHRcdFx0XHR0aGlzLmFkZFN0YXRlQ2xhc3MoJ2xvb3BlZCcpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5yZW1vdmVTdGF0ZUNsYXNzKCdsb29wZWQnKTtcblx0XHRcdH1cblx0XHRcdC8vIFRvZ2dsZSB0aGUgR1VJIGVsZW1lbnQgcGFpcnMuIChGb3IgdGhlIHVzZVN0YXRlQ2xhc3NTa2luOmZhbHNlIG9wdGlvbilcblx0XHRcdGlmKHRoaXMuY3NzLmpxLnBsYXkubGVuZ3RoICYmIHRoaXMuY3NzLmpxLnBhdXNlLmxlbmd0aCkge1xuXHRcdFx0XHRpZihwbGF5aW5nKSB7XG5cdFx0XHRcdFx0dGhpcy5jc3MuanEucGxheS5oaWRlKCk7XG5cdFx0XHRcdFx0dGhpcy5jc3MuanEucGF1c2Uuc2hvdygpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuY3NzLmpxLnBsYXkuc2hvdygpO1xuXHRcdFx0XHRcdHRoaXMuY3NzLmpxLnBhdXNlLmhpZGUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYodGhpcy5jc3MuanEucmVzdG9yZVNjcmVlbi5sZW5ndGggJiYgdGhpcy5jc3MuanEuZnVsbFNjcmVlbi5sZW5ndGgpIHtcblx0XHRcdFx0aWYodGhpcy5zdGF0dXMubm9GdWxsV2luZG93KSB7XG5cdFx0XHRcdFx0dGhpcy5jc3MuanEuZnVsbFNjcmVlbi5oaWRlKCk7XG5cdFx0XHRcdFx0dGhpcy5jc3MuanEucmVzdG9yZVNjcmVlbi5oaWRlKCk7XG5cdFx0XHRcdH0gZWxzZSBpZih0aGlzLm9wdGlvbnMuZnVsbFdpbmRvdykge1xuXHRcdFx0XHRcdHRoaXMuY3NzLmpxLmZ1bGxTY3JlZW4uaGlkZSgpO1xuXHRcdFx0XHRcdHRoaXMuY3NzLmpxLnJlc3RvcmVTY3JlZW4uc2hvdygpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMuY3NzLmpxLmZ1bGxTY3JlZW4uc2hvdygpO1xuXHRcdFx0XHRcdHRoaXMuY3NzLmpxLnJlc3RvcmVTY3JlZW4uaGlkZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZih0aGlzLmNzcy5qcS5yZXBlYXQubGVuZ3RoICYmIHRoaXMuY3NzLmpxLnJlcGVhdE9mZi5sZW5ndGgpIHtcblx0XHRcdFx0aWYodGhpcy5vcHRpb25zLmxvb3ApIHtcblx0XHRcdFx0XHR0aGlzLmNzcy5qcS5yZXBlYXQuaGlkZSgpO1xuXHRcdFx0XHRcdHRoaXMuY3NzLmpxLnJlcGVhdE9mZi5zaG93KCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5jc3MuanEucmVwZWF0LnNob3coKTtcblx0XHRcdFx0XHR0aGlzLmNzcy5qcS5yZXBlYXRPZmYuaGlkZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfdXBkYXRlSW50ZXJmYWNlOiBmdW5jdGlvbigpIHtcblx0XHRcdGlmKHRoaXMuY3NzLmpxLnNlZWtCYXIubGVuZ3RoKSB7XG5cdFx0XHRcdHRoaXMuY3NzLmpxLnNlZWtCYXIud2lkdGgodGhpcy5zdGF0dXMuc2Vla1BlcmNlbnQrXCIlXCIpO1xuXHRcdFx0fVxuXHRcdFx0aWYodGhpcy5jc3MuanEucGxheUJhci5sZW5ndGgpIHtcblx0XHRcdFx0aWYodGhpcy5vcHRpb25zLnNtb290aFBsYXlCYXIpIHtcblx0XHRcdFx0XHR0aGlzLmNzcy5qcS5wbGF5QmFyLnN0b3AoKS5hbmltYXRlKHtcblx0XHRcdFx0XHRcdHdpZHRoOiB0aGlzLnN0YXR1cy5jdXJyZW50UGVyY2VudEFic29sdXRlK1wiJVwiXG5cdFx0XHRcdFx0fSwgMjUwLCBcImxpbmVhclwiKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLmNzcy5qcS5wbGF5QmFyLndpZHRoKHRoaXMuc3RhdHVzLmN1cnJlbnRQZXJjZW50UmVsYXRpdmUrXCIlXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWVUZXh0ID0gJyc7XG5cdFx0XHRpZih0aGlzLmNzcy5qcS5jdXJyZW50VGltZS5sZW5ndGgpIHtcblx0XHRcdFx0Y3VycmVudFRpbWVUZXh0ID0gdGhpcy5fY29udmVydFRpbWUodGhpcy5zdGF0dXMuY3VycmVudFRpbWUpO1xuXHRcdFx0XHRpZihjdXJyZW50VGltZVRleHQgIT09IHRoaXMuY3NzLmpxLmN1cnJlbnRUaW1lLnRleHQoKSkge1xuXHRcdFx0XHRcdHRoaXMuY3NzLmpxLmN1cnJlbnRUaW1lLnRleHQodGhpcy5fY29udmVydFRpbWUodGhpcy5zdGF0dXMuY3VycmVudFRpbWUpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dmFyIGR1cmF0aW9uVGV4dCA9ICcnLFxuXHRcdFx0XHRkdXJhdGlvbiA9IHRoaXMuc3RhdHVzLmR1cmF0aW9uLFxuXHRcdFx0XHRyZW1haW5pbmcgPSB0aGlzLnN0YXR1cy5yZW1haW5pbmc7XG5cdFx0XHRpZih0aGlzLmNzcy5qcS5kdXJhdGlvbi5sZW5ndGgpIHtcblx0XHRcdFx0aWYodHlwZW9mIHRoaXMuc3RhdHVzLm1lZGlhLmR1cmF0aW9uID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRcdGR1cmF0aW9uVGV4dCA9IHRoaXMuc3RhdHVzLm1lZGlhLmR1cmF0aW9uO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGlmKHR5cGVvZiB0aGlzLnN0YXR1cy5tZWRpYS5kdXJhdGlvbiA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0XHRcdGR1cmF0aW9uID0gdGhpcy5zdGF0dXMubWVkaWEuZHVyYXRpb247XG5cdFx0XHRcdFx0XHRyZW1haW5pbmcgPSBkdXJhdGlvbiAtIHRoaXMuc3RhdHVzLmN1cnJlbnRUaW1lO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZih0aGlzLm9wdGlvbnMucmVtYWluaW5nRHVyYXRpb24pIHtcblx0XHRcdFx0XHRcdGR1cmF0aW9uVGV4dCA9IChyZW1haW5pbmcgPiAwID8gJy0nIDogJycpICsgdGhpcy5fY29udmVydFRpbWUocmVtYWluaW5nKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZHVyYXRpb25UZXh0ID0gdGhpcy5fY29udmVydFRpbWUoZHVyYXRpb24pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZihkdXJhdGlvblRleHQgIT09IHRoaXMuY3NzLmpxLmR1cmF0aW9uLnRleHQoKSkge1xuXHRcdFx0XHRcdHRoaXMuY3NzLmpxLmR1cmF0aW9uLnRleHQoZHVyYXRpb25UZXh0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0X2NvbnZlcnRUaW1lOiBDb252ZXJ0VGltZS5wcm90b3R5cGUudGltZSxcblx0XHRfc2Vla2luZzogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZih0aGlzLmNzcy5qcS5zZWVrQmFyLmxlbmd0aCkge1xuXHRcdFx0XHR0aGlzLmNzcy5qcS5zZWVrQmFyLmFkZENsYXNzKFwianAtc2Vla2luZy1iZ1wiKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuYWRkU3RhdGVDbGFzcygnc2Vla2luZycpO1xuXHRcdH0sXG5cdFx0X3NlZWtlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZih0aGlzLmNzcy5qcS5zZWVrQmFyLmxlbmd0aCkge1xuXHRcdFx0XHR0aGlzLmNzcy5qcS5zZWVrQmFyLnJlbW92ZUNsYXNzKFwianAtc2Vla2luZy1iZ1wiKTtcblx0XHRcdH1cblx0XHRcdHRoaXMucmVtb3ZlU3RhdGVDbGFzcygnc2Vla2luZycpO1xuXHRcdH0sXG5cdFx0X3Jlc2V0R2F0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLmh0bWwuYXVkaW8uZ2F0ZSA9IGZhbHNlO1xuXHRcdFx0dGhpcy5odG1sLnZpZGVvLmdhdGUgPSBmYWxzZTtcblx0XHRcdHRoaXMuYXVyb3JhLmdhdGUgPSBmYWxzZTtcblx0XHRcdHRoaXMuZmxhc2guZ2F0ZSA9IGZhbHNlO1xuXHRcdH0sXG5cdFx0X3Jlc2V0QWN0aXZlOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuaHRtbC5hY3RpdmUgPSBmYWxzZTtcblx0XHRcdHRoaXMuYXVyb3JhLmFjdGl2ZSA9IGZhbHNlO1xuXHRcdFx0dGhpcy5mbGFzaC5hY3RpdmUgPSBmYWxzZTtcblx0XHR9LFxuXHRcdF9lc2NhcGVIdG1sOiBmdW5jdGlvbihzKSB7XG5cdFx0XHRyZXR1cm4gcy5zcGxpdCgnJicpLmpvaW4oJyZhbXA7Jykuc3BsaXQoJzwnKS5qb2luKCcmbHQ7Jykuc3BsaXQoJz4nKS5qb2luKCcmZ3Q7Jykuc3BsaXQoJ1wiJykuam9pbignJnF1b3Q7Jyk7XG5cdFx0fSxcblx0XHRfcXVhbGlmeVVSTDogZnVuY3Rpb24odXJsKSB7XG5cdFx0XHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0XHRcdGVsLmlubmVySFRNTD0gJzxhIGhyZWY9XCInICsgdGhpcy5fZXNjYXBlSHRtbCh1cmwpICsgJ1wiPng8L2E+Jztcblx0XHRcdHJldHVybiBlbC5maXJzdENoaWxkLmhyZWY7XG5cdFx0fSxcblx0XHRfYWJzb2x1dGVNZWRpYVVybHM6IGZ1bmN0aW9uKG1lZGlhKSB7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0XHQkLmVhY2gobWVkaWEsIGZ1bmN0aW9uKHR5cGUsIHVybCkge1xuXHRcdFx0XHRpZih1cmwgJiYgc2VsZi5mb3JtYXRbdHlwZV0gJiYgdXJsLnN1YnN0cigwLCA1KSAhPT0gXCJkYXRhOlwiKSB7XG5cdFx0XHRcdFx0bWVkaWFbdHlwZV0gPSBzZWxmLl9xdWFsaWZ5VVJMKHVybCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIG1lZGlhO1xuXHRcdH0sXG5cdFx0YWRkU3RhdGVDbGFzczogZnVuY3Rpb24oc3RhdGUpIHtcblx0XHRcdGlmKHRoaXMuYW5jZXN0b3JKcS5sZW5ndGgpIHtcblx0XHRcdFx0dGhpcy5hbmNlc3RvckpxLmFkZENsYXNzKHRoaXMub3B0aW9ucy5zdGF0ZUNsYXNzW3N0YXRlXSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRyZW1vdmVTdGF0ZUNsYXNzOiBmdW5jdGlvbihzdGF0ZSkge1xuXHRcdFx0aWYodGhpcy5hbmNlc3RvckpxLmxlbmd0aCkge1xuXHRcdFx0XHR0aGlzLmFuY2VzdG9ySnEucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLnN0YXRlQ2xhc3Nbc3RhdGVdKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNldE1lZGlhOiBmdW5jdGlvbihtZWRpYSkge1xuXG5cdFx0XHQvKlx0bWVkaWFbZm9ybWF0XSA9IFN0cmluZzogVVJMIG9mIGZvcm1hdC4gTXVzdCBjb250YWluIGFsbCBvZiB0aGUgc3VwcGxpZWQgb3B0aW9uJ3MgdmlkZW8gb3IgYXVkaW8gZm9ybWF0cy5cblx0XHRcdCAqXHRtZWRpYS5wb3N0ZXIgPSBTdHJpbmc6IFZpZGVvIHBvc3RlciBVUkwuXG5cdFx0XHQgKlx0bWVkaWEudHJhY2sgPSBBcnJheTogT2Ygb2JqZWN0cyBkZWZpbmluZyB0aGUgdHJhY2sgZWxlbWVudDoga2luZCwgc3JjLCBzcmNsYW5nLCBsYWJlbCwgZGVmLlxuXHRcdFx0ICpcdG1lZGlhLnN0cmVhbSA9IEJvb2xlYW46ICogTk9UIElNUExFTUVOVEVEICogRGVzaWduYXRpbmcgYWN0dWFsIG1lZGlhIHN0cmVhbXMuIGllLiwgXCJmYWxzZS91bmRlZmluZWRcIiBmb3IgZmlsZXMuIFBsYW4gdG8gcmVmcmVzaCB0aGUgZmxhc2ggZXZlcnkgc28gb2Z0ZW4uXG5cdFx0XHQgKi9cblxuXHRcdFx0dmFyXHRzZWxmID0gdGhpcyxcblx0XHRcdFx0c3VwcG9ydGVkID0gZmFsc2UsXG5cdFx0XHRcdHBvc3RlckNoYW5nZWQgPSB0aGlzLnN0YXR1cy5tZWRpYS5wb3N0ZXIgIT09IG1lZGlhLnBvc3RlcjsgLy8gQ29tcGFyZSBiZWZvcmUgcmVzZXQuIEltcG9ydGFudCBmb3IgT1NYIFNhZmFyaSBhcyB0aGlzLmh0bWxFbGVtZW50LnBvc3Rlci5zcmMgaXMgYWJzb2x1dGUsIGV2ZW4gaWYgb3JpZ2luYWwgcG9zdGVyIFVSTCB3YXMgcmVsYXRpdmUuXG5cblx0XHRcdHRoaXMuX3Jlc2V0TWVkaWEoKTtcblx0XHRcdHRoaXMuX3Jlc2V0R2F0ZSgpO1xuXHRcdFx0dGhpcy5fcmVzZXRBY3RpdmUoKTtcblxuXHRcdFx0Ly8gQ2xlYXIgdGhlIEFuZHJvaWQgRml4LlxuXHRcdFx0dGhpcy5hbmRyb2lkRml4LnNldE1lZGlhID0gZmFsc2U7XG5cdFx0XHR0aGlzLmFuZHJvaWRGaXgucGxheSA9IGZhbHNlO1xuXHRcdFx0dGhpcy5hbmRyb2lkRml4LnBhdXNlID0gZmFsc2U7XG5cblx0XHRcdC8vIENvbnZlcnQgYWxsIG1lZGlhIFVSTHMgdG8gYWJzb2x1dGUgVVJMcy5cblx0XHRcdG1lZGlhID0gdGhpcy5fYWJzb2x1dGVNZWRpYVVybHMobWVkaWEpO1xuXG5cdFx0XHQkLmVhY2godGhpcy5mb3JtYXRzLCBmdW5jdGlvbihmb3JtYXRQcmlvcml0eSwgZm9ybWF0KSB7XG5cdFx0XHRcdHZhciBpc1ZpZGVvID0gc2VsZi5mb3JtYXRbZm9ybWF0XS5tZWRpYSA9PT0gJ3ZpZGVvJztcblx0XHRcdFx0JC5lYWNoKHNlbGYuc29sdXRpb25zLCBmdW5jdGlvbihzb2x1dGlvblByaW9yaXR5LCBzb2x1dGlvbikge1xuXHRcdFx0XHRcdGlmKHNlbGZbc29sdXRpb25dLnN1cHBvcnRbZm9ybWF0XSAmJiBzZWxmLl92YWxpZFN0cmluZyhtZWRpYVtmb3JtYXRdKSkgeyAvLyBGb3JtYXQgc3VwcG9ydGVkIGluIHNvbHV0aW9uIGFuZCB1cmwgZ2l2ZW4gZm9yIGZvcm1hdC5cblx0XHRcdFx0XHRcdHZhciBpc0h0bWwgPSBzb2x1dGlvbiA9PT0gJ2h0bWwnO1xuXHRcdFx0XHRcdFx0dmFyIGlzQXVyb3JhID0gc29sdXRpb24gPT09ICdhdXJvcmEnO1xuXG5cdFx0XHRcdFx0XHRpZihpc1ZpZGVvKSB7XG5cdFx0XHRcdFx0XHRcdGlmKGlzSHRtbCkge1xuXHRcdFx0XHRcdFx0XHRcdHNlbGYuaHRtbC52aWRlby5nYXRlID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0XHRzZWxmLl9odG1sX3NldFZpZGVvKG1lZGlhKTtcblx0XHRcdFx0XHRcdFx0XHRzZWxmLmh0bWwuYWN0aXZlID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRzZWxmLmZsYXNoLmdhdGUgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRcdHNlbGYuX2ZsYXNoX3NldFZpZGVvKG1lZGlhKTtcblx0XHRcdFx0XHRcdFx0XHRzZWxmLmZsYXNoLmFjdGl2ZSA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aWYoc2VsZi5jc3MuanEudmlkZW9QbGF5Lmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0XHRcdHNlbGYuY3NzLmpxLnZpZGVvUGxheS5zaG93KCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0c2VsZi5zdGF0dXMudmlkZW8gPSB0cnVlO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0aWYoaXNIdG1sKSB7XG5cdFx0XHRcdFx0XHRcdFx0c2VsZi5odG1sLmF1ZGlvLmdhdGUgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRcdHNlbGYuX2h0bWxfc2V0QXVkaW8obWVkaWEpO1xuXHRcdFx0XHRcdFx0XHRcdHNlbGYuaHRtbC5hY3RpdmUgPSB0cnVlO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU2V0dXAgdGhlIEFuZHJvaWQgRml4IC0gT25seSBmb3IgSFRNTCBhdWRpby5cblx0XHRcdFx0XHRcdFx0XHRpZigkLmpQbGF5ZXIucGxhdGZvcm0uYW5kcm9pZCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0c2VsZi5hbmRyb2lkRml4LnNldE1lZGlhID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZihpc0F1cm9yYSkge1xuXHRcdFx0XHRcdFx0XHRcdHNlbGYuYXVyb3JhLmdhdGUgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRcdHNlbGYuX2F1cm9yYV9zZXRBdWRpbyhtZWRpYSk7XG5cdFx0XHRcdFx0XHRcdFx0c2VsZi5hdXJvcmEuYWN0aXZlID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRzZWxmLmZsYXNoLmdhdGUgPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRcdHNlbGYuX2ZsYXNoX3NldEF1ZGlvKG1lZGlhKTtcblx0XHRcdFx0XHRcdFx0XHRzZWxmLmZsYXNoLmFjdGl2ZSA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aWYoc2VsZi5jc3MuanEudmlkZW9QbGF5Lmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0XHRcdHNlbGYuY3NzLmpxLnZpZGVvUGxheS5oaWRlKCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0c2VsZi5zdGF0dXMudmlkZW8gPSBmYWxzZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3VwcG9ydGVkID0gdHJ1ZTtcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTsgLy8gRXhpdCAkLmVhY2hcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRpZihzdXBwb3J0ZWQpIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7IC8vIEV4aXQgJC5lYWNoXG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRpZihzdXBwb3J0ZWQpIHtcblx0XHRcdFx0aWYoISh0aGlzLnN0YXR1cy5uYXRpdmVWaWRlb0NvbnRyb2xzICYmIHRoaXMuaHRtbC52aWRlby5nYXRlKSkge1xuXHRcdFx0XHRcdC8vIFNldCBwb3N0ZXIgSU1HIGlmIG5hdGl2ZSB2aWRlbyBjb250cm9scyBhcmUgbm90IGJlaW5nIHVzZWRcblx0XHRcdFx0XHQvLyBOb3RlOiBXaXRoIElFIHRoZSBJTUcgb25sb2FkIGV2ZW50IG9jY3VycyBpbW1lZGlhdGVseSB3aGVuIGNhY2hlZC5cblx0XHRcdFx0XHQvLyBOb3RlOiBQb3N0ZXIgaGlkZGVuIGJ5IGRlZmF1bHQgaW4gX3Jlc2V0TWVkaWEoKVxuXHRcdFx0XHRcdGlmKHRoaXMuX3ZhbGlkU3RyaW5nKG1lZGlhLnBvc3RlcikpIHtcblx0XHRcdFx0XHRcdGlmKHBvc3RlckNoYW5nZWQpIHsgLy8gU2luY2Ugc29tZSBicm93c2VycyBkbyBub3QgZ2VuZXJhdGUgaW1nIG9ubG9hZCBldmVudC5cblx0XHRcdFx0XHRcdFx0dGhpcy5odG1sRWxlbWVudC5wb3N0ZXIuc3JjID0gbWVkaWEucG9zdGVyO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5pbnRlcm5hbC5wb3N0ZXIuanEuc2hvdygpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRpZih0eXBlb2YgbWVkaWEudGl0bGUgPT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdFx0aWYodGhpcy5jc3MuanEudGl0bGUubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmNzcy5qcS50aXRsZS5odG1sKG1lZGlhLnRpdGxlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYodGhpcy5odG1sRWxlbWVudC5hdWRpbykge1xuXHRcdFx0XHRcdFx0dGhpcy5odG1sRWxlbWVudC5hdWRpby5zZXRBdHRyaWJ1dGUoJ3RpdGxlJywgbWVkaWEudGl0bGUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZih0aGlzLmh0bWxFbGVtZW50LnZpZGVvKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmh0bWxFbGVtZW50LnZpZGVvLnNldEF0dHJpYnV0ZSgndGl0bGUnLCBtZWRpYS50aXRsZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuc3RhdHVzLnNyY1NldCA9IHRydWU7XG5cdFx0XHRcdHRoaXMuc3RhdHVzLm1lZGlhID0gJC5leHRlbmQoe30sIG1lZGlhKTtcblx0XHRcdFx0dGhpcy5fdXBkYXRlQnV0dG9ucyhmYWxzZSk7XG5cdFx0XHRcdHRoaXMuX3VwZGF0ZUludGVyZmFjZSgpO1xuXHRcdFx0XHR0aGlzLl90cmlnZ2VyKCQualBsYXllci5ldmVudC5zZXRtZWRpYSk7XG5cdFx0XHR9IGVsc2UgeyAvLyBqUGxheWVyIGNhbm5vdCBzdXBwb3J0IGFueSBmb3JtYXRzIHByb3ZpZGVkIGluIHRoaXMgYnJvd3NlclxuXHRcdFx0XHQvLyBTZW5kIGFuIGVycm9yIGV2ZW50XG5cdFx0XHRcdHRoaXMuX2Vycm9yKCB7XG5cdFx0XHRcdFx0dHlwZTogJC5qUGxheWVyLmVycm9yLk5PX1NVUFBPUlQsXG5cdFx0XHRcdFx0Y29udGV4dDogXCJ7c3VwcGxpZWQ6J1wiICsgdGhpcy5vcHRpb25zLnN1cHBsaWVkICsgXCInfVwiLFxuXHRcdFx0XHRcdG1lc3NhZ2U6ICQualBsYXllci5lcnJvck1zZy5OT19TVVBQT1JULFxuXHRcdFx0XHRcdGhpbnQ6ICQualBsYXllci5lcnJvckhpbnQuTk9fU1VQUE9SVFxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdF9yZXNldE1lZGlhOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuX3Jlc2V0U3RhdHVzKCk7XG5cdFx0XHR0aGlzLl91cGRhdGVCdXR0b25zKGZhbHNlKTtcblx0XHRcdHRoaXMuX3VwZGF0ZUludGVyZmFjZSgpO1xuXHRcdFx0dGhpcy5fc2Vla2VkKCk7XG5cdFx0XHR0aGlzLmludGVybmFsLnBvc3Rlci5qcS5oaWRlKCk7XG5cblx0XHRcdGNsZWFyVGltZW91dCh0aGlzLmludGVybmFsLmh0bWxEbHlDbWRJZCk7XG5cblx0XHRcdGlmKHRoaXMuaHRtbC5hY3RpdmUpIHtcblx0XHRcdFx0dGhpcy5faHRtbF9yZXNldE1lZGlhKCk7XG5cdFx0XHR9IGVsc2UgaWYodGhpcy5hdXJvcmEuYWN0aXZlKSB7XG5cdFx0XHRcdHRoaXMuX2F1cm9yYV9yZXNldE1lZGlhKCk7XG5cdFx0XHR9IGVsc2UgaWYodGhpcy5mbGFzaC5hY3RpdmUpIHtcblx0XHRcdFx0dGhpcy5fZmxhc2hfcmVzZXRNZWRpYSgpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0Y2xlYXJNZWRpYTogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLl9yZXNldE1lZGlhKCk7XG5cblx0XHRcdGlmKHRoaXMuaHRtbC5hY3RpdmUpIHtcblx0XHRcdFx0dGhpcy5faHRtbF9jbGVhck1lZGlhKCk7XG5cdFx0XHR9IGVsc2UgaWYodGhpcy5hdXJvcmEuYWN0aXZlKSB7XG5cdFx0XHRcdHRoaXMuX2F1cm9yYV9jbGVhck1lZGlhKCk7XG5cdFx0XHR9IGVsc2UgaWYodGhpcy5mbGFzaC5hY3RpdmUpIHtcblx0XHRcdFx0dGhpcy5fZmxhc2hfY2xlYXJNZWRpYSgpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9yZXNldEdhdGUoKTtcblx0XHRcdHRoaXMuX3Jlc2V0QWN0aXZlKCk7XG5cdFx0fSxcblx0XHRsb2FkOiBmdW5jdGlvbigpIHtcblx0XHRcdGlmKHRoaXMuc3RhdHVzLnNyY1NldCkge1xuXHRcdFx0XHRpZih0aGlzLmh0bWwuYWN0aXZlKSB7XG5cdFx0XHRcdFx0dGhpcy5faHRtbF9sb2FkKCk7XG5cdFx0XHRcdH0gZWxzZSBpZih0aGlzLmF1cm9yYS5hY3RpdmUpIHtcblx0XHRcdFx0XHR0aGlzLl9hdXJvcmFfbG9hZCgpO1xuXHRcdFx0XHR9IGVsc2UgaWYodGhpcy5mbGFzaC5hY3RpdmUpIHtcblx0XHRcdFx0XHR0aGlzLl9mbGFzaF9sb2FkKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuX3VybE5vdFNldEVycm9yKFwibG9hZFwiKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGZvY3VzOiBmdW5jdGlvbigpIHtcblx0XHRcdGlmKHRoaXMub3B0aW9ucy5rZXlFbmFibGVkKSB7XG5cdFx0XHRcdCQualBsYXllci5mb2N1cyA9IHRoaXM7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRwbGF5OiBmdW5jdGlvbih0aW1lKSB7XG5cdFx0XHR2YXIgZ3VpQWN0aW9uID0gdHlwZW9mIHRpbWUgPT09IFwib2JqZWN0XCI7IC8vIEZsYWdzIEdVSSBjbGljayBldmVudHMgc28gd2Uga25vdyB0aGlzIHdhcyBub3QgYSBkaXJlY3QgY29tbWFuZCwgYnV0IGFuIGFjdGlvbiB0YWtlbiBieSB0aGUgdXNlciBvbiB0aGUgR1VJLlxuXHRcdFx0aWYoZ3VpQWN0aW9uICYmIHRoaXMub3B0aW9ucy51c2VTdGF0ZUNsYXNzU2tpbiAmJiAhdGhpcy5zdGF0dXMucGF1c2VkKSB7XG5cdFx0XHRcdHRoaXMucGF1c2UodGltZSk7IC8vIFRoZSB0aW1lIHdvdWxkIGJlIHRoZSBjbGljayBldmVudCwgYnV0IHBhc3NpbmcgaXQgb3ZlciBzbyBpbmZvIGlzIG5vdCBsb3N0LlxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGltZSA9ICh0eXBlb2YgdGltZSA9PT0gXCJudW1iZXJcIikgPyB0aW1lIDogTmFOOyAvLyBSZW1vdmUgalF1ZXJ5IGV2ZW50IGZyb20gY2xpY2sgaGFuZGxlclxuXHRcdFx0XHRpZih0aGlzLnN0YXR1cy5zcmNTZXQpIHtcblx0XHRcdFx0XHR0aGlzLmZvY3VzKCk7XG5cdFx0XHRcdFx0aWYodGhpcy5odG1sLmFjdGl2ZSkge1xuXHRcdFx0XHRcdFx0dGhpcy5faHRtbF9wbGF5KHRpbWUpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZih0aGlzLmF1cm9yYS5hY3RpdmUpIHtcblx0XHRcdFx0XHRcdHRoaXMuX2F1cm9yYV9wbGF5KHRpbWUpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZih0aGlzLmZsYXNoLmFjdGl2ZSkge1xuXHRcdFx0XHRcdFx0dGhpcy5fZmxhc2hfcGxheSh0aW1lKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5fdXJsTm90U2V0RXJyb3IoXCJwbGF5XCIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHR2aWRlb1BsYXk6IGZ1bmN0aW9uKCkgeyAvLyBIYW5kbGVzIGNsaWNrcyBvbiB0aGUgcGxheSBidXR0b24gb3ZlciB0aGUgdmlkZW8gcG9zdGVyXG5cdFx0XHR0aGlzLnBsYXkoKTtcblx0XHR9LFxuXHRcdHBhdXNlOiBmdW5jdGlvbih0aW1lKSB7XG5cdFx0XHR0aW1lID0gKHR5cGVvZiB0aW1lID09PSBcIm51bWJlclwiKSA/IHRpbWUgOiBOYU47IC8vIFJlbW92ZSBqUXVlcnkgZXZlbnQgZnJvbSBjbGljayBoYW5kbGVyXG5cdFx0XHRpZih0aGlzLnN0YXR1cy5zcmNTZXQpIHtcblx0XHRcdFx0aWYodGhpcy5odG1sLmFjdGl2ZSkge1xuXHRcdFx0XHRcdHRoaXMuX2h0bWxfcGF1c2UodGltZSk7XG5cdFx0XHRcdH0gZWxzZSBpZih0aGlzLmF1cm9yYS5hY3RpdmUpIHtcblx0XHRcdFx0XHR0aGlzLl9hdXJvcmFfcGF1c2UodGltZSk7XG5cdFx0XHRcdH0gZWxzZSBpZih0aGlzLmZsYXNoLmFjdGl2ZSkge1xuXHRcdFx0XHRcdHRoaXMuX2ZsYXNoX3BhdXNlKHRpbWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLl91cmxOb3RTZXRFcnJvcihcInBhdXNlXCIpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0dGVsbE90aGVyczogZnVuY3Rpb24oY29tbWFuZCwgY29uZGl0aW9ucykge1xuXHRcdFx0dmFyIHNlbGYgPSB0aGlzLFxuXHRcdFx0XHRoYXNDb25kaXRpb25zID0gdHlwZW9mIGNvbmRpdGlvbnMgPT09ICdmdW5jdGlvbicsXG5cdFx0XHRcdGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpOyAvLyBDb252ZXJ0IGFyZ3VtZW50cyB0byBhbiBBcnJheS5cblxuXHRcdFx0aWYodHlwZW9mIGNvbW1hbmQgIT09ICdzdHJpbmcnKSB7IC8vIElnbm9yZSwgc2luY2Ugbm8gY29tbWFuZC5cblx0XHRcdFx0cmV0dXJuOyAvLyBSZXR1cm4gdW5kZWZpbmVkIHRvIG1haW50YWluIGNoYWluaW5nLlxuXHRcdFx0fVxuXHRcdFx0aWYoaGFzQ29uZGl0aW9ucykge1xuXHRcdFx0XHRhcmdzLnNwbGljZSgxLCAxKTsgLy8gUmVtb3ZlIHRoZSBjb25kaXRpb25zIGZyb20gdGhlIGFyZ3VtZW50c1xuXHRcdFx0fVxuXG5cdFx0XHQkLmpQbGF5ZXIucHJvdG90eXBlLmRlc3Ryb3lSZW1vdmVkKCk7XG5cdFx0XHQkLmVhY2godGhpcy5pbnN0YW5jZXMsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGF0IFwidGhpc1wiIGlzIHRoZSBpbnN0YW5jZSdzIFwiZWxlbWVudFwiIGluIHRoZSAkLmVhY2goKSBsb29wLlxuXHRcdFx0XHRpZihzZWxmLmVsZW1lbnQgIT09IHRoaXMpIHsgLy8gRG8gbm90IHRlbGwgbXkgaW5zdGFuY2UuXG5cdFx0XHRcdFx0aWYoIWhhc0NvbmRpdGlvbnMgfHwgY29uZGl0aW9ucy5jYWxsKHRoaXMuZGF0YShcImpQbGF5ZXJcIiksIHNlbGYpKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmpQbGF5ZXIuYXBwbHkodGhpcywgYXJncyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9LFxuXHRcdHBhdXNlT3RoZXJzOiBmdW5jdGlvbih0aW1lKSB7XG5cdFx0XHR0aGlzLnRlbGxPdGhlcnMoXCJwYXVzZVwiLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Ly8gSW4gdGhlIGNvbmRpdGlvbnMgZnVuY3Rpb24sIHRoZSBcInRoaXNcIiBjb250ZXh0IGlzIHRoZSBvdGhlciBpbnN0YW5jZSdzIGpQbGF5ZXIgb2JqZWN0LlxuXHRcdFx0XHRyZXR1cm4gdGhpcy5zdGF0dXMuc3JjU2V0O1xuXHRcdFx0fSwgdGltZSk7XG5cdFx0fSxcblx0XHRzdG9wOiBmdW5jdGlvbigpIHtcblx0XHRcdGlmKHRoaXMuc3RhdHVzLnNyY1NldCkge1xuXHRcdFx0XHRpZih0aGlzLmh0bWwuYWN0aXZlKSB7XG5cdFx0XHRcdFx0dGhpcy5faHRtbF9wYXVzZSgwKTtcblx0XHRcdFx0fSBlbHNlIGlmKHRoaXMuYXVyb3JhLmFjdGl2ZSkge1xuXHRcdFx0XHRcdHRoaXMuX2F1cm9yYV9wYXVzZSgwKTtcblx0XHRcdFx0fSBlbHNlIGlmKHRoaXMuZmxhc2guYWN0aXZlKSB7XG5cdFx0XHRcdFx0dGhpcy5fZmxhc2hfcGF1c2UoMCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuX3VybE5vdFNldEVycm9yKFwic3RvcFwiKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHBsYXlIZWFkOiBmdW5jdGlvbihwKSB7XG5cdFx0XHRwID0gdGhpcy5fbGltaXRWYWx1ZShwLCAwLCAxMDApO1xuXHRcdFx0aWYodGhpcy5zdGF0dXMuc3JjU2V0KSB7XG5cdFx0XHRcdGlmKHRoaXMuaHRtbC5hY3RpdmUpIHtcblx0XHRcdFx0XHR0aGlzLl9odG1sX3BsYXlIZWFkKHApO1xuXHRcdFx0XHR9IGVsc2UgaWYodGhpcy5hdXJvcmEuYWN0aXZlKSB7XG5cdFx0XHRcdFx0dGhpcy5fYXVyb3JhX3BsYXlIZWFkKHApO1xuXHRcdFx0XHR9IGVsc2UgaWYodGhpcy5mbGFzaC5hY3RpdmUpIHtcblx0XHRcdFx0XHR0aGlzLl9mbGFzaF9wbGF5SGVhZChwKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5fdXJsTm90U2V0RXJyb3IoXCJwbGF5SGVhZFwiKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdF9tdXRlZDogZnVuY3Rpb24obXV0ZWQpIHtcblx0XHRcdHRoaXMubXV0ZWRXb3JrZXIobXV0ZWQpO1xuXHRcdFx0aWYodGhpcy5vcHRpb25zLmdsb2JhbFZvbHVtZSkge1xuXHRcdFx0XHR0aGlzLnRlbGxPdGhlcnMoXCJtdXRlZFdvcmtlclwiLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHQvLyBDaGVjayB0aGUgb3RoZXIgaW5zdGFuY2UgaGFzIGdsb2JhbCB2b2x1bWUgZW5hYmxlZC5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5vcHRpb25zLmdsb2JhbFZvbHVtZTtcblx0XHRcdFx0fSwgbXV0ZWQpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0bXV0ZWRXb3JrZXI6IGZ1bmN0aW9uKG11dGVkKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMubXV0ZWQgPSBtdXRlZDtcblx0XHRcdGlmKHRoaXMuaHRtbC51c2VkKSB7XG5cdFx0XHRcdHRoaXMuX2h0bWxfc2V0UHJvcGVydHkoJ211dGVkJywgbXV0ZWQpO1xuXHRcdFx0fVxuXHRcdFx0aWYodGhpcy5hdXJvcmEudXNlZCkge1xuXHRcdFx0XHR0aGlzLl9hdXJvcmFfbXV0ZShtdXRlZCk7XG5cdFx0XHR9XG5cdFx0XHRpZih0aGlzLmZsYXNoLnVzZWQpIHtcblx0XHRcdFx0dGhpcy5fZmxhc2hfbXV0ZShtdXRlZCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBIVE1MIHNvbHV0aW9uIGdlbmVyYXRlcyB0aGlzIGV2ZW50IGZyb20gdGhlIG1lZGlhIGVsZW1lbnQgaXRzZWxmLlxuXHRcdFx0aWYoIXRoaXMuaHRtbC52aWRlby5nYXRlICYmICF0aGlzLmh0bWwuYXVkaW8uZ2F0ZSkge1xuXHRcdFx0XHR0aGlzLl91cGRhdGVNdXRlKG11dGVkKTtcblx0XHRcdFx0dGhpcy5fdXBkYXRlVm9sdW1lKHRoaXMub3B0aW9ucy52b2x1bWUpO1xuXHRcdFx0XHR0aGlzLl90cmlnZ2VyKCQualBsYXllci5ldmVudC52b2x1bWVjaGFuZ2UpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0bXV0ZTogZnVuY3Rpb24obXV0ZSkgeyAvLyBtdXRlIGlzIGVpdGhlcjogdW5kZWZpbmVkICh0cnVlKSwgYW4gZXZlbnQgb2JqZWN0ICh0cnVlKSBvciBhIGJvb2xlYW4gKG11dGVkKS5cblx0XHRcdHZhciBndWlBY3Rpb24gPSB0eXBlb2YgbXV0ZSA9PT0gXCJvYmplY3RcIjsgLy8gRmxhZ3MgR1VJIGNsaWNrIGV2ZW50cyBzbyB3ZSBrbm93IHRoaXMgd2FzIG5vdCBhIGRpcmVjdCBjb21tYW5kLCBidXQgYW4gYWN0aW9uIHRha2VuIGJ5IHRoZSB1c2VyIG9uIHRoZSBHVUkuXG5cdFx0XHRpZihndWlBY3Rpb24gJiYgdGhpcy5vcHRpb25zLnVzZVN0YXRlQ2xhc3NTa2luICYmIHRoaXMub3B0aW9ucy5tdXRlZCkge1xuXHRcdFx0XHR0aGlzLl9tdXRlZChmYWxzZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtdXRlID0gbXV0ZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6ICEhbXV0ZTtcblx0XHRcdFx0dGhpcy5fbXV0ZWQobXV0ZSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHR1bm11dGU6IGZ1bmN0aW9uKHVubXV0ZSkgeyAvLyB1bm11dGUgaXMgZWl0aGVyOiB1bmRlZmluZWQgKHRydWUpLCBhbiBldmVudCBvYmplY3QgKHRydWUpIG9yIGEgYm9vbGVhbiAoIW11dGVkKS5cblx0XHRcdHVubXV0ZSA9IHVubXV0ZSA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6ICEhdW5tdXRlO1xuXHRcdFx0dGhpcy5fbXV0ZWQoIXVubXV0ZSk7XG5cdFx0fSxcblx0XHRfdXBkYXRlTXV0ZTogZnVuY3Rpb24obXV0ZSkge1xuXHRcdFx0aWYobXV0ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdG11dGUgPSB0aGlzLm9wdGlvbnMubXV0ZWQ7XG5cdFx0XHR9XG5cdFx0XHRpZihtdXRlKSB7XG5cdFx0XHRcdHRoaXMuYWRkU3RhdGVDbGFzcygnbXV0ZWQnKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMucmVtb3ZlU3RhdGVDbGFzcygnbXV0ZWQnKTtcblx0XHRcdH1cblx0XHRcdGlmKHRoaXMuY3NzLmpxLm11dGUubGVuZ3RoICYmIHRoaXMuY3NzLmpxLnVubXV0ZS5sZW5ndGgpIHtcblx0XHRcdFx0aWYodGhpcy5zdGF0dXMubm9Wb2x1bWUpIHtcblx0XHRcdFx0XHR0aGlzLmNzcy5qcS5tdXRlLmhpZGUoKTtcblx0XHRcdFx0XHR0aGlzLmNzcy5qcS51bm11dGUuaGlkZSgpO1xuXHRcdFx0XHR9IGVsc2UgaWYobXV0ZSkge1xuXHRcdFx0XHRcdHRoaXMuY3NzLmpxLm11dGUuaGlkZSgpO1xuXHRcdFx0XHRcdHRoaXMuY3NzLmpxLnVubXV0ZS5zaG93KCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5jc3MuanEubXV0ZS5zaG93KCk7XG5cdFx0XHRcdFx0dGhpcy5jc3MuanEudW5tdXRlLmhpZGUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0dm9sdW1lOiBmdW5jdGlvbih2KSB7XG5cdFx0XHR0aGlzLnZvbHVtZVdvcmtlcih2KTtcblx0XHRcdGlmKHRoaXMub3B0aW9ucy5nbG9iYWxWb2x1bWUpIHtcblx0XHRcdFx0dGhpcy50ZWxsT3RoZXJzKFwidm9sdW1lV29ya2VyXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdC8vIENoZWNrIHRoZSBvdGhlciBpbnN0YW5jZSBoYXMgZ2xvYmFsIHZvbHVtZSBlbmFibGVkLlxuXHRcdFx0XHRcdHJldHVybiB0aGlzLm9wdGlvbnMuZ2xvYmFsVm9sdW1lO1xuXHRcdFx0XHR9LCB2KTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHZvbHVtZVdvcmtlcjogZnVuY3Rpb24odikge1xuXHRcdFx0diA9IHRoaXMuX2xpbWl0VmFsdWUodiwgMCwgMSk7XG5cdFx0XHR0aGlzLm9wdGlvbnMudm9sdW1lID0gdjtcblxuXHRcdFx0aWYodGhpcy5odG1sLnVzZWQpIHtcblx0XHRcdFx0dGhpcy5faHRtbF9zZXRQcm9wZXJ0eSgndm9sdW1lJywgdik7XG5cdFx0XHR9XG5cdFx0XHRpZih0aGlzLmF1cm9yYS51c2VkKSB7XG5cdFx0XHRcdHRoaXMuX2F1cm9yYV92b2x1bWUodik7XG5cdFx0XHR9XG5cdFx0XHRpZih0aGlzLmZsYXNoLnVzZWQpIHtcblx0XHRcdFx0dGhpcy5fZmxhc2hfdm9sdW1lKHYpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaGUgSFRNTCBzb2x1dGlvbiBnZW5lcmF0ZXMgdGhpcyBldmVudCBmcm9tIHRoZSBtZWRpYSBlbGVtZW50IGl0c2VsZi5cblx0XHRcdGlmKCF0aGlzLmh0bWwudmlkZW8uZ2F0ZSAmJiAhdGhpcy5odG1sLmF1ZGlvLmdhdGUpIHtcblx0XHRcdFx0dGhpcy5fdXBkYXRlVm9sdW1lKHYpO1xuXHRcdFx0XHR0aGlzLl90cmlnZ2VyKCQualBsYXllci5ldmVudC52b2x1bWVjaGFuZ2UpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0dm9sdW1lQmFyOiBmdW5jdGlvbihlKSB7IC8vIEhhbmRsZXMgY2xpY2tzIG9uIHRoZSB2b2x1bWVCYXJcblx0XHRcdGlmKHRoaXMuY3NzLmpxLnZvbHVtZUJhci5sZW5ndGgpIHtcblx0XHRcdFx0Ly8gVXNpbmcgJChlLmN1cnJlbnRUYXJnZXQpIHRvIGVuYWJsZSBtdWx0aXBsZSB2b2x1bWUgYmFyc1xuXHRcdFx0XHR2YXIgJGJhciA9ICQoZS5jdXJyZW50VGFyZ2V0KSxcblx0XHRcdFx0XHRvZmZzZXQgPSAkYmFyLm9mZnNldCgpLFxuXHRcdFx0XHRcdHggPSBlLnBhZ2VYIC0gb2Zmc2V0LmxlZnQsXG5cdFx0XHRcdFx0dyA9ICRiYXIud2lkdGgoKSxcblx0XHRcdFx0XHR5ID0gJGJhci5oZWlnaHQoKSAtIGUucGFnZVkgKyBvZmZzZXQudG9wLFxuXHRcdFx0XHRcdGggPSAkYmFyLmhlaWdodCgpO1xuXHRcdFx0XHRpZih0aGlzLm9wdGlvbnMudmVydGljYWxWb2x1bWUpIHtcblx0XHRcdFx0XHR0aGlzLnZvbHVtZSh5L2gpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRoaXMudm9sdW1lKHgvdyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmKHRoaXMub3B0aW9ucy5tdXRlZCkge1xuXHRcdFx0XHR0aGlzLl9tdXRlZChmYWxzZSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfdXBkYXRlVm9sdW1lOiBmdW5jdGlvbih2KSB7XG5cdFx0XHRpZih2ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0diA9IHRoaXMub3B0aW9ucy52b2x1bWU7XG5cdFx0XHR9XG5cdFx0XHR2ID0gdGhpcy5vcHRpb25zLm11dGVkID8gMCA6IHY7XG5cblx0XHRcdGlmKHRoaXMuc3RhdHVzLm5vVm9sdW1lKSB7XG5cdFx0XHRcdHRoaXMuYWRkU3RhdGVDbGFzcygnbm9Wb2x1bWUnKTtcblx0XHRcdFx0aWYodGhpcy5jc3MuanEudm9sdW1lQmFyLmxlbmd0aCkge1xuXHRcdFx0XHRcdHRoaXMuY3NzLmpxLnZvbHVtZUJhci5oaWRlKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYodGhpcy5jc3MuanEudm9sdW1lQmFyVmFsdWUubGVuZ3RoKSB7XG5cdFx0XHRcdFx0dGhpcy5jc3MuanEudm9sdW1lQmFyVmFsdWUuaGlkZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKHRoaXMuY3NzLmpxLnZvbHVtZU1heC5sZW5ndGgpIHtcblx0XHRcdFx0XHR0aGlzLmNzcy5qcS52b2x1bWVNYXguaGlkZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLnJlbW92ZVN0YXRlQ2xhc3MoJ25vVm9sdW1lJyk7XG5cdFx0XHRcdGlmKHRoaXMuY3NzLmpxLnZvbHVtZUJhci5sZW5ndGgpIHtcblx0XHRcdFx0XHR0aGlzLmNzcy5qcS52b2x1bWVCYXIuc2hvdygpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKHRoaXMuY3NzLmpxLnZvbHVtZUJhclZhbHVlLmxlbmd0aCkge1xuXHRcdFx0XHRcdHRoaXMuY3NzLmpxLnZvbHVtZUJhclZhbHVlLnNob3coKTtcblx0XHRcdFx0XHR0aGlzLmNzcy5qcS52b2x1bWVCYXJWYWx1ZVt0aGlzLm9wdGlvbnMudmVydGljYWxWb2x1bWUgPyBcImhlaWdodFwiIDogXCJ3aWR0aFwiXSgodioxMDApK1wiJVwiKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZih0aGlzLmNzcy5qcS52b2x1bWVNYXgubGVuZ3RoKSB7XG5cdFx0XHRcdFx0dGhpcy5jc3MuanEudm9sdW1lTWF4LnNob3coKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0dm9sdW1lTWF4OiBmdW5jdGlvbigpIHsgLy8gSGFuZGxlcyBjbGlja3Mgb24gdGhlIHZvbHVtZSBtYXhcblx0XHRcdHRoaXMudm9sdW1lKDEpO1xuXHRcdFx0aWYodGhpcy5vcHRpb25zLm11dGVkKSB7XG5cdFx0XHRcdHRoaXMuX211dGVkKGZhbHNlKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdF9jc3NTZWxlY3RvckFuY2VzdG9yOiBmdW5jdGlvbihhbmNlc3Rvcikge1xuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcdFx0dGhpcy5vcHRpb25zLmNzc1NlbGVjdG9yQW5jZXN0b3IgPSBhbmNlc3Rvcjtcblx0XHRcdHRoaXMuX3JlbW92ZVVpQ2xhc3MoKTtcblx0XHRcdHRoaXMuYW5jZXN0b3JKcSA9IGFuY2VzdG9yID8gJChhbmNlc3RvcikgOiBbXTsgLy8gV291bGQgdXNlICQoKSBpbnN0ZWFkIG9mIFtdLCBidXQgaXQgaXMgb25seSAxLjQrXG5cdFx0XHRpZihhbmNlc3RvciAmJiB0aGlzLmFuY2VzdG9ySnEubGVuZ3RoICE9PSAxKSB7IC8vIFNvIGVtcHR5IHN0cmluZ3MgZG8gbm90IGdlbmVyYXRlIHRoZSB3YXJuaW5nLlxuXHRcdFx0XHR0aGlzLl93YXJuaW5nKCB7XG5cdFx0XHRcdFx0dHlwZTogJC5qUGxheWVyLndhcm5pbmcuQ1NTX1NFTEVDVE9SX0NPVU5ULFxuXHRcdFx0XHRcdGNvbnRleHQ6IGFuY2VzdG9yLFxuXHRcdFx0XHRcdG1lc3NhZ2U6ICQualBsYXllci53YXJuaW5nTXNnLkNTU19TRUxFQ1RPUl9DT1VOVCArIHRoaXMuYW5jZXN0b3JKcS5sZW5ndGggKyBcIiBmb3VuZCBmb3IgY3NzU2VsZWN0b3JBbmNlc3Rvci5cIixcblx0XHRcdFx0XHRoaW50OiAkLmpQbGF5ZXIud2FybmluZ0hpbnQuQ1NTX1NFTEVDVE9SX0NPVU5UXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5fYWRkVWlDbGFzcygpO1xuXHRcdFx0JC5lYWNoKHRoaXMub3B0aW9ucy5jc3NTZWxlY3RvciwgZnVuY3Rpb24oZm4sIGNzc1NlbCkge1xuXHRcdFx0XHRzZWxmLl9jc3NTZWxlY3RvcihmbiwgY3NzU2VsKTtcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBTZXQgdGhlIEdVSSB0byB0aGUgY3VycmVudCBzdGF0ZS5cblx0XHRcdHRoaXMuX3VwZGF0ZUludGVyZmFjZSgpO1xuXHRcdFx0dGhpcy5fdXBkYXRlQnV0dG9ucygpO1xuXHRcdFx0dGhpcy5fdXBkYXRlQXV0b2hpZGUoKTtcblx0XHRcdHRoaXMuX3VwZGF0ZVZvbHVtZSgpO1xuXHRcdFx0dGhpcy5fdXBkYXRlTXV0ZSgpO1xuXHRcdH0sXG5cdFx0X2Nzc1NlbGVjdG9yOiBmdW5jdGlvbihmbiwgY3NzU2VsKSB7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0XHRpZih0eXBlb2YgY3NzU2VsID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRpZigkLmpQbGF5ZXIucHJvdG90eXBlLm9wdGlvbnMuY3NzU2VsZWN0b3JbZm5dKSB7XG5cdFx0XHRcdFx0aWYodGhpcy5jc3MuanFbZm5dICYmIHRoaXMuY3NzLmpxW2ZuXS5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdHRoaXMuY3NzLmpxW2ZuXS51bmJpbmQoXCIualBsYXllclwiKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5vcHRpb25zLmNzc1NlbGVjdG9yW2ZuXSA9IGNzc1NlbDtcblx0XHRcdFx0XHR0aGlzLmNzcy5jc1tmbl0gPSB0aGlzLm9wdGlvbnMuY3NzU2VsZWN0b3JBbmNlc3RvciArIFwiIFwiICsgY3NzU2VsO1xuXG5cdFx0XHRcdFx0aWYoY3NzU2VsKSB7IC8vIENoZWNrcyBmb3IgZW1wdHkgc3RyaW5nXG5cdFx0XHRcdFx0XHR0aGlzLmNzcy5qcVtmbl0gPSAkKHRoaXMuY3NzLmNzW2ZuXSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRoaXMuY3NzLmpxW2ZuXSA9IFtdOyAvLyBUbyBjb21wbHkgd2l0aCB0aGUgY3NzLmpxW2ZuXS5sZW5ndGggY2hlY2sgYmVmb3JlIGl0cyB1c2UuIEFzIG9mIGpRdWVyeSAxLjQgY291bGQgaGF2ZSB1c2VkICQoKSBmb3IgYW4gZW1wdHkgc2V0LlxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmKHRoaXMuY3NzLmpxW2ZuXS5sZW5ndGggJiYgdGhpc1tmbl0pIHtcblx0XHRcdFx0XHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdHNlbGZbZm5dKGUpO1xuXHRcdFx0XHRcdFx0XHRpZihzZWxmLm9wdGlvbnMuYXV0b0JsdXIpIHtcblx0XHRcdFx0XHRcdFx0XHQkKHRoaXMpLmJsdXIoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHQkKHRoaXMpLmZvY3VzKCk7IC8vIEZvcmNlIGZvY3VzIGZvciBBUklBLlxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0dGhpcy5jc3MuanFbZm5dLmJpbmQoXCJjbGljay5qUGxheWVyXCIsIGhhbmRsZXIpOyAvLyBVc2luZyBqUGxheWVyIG5hbWVzcGFjZVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmKGNzc1NlbCAmJiB0aGlzLmNzcy5qcVtmbl0ubGVuZ3RoICE9PSAxKSB7IC8vIFNvIGVtcHR5IHN0cmluZ3MgZG8gbm90IGdlbmVyYXRlIHRoZSB3YXJuaW5nLiBpZS4sIHRoZXkganVzdCByZW1vdmUgdGhlIG9sZCBvbmUuXG5cdFx0XHRcdFx0XHR0aGlzLl93YXJuaW5nKCB7XG5cdFx0XHRcdFx0XHRcdHR5cGU6ICQualBsYXllci53YXJuaW5nLkNTU19TRUxFQ1RPUl9DT1VOVCxcblx0XHRcdFx0XHRcdFx0Y29udGV4dDogdGhpcy5jc3MuY3NbZm5dLFxuXHRcdFx0XHRcdFx0XHRtZXNzYWdlOiAkLmpQbGF5ZXIud2FybmluZ01zZy5DU1NfU0VMRUNUT1JfQ09VTlQgKyB0aGlzLmNzcy5qcVtmbl0ubGVuZ3RoICsgXCIgZm91bmQgZm9yIFwiICsgZm4gKyBcIiBtZXRob2QuXCIsXG5cdFx0XHRcdFx0XHRcdGhpbnQ6ICQualBsYXllci53YXJuaW5nSGludC5DU1NfU0VMRUNUT1JfQ09VTlRcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLl93YXJuaW5nKCB7XG5cdFx0XHRcdFx0XHR0eXBlOiAkLmpQbGF5ZXIud2FybmluZy5DU1NfU0VMRUNUT1JfTUVUSE9ELFxuXHRcdFx0XHRcdFx0Y29udGV4dDogZm4sXG5cdFx0XHRcdFx0XHRtZXNzYWdlOiAkLmpQbGF5ZXIud2FybmluZ01zZy5DU1NfU0VMRUNUT1JfTUVUSE9ELFxuXHRcdFx0XHRcdFx0aGludDogJC5qUGxheWVyLndhcm5pbmdIaW50LkNTU19TRUxFQ1RPUl9NRVRIT0Rcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5fd2FybmluZygge1xuXHRcdFx0XHRcdHR5cGU6ICQualBsYXllci53YXJuaW5nLkNTU19TRUxFQ1RPUl9TVFJJTkcsXG5cdFx0XHRcdFx0Y29udGV4dDogY3NzU2VsLFxuXHRcdFx0XHRcdG1lc3NhZ2U6ICQualBsYXllci53YXJuaW5nTXNnLkNTU19TRUxFQ1RPUl9TVFJJTkcsXG5cdFx0XHRcdFx0aGludDogJC5qUGxheWVyLndhcm5pbmdIaW50LkNTU19TRUxFQ1RPUl9TVFJJTkdcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRkdXJhdGlvbjogZnVuY3Rpb24oZSkge1xuXHRcdFx0aWYodGhpcy5vcHRpb25zLnRvZ2dsZUR1cmF0aW9uKSB7XG5cdFx0XHRcdGlmKHRoaXMub3B0aW9ucy5jYXB0dXJlRHVyYXRpb24pIHtcblx0XHRcdFx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuX3NldE9wdGlvbihcInJlbWFpbmluZ0R1cmF0aW9uXCIsICF0aGlzLm9wdGlvbnMucmVtYWluaW5nRHVyYXRpb24pO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2Vla0JhcjogZnVuY3Rpb24oZSkgeyAvLyBIYW5kbGVzIGNsaWNrcyBvbiB0aGUgc2Vla0JhclxuXHRcdFx0aWYodGhpcy5jc3MuanEuc2Vla0Jhci5sZW5ndGgpIHtcblx0XHRcdFx0Ly8gVXNpbmcgJChlLmN1cnJlbnRUYXJnZXQpIHRvIGVuYWJsZSBtdWx0aXBsZSBzZWVrIGJhcnNcblx0XHRcdFx0dmFyICRiYXIgPSAkKGUuY3VycmVudFRhcmdldCksXG5cdFx0XHRcdFx0b2Zmc2V0ID0gJGJhci5vZmZzZXQoKSxcblx0XHRcdFx0XHR4ID0gZS5wYWdlWCAtIG9mZnNldC5sZWZ0LFxuXHRcdFx0XHRcdHcgPSAkYmFyLndpZHRoKCksXG5cdFx0XHRcdFx0cCA9IDEwMCAqIHggLyB3O1xuXHRcdFx0XHR0aGlzLnBsYXlIZWFkKHApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0cGxheWJhY2tSYXRlOiBmdW5jdGlvbihwYnIpIHtcblx0XHRcdHRoaXMuX3NldE9wdGlvbihcInBsYXliYWNrUmF0ZVwiLCBwYnIpO1xuXHRcdH0sXG5cdFx0cGxheWJhY2tSYXRlQmFyOiBmdW5jdGlvbihlKSB7IC8vIEhhbmRsZXMgY2xpY2tzIG9uIHRoZSBwbGF5YmFja1JhdGVCYXJcblx0XHRcdGlmKHRoaXMuY3NzLmpxLnBsYXliYWNrUmF0ZUJhci5sZW5ndGgpIHtcblx0XHRcdFx0Ly8gVXNpbmcgJChlLmN1cnJlbnRUYXJnZXQpIHRvIGVuYWJsZSBtdWx0aXBsZSBwbGF5YmFja1JhdGUgYmFyc1xuXHRcdFx0XHR2YXIgJGJhciA9ICQoZS5jdXJyZW50VGFyZ2V0KSxcblx0XHRcdFx0XHRvZmZzZXQgPSAkYmFyLm9mZnNldCgpLFxuXHRcdFx0XHRcdHggPSBlLnBhZ2VYIC0gb2Zmc2V0LmxlZnQsXG5cdFx0XHRcdFx0dyA9ICRiYXIud2lkdGgoKSxcblx0XHRcdFx0XHR5ID0gJGJhci5oZWlnaHQoKSAtIGUucGFnZVkgKyBvZmZzZXQudG9wLFxuXHRcdFx0XHRcdGggPSAkYmFyLmhlaWdodCgpLFxuXHRcdFx0XHRcdHJhdGlvLCBwYnI7XG5cdFx0XHRcdGlmKHRoaXMub3B0aW9ucy52ZXJ0aWNhbFBsYXliYWNrUmF0ZSkge1xuXHRcdFx0XHRcdHJhdGlvID0geS9oO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJhdGlvID0geC93O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHBiciA9IHJhdGlvICogKHRoaXMub3B0aW9ucy5tYXhQbGF5YmFja1JhdGUgLSB0aGlzLm9wdGlvbnMubWluUGxheWJhY2tSYXRlKSArIHRoaXMub3B0aW9ucy5taW5QbGF5YmFja1JhdGU7XG5cdFx0XHRcdHRoaXMucGxheWJhY2tSYXRlKHBicik7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfdXBkYXRlUGxheWJhY2tSYXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBwYnIgPSB0aGlzLm9wdGlvbnMucGxheWJhY2tSYXRlLFxuXHRcdFx0XHRyYXRpbyA9IChwYnIgLSB0aGlzLm9wdGlvbnMubWluUGxheWJhY2tSYXRlKSAvICh0aGlzLm9wdGlvbnMubWF4UGxheWJhY2tSYXRlIC0gdGhpcy5vcHRpb25zLm1pblBsYXliYWNrUmF0ZSk7XG5cdFx0XHRpZih0aGlzLnN0YXR1cy5wbGF5YmFja1JhdGVFbmFibGVkKSB7XG5cdFx0XHRcdGlmKHRoaXMuY3NzLmpxLnBsYXliYWNrUmF0ZUJhci5sZW5ndGgpIHtcblx0XHRcdFx0XHR0aGlzLmNzcy5qcS5wbGF5YmFja1JhdGVCYXIuc2hvdygpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKHRoaXMuY3NzLmpxLnBsYXliYWNrUmF0ZUJhclZhbHVlLmxlbmd0aCkge1xuXHRcdFx0XHRcdHRoaXMuY3NzLmpxLnBsYXliYWNrUmF0ZUJhclZhbHVlLnNob3coKTtcblx0XHRcdFx0XHR0aGlzLmNzcy5qcS5wbGF5YmFja1JhdGVCYXJWYWx1ZVt0aGlzLm9wdGlvbnMudmVydGljYWxQbGF5YmFja1JhdGUgPyBcImhlaWdodFwiIDogXCJ3aWR0aFwiXSgocmF0aW8qMTAwKStcIiVcIik7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmKHRoaXMuY3NzLmpxLnBsYXliYWNrUmF0ZUJhci5sZW5ndGgpIHtcblx0XHRcdFx0XHR0aGlzLmNzcy5qcS5wbGF5YmFja1JhdGVCYXIuaGlkZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKHRoaXMuY3NzLmpxLnBsYXliYWNrUmF0ZUJhclZhbHVlLmxlbmd0aCkge1xuXHRcdFx0XHRcdHRoaXMuY3NzLmpxLnBsYXliYWNrUmF0ZUJhclZhbHVlLmhpZGUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0cmVwZWF0OiBmdW5jdGlvbihldmVudCkgeyAvLyBIYW5kbGUgY2xpY2tzIG9uIHRoZSByZXBlYXQgYnV0dG9uXG5cdFx0XHR2YXIgZ3VpQWN0aW9uID0gdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiOyAvLyBGbGFncyBHVUkgY2xpY2sgZXZlbnRzIHNvIHdlIGtub3cgdGhpcyB3YXMgbm90IGEgZGlyZWN0IGNvbW1hbmQsIGJ1dCBhbiBhY3Rpb24gdGFrZW4gYnkgdGhlIHVzZXIgb24gdGhlIEdVSS5cblx0XHRcdGlmKGd1aUFjdGlvbiAmJiB0aGlzLm9wdGlvbnMudXNlU3RhdGVDbGFzc1NraW4gJiYgdGhpcy5vcHRpb25zLmxvb3ApIHtcblx0XHRcdFx0dGhpcy5fbG9vcChmYWxzZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLl9sb29wKHRydWUpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0cmVwZWF0T2ZmOiBmdW5jdGlvbigpIHsgLy8gSGFuZGxlIGNsaWNrcyBvbiB0aGUgcmVwZWF0T2ZmIGJ1dHRvblxuXHRcdFx0dGhpcy5fbG9vcChmYWxzZSk7XG5cdFx0fSxcblx0XHRfbG9vcDogZnVuY3Rpb24obG9vcCkge1xuXHRcdFx0aWYodGhpcy5vcHRpb25zLmxvb3AgIT09IGxvb3ApIHtcblx0XHRcdFx0dGhpcy5vcHRpb25zLmxvb3AgPSBsb29wO1xuXHRcdFx0XHR0aGlzLl91cGRhdGVCdXR0b25zKCk7XG5cdFx0XHRcdHRoaXMuX3RyaWdnZXIoJC5qUGxheWVyLmV2ZW50LnJlcGVhdCk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIE9wdGlvbnMgY29kZSBhZGFwdGVkIGZyb20gdWkud2lkZ2V0LmpzICgxLjguNykuICBNYWRlIGNoYW5nZXMgc28gdGhlIGtleSBjYW4gdXNlIGRvdCBub3RhdGlvbi4gVG8gbWF0Y2ggcHJldmlvdXMgZ2V0RGF0YSBzb2x1dGlvbiBpbiBqUGxheWVyIDEuXG5cdFx0b3B0aW9uOiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG5cdFx0XHR2YXIgb3B0aW9ucyA9IGtleTtcblxuXHRcdFx0IC8vIEVuYWJsZXMgdXNlOiBvcHRpb25zKCkuICBSZXR1cm5zIGEgY29weSBvZiBvcHRpb25zIG9iamVjdFxuXHRcdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoID09PSAwICkge1xuXHRcdFx0XHRyZXR1cm4gJC5leHRlbmQoIHRydWUsIHt9LCB0aGlzLm9wdGlvbnMgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYodHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0XHR2YXIga2V5cyA9IGtleS5zcGxpdChcIi5cIik7XG5cblx0XHRcdFx0IC8vIEVuYWJsZXMgdXNlOiBvcHRpb25zKFwic29tZU9wdGlvblwiKSAgUmV0dXJucyBhIGNvcHkgb2YgdGhlIG9wdGlvbi4gU3VwcG9ydHMgZG90IG5vdGF0aW9uLlxuXHRcdFx0XHRpZih2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG5cblx0XHRcdFx0XHR2YXIgb3B0ID0gJC5leHRlbmQodHJ1ZSwge30sIHRoaXMub3B0aW9ucyk7XG5cdFx0XHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRcdGlmKG9wdFtrZXlzW2ldXSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRcdG9wdCA9IG9wdFtrZXlzW2ldXTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuX3dhcm5pbmcoIHtcblx0XHRcdFx0XHRcdFx0XHR0eXBlOiAkLmpQbGF5ZXIud2FybmluZy5PUFRJT05fS0VZLFxuXHRcdFx0XHRcdFx0XHRcdGNvbnRleHQ6IGtleSxcblx0XHRcdFx0XHRcdFx0XHRtZXNzYWdlOiAkLmpQbGF5ZXIud2FybmluZ01zZy5PUFRJT05fS0VZLFxuXHRcdFx0XHRcdFx0XHRcdGhpbnQ6ICQualBsYXllci53YXJuaW5nSGludC5PUFRJT05fS0VZXG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gb3B0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0IC8vIEVuYWJsZXMgdXNlOiBvcHRpb25zKFwic29tZU9wdGlvbk9iamVjdFwiLCBzb21lT2JqZWN0fSkuICBDcmVhdGVzOiB7c29tZU9wdGlvbk9iamVjdDpzb21lT2JqZWN0fVxuXHRcdFx0XHQgLy8gRW5hYmxlcyB1c2U6IG9wdGlvbnMoXCJzb21lT3B0aW9uXCIsIHNvbWVWYWx1ZSkuICBDcmVhdGVzOiB7c29tZU9wdGlvbjpzb21lVmFsdWV9XG5cdFx0XHRcdCAvLyBFbmFibGVzIHVzZTogb3B0aW9ucyhcInNvbWVPcHRpb25PYmplY3Quc29tZU9wdGlvblwiLCBzb21lVmFsdWUpLiAgQ3JlYXRlczoge3NvbWVPcHRpb25PYmplY3Q6e3NvbWVPcHRpb246c29tZVZhbHVlfX1cblxuXHRcdFx0XHRvcHRpb25zID0ge307XG5cdFx0XHRcdHZhciBvcHRzID0gb3B0aW9ucztcblxuXHRcdFx0XHRmb3IodmFyIGogPSAwOyBqIDwga2V5cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRcdGlmKGogPCBrZXlzLmxlbmd0aCAtIDEpIHtcblx0XHRcdFx0XHRcdG9wdHNba2V5c1tqXV0gPSB7fTtcblx0XHRcdFx0XHRcdG9wdHMgPSBvcHRzW2tleXNbal1dO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRvcHRzW2tleXNbal1dID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdCAvLyBPdGhlcndpc2UgZW5hYmxlcyB1c2U6IG9wdGlvbnMob3B0aW9uT2JqZWN0KS4gIFVzZXMgb3JpZ2luYWwgb2JqZWN0ICh0aGUga2V5KVxuXG5cdFx0XHR0aGlzLl9zZXRPcHRpb25zKG9wdGlvbnMpO1xuXG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9LFxuXHRcdF9zZXRPcHRpb25zOiBmdW5jdGlvbihvcHRpb25zKSB7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cdFx0XHQkLmVhY2gob3B0aW9ucywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkgeyAvLyBUaGlzIHN1cHBvcnRzIHRoZSAyIGxldmVsIGRlcHRoIHRoYXQgdGhlIG9wdGlvbnMgb2YgalBsYXllciBoYXMuIFdvdWxkIHJldmlldyBpZiB3ZSBldmVyIG5lZWQgbW9yZSBkZXB0aC5cblx0XHRcdFx0c2VsZi5fc2V0T3B0aW9uKGtleSwgdmFsdWUpO1xuXHRcdFx0fSk7XG5cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH0sXG5cdFx0X3NldE9wdGlvbjogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0XHQvLyBUaGUgYWJpbGl0eSB0byBzZXQgb3B0aW9ucyBpcyBsaW1pdGVkIGF0IHRoaXMgdGltZS5cblxuXHRcdFx0c3dpdGNoKGtleSkge1xuXHRcdFx0XHRjYXNlIFwidm9sdW1lXCIgOlxuXHRcdFx0XHRcdHRoaXMudm9sdW1lKHZhbHVlKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcIm11dGVkXCIgOlxuXHRcdFx0XHRcdHRoaXMuX211dGVkKHZhbHVlKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImdsb2JhbFZvbHVtZVwiIDpcblx0XHRcdFx0XHR0aGlzLm9wdGlvbnNba2V5XSA9IHZhbHVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiY3NzU2VsZWN0b3JBbmNlc3RvclwiIDpcblx0XHRcdFx0XHR0aGlzLl9jc3NTZWxlY3RvckFuY2VzdG9yKHZhbHVlKTsgLy8gU2V0IGFuZCByZWZyZXNoIGFsbCBhc3NvY2lhdGlvbnMgZm9yIHRoZSBuZXcgYW5jZXN0b3IuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJjc3NTZWxlY3RvclwiIDpcblx0XHRcdFx0XHQkLmVhY2godmFsdWUsIGZ1bmN0aW9uKGZuLCBjc3NTZWwpIHtcblx0XHRcdFx0XHRcdHNlbGYuX2Nzc1NlbGVjdG9yKGZuLCBjc3NTZWwpOyAvLyBOQjogVGhlIG9wdGlvbiBpcyBzZXQgaW5zaWRlIHRoaXMgZnVuY3Rpb24sIGFmdGVyIGZ1cnRoZXIgdmFsaWRpdHkgY2hlY2tzLlxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwicGxheWJhY2tSYXRlXCIgOlxuXHRcdFx0XHRcdHRoaXMub3B0aW9uc1trZXldID0gdmFsdWUgPSB0aGlzLl9saW1pdFZhbHVlKHZhbHVlLCB0aGlzLm9wdGlvbnMubWluUGxheWJhY2tSYXRlLCB0aGlzLm9wdGlvbnMubWF4UGxheWJhY2tSYXRlKTtcblx0XHRcdFx0XHRpZih0aGlzLmh0bWwudXNlZCkge1xuXHRcdFx0XHRcdFx0dGhpcy5faHRtbF9zZXRQcm9wZXJ0eSgncGxheWJhY2tSYXRlJywgdmFsdWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0aGlzLl91cGRhdGVQbGF5YmFja1JhdGUoKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImRlZmF1bHRQbGF5YmFja1JhdGVcIiA6XG5cdFx0XHRcdFx0dGhpcy5vcHRpb25zW2tleV0gPSB2YWx1ZSA9IHRoaXMuX2xpbWl0VmFsdWUodmFsdWUsIHRoaXMub3B0aW9ucy5taW5QbGF5YmFja1JhdGUsIHRoaXMub3B0aW9ucy5tYXhQbGF5YmFja1JhdGUpO1xuXHRcdFx0XHRcdGlmKHRoaXMuaHRtbC51c2VkKSB7XG5cdFx0XHRcdFx0XHR0aGlzLl9odG1sX3NldFByb3BlcnR5KCdkZWZhdWx0UGxheWJhY2tSYXRlJywgdmFsdWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0aGlzLl91cGRhdGVQbGF5YmFja1JhdGUoKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcIm1pblBsYXliYWNrUmF0ZVwiIDpcblx0XHRcdFx0XHR0aGlzLm9wdGlvbnNba2V5XSA9IHZhbHVlID0gdGhpcy5fbGltaXRWYWx1ZSh2YWx1ZSwgMC4xLCB0aGlzLm9wdGlvbnMubWF4UGxheWJhY2tSYXRlIC0gMC4xKTtcblx0XHRcdFx0XHR0aGlzLl91cGRhdGVQbGF5YmFja1JhdGUoKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcIm1heFBsYXliYWNrUmF0ZVwiIDpcblx0XHRcdFx0XHR0aGlzLm9wdGlvbnNba2V5XSA9IHZhbHVlID0gdGhpcy5fbGltaXRWYWx1ZSh2YWx1ZSwgdGhpcy5vcHRpb25zLm1pblBsYXliYWNrUmF0ZSArIDAuMSwgMTYpO1xuXHRcdFx0XHRcdHRoaXMuX3VwZGF0ZVBsYXliYWNrUmF0ZSgpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiZnVsbFNjcmVlblwiIDpcblx0XHRcdFx0XHRpZih0aGlzLm9wdGlvbnNba2V5XSAhPT0gdmFsdWUpIHsgLy8gaWYgY2hhbmdlZFxuXHRcdFx0XHRcdFx0dmFyIHdrdiA9ICQualBsYXllci5uYXRpdmVGZWF0dXJlcy5mdWxsc2NyZWVuLnVzZWQud2Via2l0VmlkZW87XG5cdFx0XHRcdFx0XHRpZighd2t2IHx8IHdrdiAmJiAhdGhpcy5zdGF0dXMud2FpdEZvclBsYXkpIHtcblx0XHRcdFx0XHRcdFx0aWYoIXdrdikgeyAvLyBObyBzZW5zaWJsZSB3YXkgdG8gdW5zZXQgb3B0aW9uIG9uIHRoZXNlIGRldmljZXMuXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5vcHRpb25zW2tleV0gPSB2YWx1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZih2YWx1ZSkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuX3JlcXVlc3RGdWxsc2NyZWVuKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5fZXhpdEZ1bGxzY3JlZW4oKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZighd2t2KSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5fc2V0T3B0aW9uKFwiZnVsbFdpbmRvd1wiLCB2YWx1ZSk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJmdWxsV2luZG93XCIgOlxuXHRcdFx0XHRcdGlmKHRoaXMub3B0aW9uc1trZXldICE9PSB2YWx1ZSkgeyAvLyBpZiBjaGFuZ2VkXG5cdFx0XHRcdFx0XHR0aGlzLl9yZW1vdmVVaUNsYXNzKCk7XG5cdFx0XHRcdFx0XHR0aGlzLm9wdGlvbnNba2V5XSA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0dGhpcy5fcmVmcmVzaFNpemUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJzaXplXCIgOlxuXHRcdFx0XHRcdGlmKCF0aGlzLm9wdGlvbnMuZnVsbFdpbmRvdyAmJiB0aGlzLm9wdGlvbnNba2V5XS5jc3NDbGFzcyAhPT0gdmFsdWUuY3NzQ2xhc3MpIHtcblx0XHRcdFx0XHRcdHRoaXMuX3JlbW92ZVVpQ2xhc3MoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5vcHRpb25zW2tleV0gPSAkLmV4dGVuZCh7fSwgdGhpcy5vcHRpb25zW2tleV0sIHZhbHVlKTsgLy8gc3RvcmUgYSBtZXJnZWQgY29weSBvZiBpdCwgaW5jYXNlIG5vdCBhbGwgcHJvcGVydGllcyBjaGFuZ2VkLlxuXHRcdFx0XHRcdHRoaXMuX3JlZnJlc2hTaXplKCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJzaXplRnVsbFwiIDpcblx0XHRcdFx0XHRpZih0aGlzLm9wdGlvbnMuZnVsbFdpbmRvdyAmJiB0aGlzLm9wdGlvbnNba2V5XS5jc3NDbGFzcyAhPT0gdmFsdWUuY3NzQ2xhc3MpIHtcblx0XHRcdFx0XHRcdHRoaXMuX3JlbW92ZVVpQ2xhc3MoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5vcHRpb25zW2tleV0gPSAkLmV4dGVuZCh7fSwgdGhpcy5vcHRpb25zW2tleV0sIHZhbHVlKTsgLy8gc3RvcmUgYSBtZXJnZWQgY29weSBvZiBpdCwgaW5jYXNlIG5vdCBhbGwgcHJvcGVydGllcyBjaGFuZ2VkLlxuXHRcdFx0XHRcdHRoaXMuX3JlZnJlc2hTaXplKCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJhdXRvaGlkZVwiIDpcblx0XHRcdFx0XHR0aGlzLm9wdGlvbnNba2V5XSA9ICQuZXh0ZW5kKHt9LCB0aGlzLm9wdGlvbnNba2V5XSwgdmFsdWUpOyAvLyBzdG9yZSBhIG1lcmdlZCBjb3B5IG9mIGl0LCBpbmNhc2Ugbm90IGFsbCBwcm9wZXJ0aWVzIGNoYW5nZWQuXG5cdFx0XHRcdFx0dGhpcy5fdXBkYXRlQXV0b2hpZGUoKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImxvb3BcIiA6XG5cdFx0XHRcdFx0dGhpcy5fbG9vcCh2YWx1ZSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJyZW1haW5pbmdEdXJhdGlvblwiIDpcblx0XHRcdFx0XHR0aGlzLm9wdGlvbnNba2V5XSA9IHZhbHVlO1xuXHRcdFx0XHRcdHRoaXMuX3VwZGF0ZUludGVyZmFjZSgpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwidG9nZ2xlRHVyYXRpb25cIiA6XG5cdFx0XHRcdFx0dGhpcy5vcHRpb25zW2tleV0gPSB2YWx1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcIm5hdGl2ZVZpZGVvQ29udHJvbHNcIiA6XG5cdFx0XHRcdFx0dGhpcy5vcHRpb25zW2tleV0gPSAkLmV4dGVuZCh7fSwgdGhpcy5vcHRpb25zW2tleV0sIHZhbHVlKTsgLy8gc3RvcmUgYSBtZXJnZWQgY29weSBvZiBpdCwgaW5jYXNlIG5vdCBhbGwgcHJvcGVydGllcyBjaGFuZ2VkLlxuXHRcdFx0XHRcdHRoaXMuc3RhdHVzLm5hdGl2ZVZpZGVvQ29udHJvbHMgPSB0aGlzLl91YUJsb2NrbGlzdCh0aGlzLm9wdGlvbnMubmF0aXZlVmlkZW9Db250cm9scyk7XG5cdFx0XHRcdFx0dGhpcy5fcmVzdHJpY3ROYXRpdmVWaWRlb0NvbnRyb2xzKCk7XG5cdFx0XHRcdFx0dGhpcy5fdXBkYXRlTmF0aXZlVmlkZW9Db250cm9scygpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwibm9GdWxsV2luZG93XCIgOlxuXHRcdFx0XHRcdHRoaXMub3B0aW9uc1trZXldID0gJC5leHRlbmQoe30sIHRoaXMub3B0aW9uc1trZXldLCB2YWx1ZSk7IC8vIHN0b3JlIGEgbWVyZ2VkIGNvcHkgb2YgaXQsIGluY2FzZSBub3QgYWxsIHByb3BlcnRpZXMgY2hhbmdlZC5cblx0XHRcdFx0XHR0aGlzLnN0YXR1cy5uYXRpdmVWaWRlb0NvbnRyb2xzID0gdGhpcy5fdWFCbG9ja2xpc3QodGhpcy5vcHRpb25zLm5hdGl2ZVZpZGVvQ29udHJvbHMpOyAvLyBOZWVkIHRvIGNoZWNrIGFnYWluIGFzIG5vRnVsbFdpbmRvdyBjYW4gZGVwZW5kIG9uIHRoaXMgZmxhZyBhbmQgdGhlIHJlc3RyaWN0KCkgY2FuIG92ZXJyaWRlIGl0LlxuXHRcdFx0XHRcdHRoaXMuc3RhdHVzLm5vRnVsbFdpbmRvdyA9IHRoaXMuX3VhQmxvY2tsaXN0KHRoaXMub3B0aW9ucy5ub0Z1bGxXaW5kb3cpO1xuXHRcdFx0XHRcdHRoaXMuX3Jlc3RyaWN0TmF0aXZlVmlkZW9Db250cm9scygpO1xuXHRcdFx0XHRcdHRoaXMuX3VwZGF0ZUJ1dHRvbnMoKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcIm5vVm9sdW1lXCIgOlxuXHRcdFx0XHRcdHRoaXMub3B0aW9uc1trZXldID0gJC5leHRlbmQoe30sIHRoaXMub3B0aW9uc1trZXldLCB2YWx1ZSk7IC8vIHN0b3JlIGEgbWVyZ2VkIGNvcHkgb2YgaXQsIGluY2FzZSBub3QgYWxsIHByb3BlcnRpZXMgY2hhbmdlZC5cblx0XHRcdFx0XHR0aGlzLnN0YXR1cy5ub1ZvbHVtZSA9IHRoaXMuX3VhQmxvY2tsaXN0KHRoaXMub3B0aW9ucy5ub1ZvbHVtZSk7XG5cdFx0XHRcdFx0dGhpcy5fdXBkYXRlVm9sdW1lKCk7XG5cdFx0XHRcdFx0dGhpcy5fdXBkYXRlTXV0ZSgpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiZW11bGF0ZUh0bWxcIiA6XG5cdFx0XHRcdFx0aWYodGhpcy5vcHRpb25zW2tleV0gIT09IHZhbHVlKSB7IC8vIFRvIGF2b2lkIG11bHRpcGxlIGV2ZW50IGhhbmRsZXJzIGJlaW5nIGNyZWF0ZWQsIGlmIHRydWUgYWxyZWFkeS5cblx0XHRcdFx0XHRcdHRoaXMub3B0aW9uc1trZXldID0gdmFsdWU7XG5cdFx0XHRcdFx0XHRpZih2YWx1ZSkge1xuXHRcdFx0XHRcdFx0XHR0aGlzLl9lbXVsYXRlSHRtbEJyaWRnZSgpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5fZGVzdHJveUh0bWxCcmlkZ2UoKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJ0aW1lRm9ybWF0XCIgOlxuXHRcdFx0XHRcdHRoaXMub3B0aW9uc1trZXldID0gJC5leHRlbmQoe30sIHRoaXMub3B0aW9uc1trZXldLCB2YWx1ZSk7IC8vIHN0b3JlIGEgbWVyZ2VkIGNvcHkgb2YgaXQsIGluY2FzZSBub3QgYWxsIHByb3BlcnRpZXMgY2hhbmdlZC5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImtleUVuYWJsZWRcIiA6XG5cdFx0XHRcdFx0dGhpcy5vcHRpb25zW2tleV0gPSB2YWx1ZTtcblx0XHRcdFx0XHRpZighdmFsdWUgJiYgdGhpcyA9PT0gJC5qUGxheWVyLmZvY3VzKSB7XG5cdFx0XHRcdFx0XHQkLmpQbGF5ZXIuZm9jdXMgPSBudWxsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImtleUJpbmRpbmdzXCIgOlxuXHRcdFx0XHRcdHRoaXMub3B0aW9uc1trZXldID0gJC5leHRlbmQodHJ1ZSwge30sIHRoaXMub3B0aW9uc1trZXldLCB2YWx1ZSk7IC8vIHN0b3JlIGEgbWVyZ2VkIERFRVAgY29weSBvZiBpdCwgaW5jYXNlIG5vdCBhbGwgcHJvcGVydGllcyBjaGFuZ2VkLlxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiYXVkaW9GdWxsU2NyZWVuXCIgOlxuXHRcdFx0XHRcdHRoaXMub3B0aW9uc1trZXldID0gdmFsdWU7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJhdXRvQmx1clwiIDpcblx0XHRcdFx0XHR0aGlzLm9wdGlvbnNba2V5XSA9IHZhbHVlO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9LFxuXHRcdC8vIEVuZCBvZjogKE9wdGlvbnMgY29kZSBhZGFwdGVkIGZyb20gdWkud2lkZ2V0LmpzKVxuXG5cdFx0X3JlZnJlc2hTaXplOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuX3NldFNpemUoKTsgLy8gdXBkYXRlIHN0YXR1cyBhbmQgalBsYXllciBlbGVtZW50IHNpemVcblx0XHRcdHRoaXMuX2FkZFVpQ2xhc3MoKTsgLy8gdXBkYXRlIHRoZSB1aSBjbGFzc1xuXHRcdFx0dGhpcy5fdXBkYXRlU2l6ZSgpOyAvLyB1cGRhdGUgaW50ZXJuYWwgc2l6ZXNcblx0XHRcdHRoaXMuX3VwZGF0ZUJ1dHRvbnMoKTtcblx0XHRcdHRoaXMuX3VwZGF0ZUF1dG9oaWRlKCk7XG5cdFx0XHR0aGlzLl90cmlnZ2VyKCQualBsYXllci5ldmVudC5yZXNpemUpO1xuXHRcdH0sXG5cdFx0X3NldFNpemU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gRGV0ZXJtaW5lIHRoZSBjdXJyZW50IHNpemUgZnJvbSB0aGUgb3B0aW9uc1xuXHRcdFx0aWYodGhpcy5vcHRpb25zLmZ1bGxXaW5kb3cpIHtcblx0XHRcdFx0dGhpcy5zdGF0dXMud2lkdGggPSB0aGlzLm9wdGlvbnMuc2l6ZUZ1bGwud2lkdGg7XG5cdFx0XHRcdHRoaXMuc3RhdHVzLmhlaWdodCA9IHRoaXMub3B0aW9ucy5zaXplRnVsbC5oZWlnaHQ7XG5cdFx0XHRcdHRoaXMuc3RhdHVzLmNzc0NsYXNzID0gdGhpcy5vcHRpb25zLnNpemVGdWxsLmNzc0NsYXNzO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5zdGF0dXMud2lkdGggPSB0aGlzLm9wdGlvbnMuc2l6ZS53aWR0aDtcblx0XHRcdFx0dGhpcy5zdGF0dXMuaGVpZ2h0ID0gdGhpcy5vcHRpb25zLnNpemUuaGVpZ2h0O1xuXHRcdFx0XHR0aGlzLnN0YXR1cy5jc3NDbGFzcyA9IHRoaXMub3B0aW9ucy5zaXplLmNzc0NsYXNzO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIHNpemUgb2YgdGhlIGpQbGF5ZXIgYXJlYS5cblx0XHRcdHRoaXMuZWxlbWVudC5jc3Moeyd3aWR0aCc6IHRoaXMuc3RhdHVzLndpZHRoLCAnaGVpZ2h0JzogdGhpcy5zdGF0dXMuaGVpZ2h0fSk7XG5cdFx0fSxcblx0XHRfYWRkVWlDbGFzczogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZih0aGlzLmFuY2VzdG9ySnEubGVuZ3RoKSB7XG5cdFx0XHRcdHRoaXMuYW5jZXN0b3JKcS5hZGRDbGFzcyh0aGlzLnN0YXR1cy5jc3NDbGFzcyk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfcmVtb3ZlVWlDbGFzczogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZih0aGlzLmFuY2VzdG9ySnEubGVuZ3RoKSB7XG5cdFx0XHRcdHRoaXMuYW5jZXN0b3JKcS5yZW1vdmVDbGFzcyh0aGlzLnN0YXR1cy5jc3NDbGFzcyk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfdXBkYXRlU2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBUaGUgcG9zdGVyIHVzZXMgc2hvdy9oaWRlIHNvIGNhbiBzaW1wbHkgcmVzaXplIGl0LlxuXHRcdFx0dGhpcy5pbnRlcm5hbC5wb3N0ZXIuanEuY3NzKHsnd2lkdGgnOiB0aGlzLnN0YXR1cy53aWR0aCwgJ2hlaWdodCc6IHRoaXMuc3RhdHVzLmhlaWdodH0pO1xuXG5cdFx0XHQvLyBWaWRlbyBodG1sIG9yIGZsYXNoIHJlc2l6ZWQgaWYgbmVjZXNzYXJ5IGF0IHRoaXMgdGltZSwgb3IgaWYgbmF0aXZlIHZpZGVvIGNvbnRyb2xzIGJlaW5nIHVzZWQuXG5cdFx0XHRpZighdGhpcy5zdGF0dXMud2FpdEZvclBsYXkgJiYgdGhpcy5odG1sLmFjdGl2ZSAmJiB0aGlzLnN0YXR1cy52aWRlbyB8fCB0aGlzLmh0bWwudmlkZW8uYXZhaWxhYmxlICYmIHRoaXMuaHRtbC51c2VkICYmIHRoaXMuc3RhdHVzLm5hdGl2ZVZpZGVvQ29udHJvbHMpIHtcblx0XHRcdFx0dGhpcy5pbnRlcm5hbC52aWRlby5qcS5jc3Moeyd3aWR0aCc6IHRoaXMuc3RhdHVzLndpZHRoLCAnaGVpZ2h0JzogdGhpcy5zdGF0dXMuaGVpZ2h0fSk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmKCF0aGlzLnN0YXR1cy53YWl0Rm9yUGxheSAmJiB0aGlzLmZsYXNoLmFjdGl2ZSAmJiB0aGlzLnN0YXR1cy52aWRlbykge1xuXHRcdFx0XHR0aGlzLmludGVybmFsLmZsYXNoLmpxLmNzcyh7J3dpZHRoJzogdGhpcy5zdGF0dXMud2lkdGgsICdoZWlnaHQnOiB0aGlzLnN0YXR1cy5oZWlnaHR9KTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdF91cGRhdGVBdXRvaGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXJcdHNlbGYgPSB0aGlzLFxuXHRcdFx0XHRldmVudCA9IFwibW91c2Vtb3ZlLmpQbGF5ZXJcIixcblx0XHRcdFx0bmFtZXNwYWNlID0gXCIualBsYXllckF1dG9oaWRlXCIsXG5cdFx0XHRcdGV2ZW50VHlwZSA9IGV2ZW50ICsgbmFtZXNwYWNlLFxuXHRcdFx0XHRoYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0XHRcdFx0XHR2YXIgbW92ZWQgPSBmYWxzZSxcblx0XHRcdFx0XHRcdGRlbHRhWCwgZGVsdGFZO1xuXHRcdFx0XHRcdGlmKHR5cGVvZiBzZWxmLmludGVybmFsLm1vdXNlICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHRcdFx0XHQvL2dldCB0aGUgY2hhbmdlIGZyb20gbGFzdCBwb3NpdGlvbiB0byB0aGlzIHBvc2l0aW9uXG5cdFx0XHRcdFx0XHRkZWx0YVggPSBzZWxmLmludGVybmFsLm1vdXNlLnggLSBldmVudC5wYWdlWDtcblx0XHRcdFx0XHRcdGRlbHRhWSA9IHNlbGYuaW50ZXJuYWwubW91c2UueSAtIGV2ZW50LnBhZ2VZO1xuXHRcdFx0XHRcdFx0bW92ZWQgPSAoTWF0aC5mbG9vcihkZWx0YVgpID4gMCkgfHwgKE1hdGguZmxvb3IoZGVsdGFZKT4wKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0bW92ZWQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHQvLyBzdG9yZSBjdXJyZW50IHBvc2l0aW9uIGZvciBuZXh0IG1ldGhvZCBleGVjdXRpb25cblx0XHRcdFx0XHRzZWxmLmludGVybmFsLm1vdXNlID0ge1xuXHRcdFx0XHRcdFx0XHR4IDogZXZlbnQucGFnZVgsXG5cdFx0XHRcdFx0XHRcdHkgOiBldmVudC5wYWdlWVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0Ly8gaWYgbW91c2UgaGFzIGJlZW4gYWN0dWFsbHkgbW92ZWQsIGRvIHRoZSBndWkgZmFkZUluL2ZhZGVPdXRcblx0XHRcdFx0XHRpZiAobW92ZWQpIHtcblx0XHRcdFx0XHRcdHNlbGYuY3NzLmpxLmd1aS5mYWRlSW4oc2VsZi5vcHRpb25zLmF1dG9oaWRlLmZhZGVJbiwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdGNsZWFyVGltZW91dChzZWxmLmludGVybmFsLmF1dG9oaWRlSWQpO1xuXHRcdFx0XHRcdFx0XHRzZWxmLmludGVybmFsLmF1dG9oaWRlSWQgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRzZWxmLmNzcy5qcS5ndWkuZmFkZU91dChzZWxmLm9wdGlvbnMuYXV0b2hpZGUuZmFkZU91dCk7XG5cdFx0XHRcdFx0XHRcdH0sIHNlbGYub3B0aW9ucy5hdXRvaGlkZS5ob2xkKTtcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblxuXHRcdFx0aWYodGhpcy5jc3MuanEuZ3VpLmxlbmd0aCkge1xuXG5cdFx0XHRcdC8vIEVuZCBhbmltYXRpb25zIGZpcnN0IHNvIHRoYXQgaXRzIGNhbGxiYWNrIGlzIGV4ZWN1dGVkIG5vdy5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFuIGluIHByb2dyZXNzIGZhZGVJbiBhbmltYXRpb24gc3RpbGwgaGFzIHRoZSBjYWxsYmFjayB0byBmYWRlT3V0IGFnYWluLlxuXHRcdFx0XHR0aGlzLmNzcy5qcS5ndWkuc3RvcCh0cnVlLCB0cnVlKTtcblxuXHRcdFx0XHQvLyBSZW1vdmVzIHRoZSBmYWRlT3V0IG9wZXJhdGlvbiBmcm9tIHRoZSBmYWRlSW4gY2FsbGJhY2suXG5cdFx0XHRcdGNsZWFyVGltZW91dCh0aGlzLmludGVybmFsLmF1dG9oaWRlSWQpO1xuXHRcdFx0XHQvLyB1bmRlZmluZSBtb3VzZVxuXHRcdFx0XHRkZWxldGUgdGhpcy5pbnRlcm5hbC5tb3VzZTtcblxuXHRcdFx0XHR0aGlzLmVsZW1lbnQudW5iaW5kKG5hbWVzcGFjZSk7XG5cdFx0XHRcdHRoaXMuY3NzLmpxLmd1aS51bmJpbmQobmFtZXNwYWNlKTtcblxuXHRcdFx0XHRpZighdGhpcy5zdGF0dXMubmF0aXZlVmlkZW9Db250cm9scykge1xuXHRcdFx0XHRcdGlmKHRoaXMub3B0aW9ucy5mdWxsV2luZG93ICYmIHRoaXMub3B0aW9ucy5hdXRvaGlkZS5mdWxsIHx8ICF0aGlzLm9wdGlvbnMuZnVsbFdpbmRvdyAmJiB0aGlzLm9wdGlvbnMuYXV0b2hpZGUucmVzdG9yZWQpIHtcblx0XHRcdFx0XHRcdHRoaXMuZWxlbWVudC5iaW5kKGV2ZW50VHlwZSwgaGFuZGxlcik7XG5cdFx0XHRcdFx0XHR0aGlzLmNzcy5qcS5ndWkuYmluZChldmVudFR5cGUsIGhhbmRsZXIpO1xuXHRcdFx0XHRcdFx0dGhpcy5jc3MuanEuZ3VpLmhpZGUoKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dGhpcy5jc3MuanEuZ3VpLnNob3coKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5jc3MuanEuZ3VpLmhpZGUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZnVsbFNjcmVlbjogZnVuY3Rpb24oZXZlbnQpIHtcblx0XHRcdHZhciBndWlBY3Rpb24gPSB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCI7IC8vIEZsYWdzIEdVSSBjbGljayBldmVudHMgc28gd2Uga25vdyB0aGlzIHdhcyBub3QgYSBkaXJlY3QgY29tbWFuZCwgYnV0IGFuIGFjdGlvbiB0YWtlbiBieSB0aGUgdXNlciBvbiB0aGUgR1VJLlxuXHRcdFx0aWYoZ3VpQWN0aW9uICYmIHRoaXMub3B0aW9ucy51c2VTdGF0ZUNsYXNzU2tpbiAmJiB0aGlzLm9wdGlvbnMuZnVsbFNjcmVlbikge1xuXHRcdFx0XHR0aGlzLl9zZXRPcHRpb24oXCJmdWxsU2NyZWVuXCIsIGZhbHNlKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuX3NldE9wdGlvbihcImZ1bGxTY3JlZW5cIiwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRyZXN0b3JlU2NyZWVuOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuX3NldE9wdGlvbihcImZ1bGxTY3JlZW5cIiwgZmFsc2UpO1xuXHRcdH0sXG5cdFx0X2Z1bGxzY3JlZW5BZGRFdmVudExpc3RlbmVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0XHRcdGZzID0gJC5qUGxheWVyLm5hdGl2ZUZlYXR1cmVzLmZ1bGxzY3JlZW47XG5cblx0XHRcdGlmKGZzLmFwaS5mdWxsc2NyZWVuRW5hYmxlZCkge1xuXHRcdFx0XHRpZihmcy5ldmVudC5mdWxsc2NyZWVuY2hhbmdlKSB7XG5cdFx0XHRcdFx0Ly8gQ3JlYXRlIHRoZSBldmVudCBoYW5kbGVyIGZ1bmN0aW9uIGFuZCBzdG9yZSBpdCBmb3IgcmVtb3ZhbC5cblx0XHRcdFx0XHRpZih0eXBlb2YgdGhpcy5pbnRlcm5hbC5mdWxsc2NyZWVuY2hhbmdlSGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRcdFx0dGhpcy5pbnRlcm5hbC5mdWxsc2NyZWVuY2hhbmdlSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRzZWxmLl9mdWxsc2NyZWVuY2hhbmdlKCk7XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKGZzLmV2ZW50LmZ1bGxzY3JlZW5jaGFuZ2UsIHRoaXMuaW50ZXJuYWwuZnVsbHNjcmVlbmNoYW5nZUhhbmRsZXIsIGZhbHNlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBObyBwb2ludCBjcmVhdGluZyBoYW5kbGVyIGZvciBmdWxsc2NyZWVuZXJyb3IuXG5cdFx0XHRcdC8vIEVpdGhlciBsb2dpYyBhdm9pZHMgZnVsbHNjcmVlbiBvY2N1cnJpbmcgKHczYy9tb3opLCBvciB0aGVpciBpcyBubyBldmVudCBvbiB0aGUgYnJvd3NlciAod2Via2l0KS5cblx0XHRcdH1cblx0XHR9LFxuXHRcdF9mdWxsc2NyZWVuUmVtb3ZlRXZlbnRMaXN0ZW5lcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGZzID0gJC5qUGxheWVyLm5hdGl2ZUZlYXR1cmVzLmZ1bGxzY3JlZW47XG5cdFx0XHRpZih0aGlzLmludGVybmFsLmZ1bGxzY3JlZW5jaGFuZ2VIYW5kbGVyKSB7XG5cdFx0XHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZnMuZXZlbnQuZnVsbHNjcmVlbmNoYW5nZSwgdGhpcy5pbnRlcm5hbC5mdWxsc2NyZWVuY2hhbmdlSGFuZGxlciwgZmFsc2UpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0X2Z1bGxzY3JlZW5jaGFuZ2U6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gSWYgbm90aGluZyBpcyBmdWxsc2NyZWVuLCB0aGVuIHdlIGNhbm5vdCBiZSBpbiBmdWxsc2NyZWVuIG1vZGUuXG5cdFx0XHRpZih0aGlzLm9wdGlvbnMuZnVsbFNjcmVlbiAmJiAhJC5qUGxheWVyLm5hdGl2ZUZlYXR1cmVzLmZ1bGxzY3JlZW4uYXBpLmZ1bGxzY3JlZW5FbGVtZW50KCkpIHtcblx0XHRcdFx0dGhpcy5fc2V0T3B0aW9uKFwiZnVsbFNjcmVlblwiLCBmYWxzZSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfcmVxdWVzdEZ1bGxzY3JlZW46IGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gRWl0aGVyIHRoZSBjb250YWluZXIgb3IgdGhlIGpQbGF5ZXIgZGl2XG5cdFx0XHR2YXIgZSA9IHRoaXMuYW5jZXN0b3JKcS5sZW5ndGggPyB0aGlzLmFuY2VzdG9ySnFbMF0gOiB0aGlzLmVsZW1lbnRbMF0sXG5cdFx0XHRcdGZzID0gJC5qUGxheWVyLm5hdGl2ZUZlYXR1cmVzLmZ1bGxzY3JlZW47XG5cblx0XHRcdC8vIFRoaXMgbWV0aG9kIG5lZWRzIHRoZSB2aWRlbyBlbGVtZW50LiBGb3IgaU9TIGFuZCBBbmRyb2lkLlxuXHRcdFx0aWYoZnMudXNlZC53ZWJraXRWaWRlbykge1xuXHRcdFx0XHRlID0gdGhpcy5odG1sRWxlbWVudC52aWRlbztcblx0XHRcdH1cblxuXHRcdFx0aWYoZnMuYXBpLmZ1bGxzY3JlZW5FbmFibGVkKSB7XG5cdFx0XHRcdGZzLmFwaS5yZXF1ZXN0RnVsbHNjcmVlbihlKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdF9leGl0RnVsbHNjcmVlbjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdHZhciBmcyA9ICQualBsYXllci5uYXRpdmVGZWF0dXJlcy5mdWxsc2NyZWVuLFxuXHRcdFx0XHRlO1xuXG5cdFx0XHQvLyBUaGlzIG1ldGhvZCBuZWVkcyB0aGUgdmlkZW8gZWxlbWVudC4gRm9yIGlPUyBhbmQgQW5kcm9pZC5cblx0XHRcdGlmKGZzLnVzZWQud2Via2l0VmlkZW8pIHtcblx0XHRcdFx0ZSA9IHRoaXMuaHRtbEVsZW1lbnQudmlkZW87XG5cdFx0XHR9XG5cblx0XHRcdGlmKGZzLmFwaS5mdWxsc2NyZWVuRW5hYmxlZCkge1xuXHRcdFx0XHRmcy5hcGkuZXhpdEZ1bGxzY3JlZW4oZSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfaHRtbF9pbml0TWVkaWE6IGZ1bmN0aW9uKG1lZGlhKSB7XG5cdFx0XHQvLyBSZW1vdmUgYW55IGV4aXN0aW5nIHRyYWNrIGVsZW1lbnRzXG5cdFx0XHR2YXIgJG1lZGlhID0gJCh0aGlzLmh0bWxFbGVtZW50Lm1lZGlhKS5lbXB0eSgpO1xuXG5cdFx0XHQvLyBDcmVhdGUgYW55IHRyYWNrIGVsZW1lbnRzIGdpdmVuIHdpdGggdGhlIG1lZGlhLCBhcyBhbiBBcnJheSBvZiB0cmFjayBPYmplY3RzLlxuXHRcdFx0JC5lYWNoKG1lZGlhLnRyYWNrIHx8IFtdLCBmdW5jdGlvbihpLHYpIHtcblx0XHRcdFx0dmFyIHRyYWNrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHJhY2snKTtcblx0XHRcdFx0dHJhY2suc2V0QXR0cmlidXRlKFwia2luZFwiLCB2LmtpbmQgPyB2LmtpbmQgOiBcIlwiKTtcblx0XHRcdFx0dHJhY2suc2V0QXR0cmlidXRlKFwic3JjXCIsIHYuc3JjID8gdi5zcmMgOiBcIlwiKTtcblx0XHRcdFx0dHJhY2suc2V0QXR0cmlidXRlKFwic3JjbGFuZ1wiLCB2LnNyY2xhbmcgPyB2LnNyY2xhbmcgOiBcIlwiKTtcblx0XHRcdFx0dHJhY2suc2V0QXR0cmlidXRlKFwibGFiZWxcIiwgdi5sYWJlbCA/IHYubGFiZWwgOiBcIlwiKTtcblx0XHRcdFx0aWYodi5kZWYpIHtcblx0XHRcdFx0XHR0cmFjay5zZXRBdHRyaWJ1dGUoXCJkZWZhdWx0XCIsIHYuZGVmKTtcblx0XHRcdFx0fVxuXHRcdFx0XHQkbWVkaWEuYXBwZW5kKHRyYWNrKTtcblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLmh0bWxFbGVtZW50Lm1lZGlhLnNyYyA9IHRoaXMuc3RhdHVzLnNyYztcblxuXHRcdFx0aWYodGhpcy5vcHRpb25zLnByZWxvYWQgIT09ICdub25lJykge1xuXHRcdFx0XHR0aGlzLl9odG1sX2xvYWQoKTsgLy8gU2VlIGZ1bmN0aW9uIGZvciBjb21tZW50c1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5fdHJpZ2dlcigkLmpQbGF5ZXIuZXZlbnQudGltZXVwZGF0ZSk7IC8vIFRoZSBmbGFzaCBnZW5lcmF0ZXMgdGhpcyBldmVudCBmb3IgaXRzIHNvbHV0aW9uLlxuXHRcdH0sXG5cdFx0X2h0bWxfc2V0Rm9ybWF0OiBmdW5jdGlvbihtZWRpYSkge1xuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXHRcdFx0Ly8gQWx3YXlzIGZpbmRzIGEgZm9ybWF0IGR1ZSB0byBjaGVja3MgaW4gc2V0TWVkaWEoKVxuXHRcdFx0JC5lYWNoKHRoaXMuZm9ybWF0cywgZnVuY3Rpb24ocHJpb3JpdHksIGZvcm1hdCkge1xuXHRcdFx0XHRpZihzZWxmLmh0bWwuc3VwcG9ydFtmb3JtYXRdICYmIG1lZGlhW2Zvcm1hdF0pIHtcblx0XHRcdFx0XHRzZWxmLnN0YXR1cy5zcmMgPSBtZWRpYVtmb3JtYXRdO1xuXHRcdFx0XHRcdHNlbGYuc3RhdHVzLmZvcm1hdFtmb3JtYXRdID0gdHJ1ZTtcblx0XHRcdFx0XHRzZWxmLnN0YXR1cy5mb3JtYXRUeXBlID0gZm9ybWF0O1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSxcblx0XHRfaHRtbF9zZXRBdWRpbzogZnVuY3Rpb24obWVkaWEpIHtcblx0XHRcdHRoaXMuX2h0bWxfc2V0Rm9ybWF0KG1lZGlhKTtcblx0XHRcdHRoaXMuaHRtbEVsZW1lbnQubWVkaWEgPSB0aGlzLmh0bWxFbGVtZW50LmF1ZGlvO1xuXHRcdFx0dGhpcy5faHRtbF9pbml0TWVkaWEobWVkaWEpO1xuXHRcdH0sXG5cdFx0X2h0bWxfc2V0VmlkZW86IGZ1bmN0aW9uKG1lZGlhKSB7XG5cdFx0XHR0aGlzLl9odG1sX3NldEZvcm1hdChtZWRpYSk7XG5cdFx0XHRpZih0aGlzLnN0YXR1cy5uYXRpdmVWaWRlb0NvbnRyb2xzKSB7XG5cdFx0XHRcdHRoaXMuaHRtbEVsZW1lbnQudmlkZW8ucG9zdGVyID0gdGhpcy5fdmFsaWRTdHJpbmcobWVkaWEucG9zdGVyKSA/IG1lZGlhLnBvc3RlciA6IFwiXCI7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLmh0bWxFbGVtZW50Lm1lZGlhID0gdGhpcy5odG1sRWxlbWVudC52aWRlbztcblx0XHRcdHRoaXMuX2h0bWxfaW5pdE1lZGlhKG1lZGlhKTtcblx0XHR9LFxuXHRcdF9odG1sX3Jlc2V0TWVkaWE6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYodGhpcy5odG1sRWxlbWVudC5tZWRpYSkge1xuXHRcdFx0XHRpZih0aGlzLmh0bWxFbGVtZW50Lm1lZGlhLmlkID09PSB0aGlzLmludGVybmFsLnZpZGVvLmlkICYmICF0aGlzLnN0YXR1cy5uYXRpdmVWaWRlb0NvbnRyb2xzKSB7XG5cdFx0XHRcdFx0dGhpcy5pbnRlcm5hbC52aWRlby5qcS5jc3Moeyd3aWR0aCc6JzBweCcsICdoZWlnaHQnOicwcHgnfSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5odG1sRWxlbWVudC5tZWRpYS5wYXVzZSgpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0X2h0bWxfY2xlYXJNZWRpYTogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZih0aGlzLmh0bWxFbGVtZW50Lm1lZGlhKSB7XG5cdFx0XHRcdHRoaXMuaHRtbEVsZW1lbnQubWVkaWEuc3JjID0gXCJhYm91dDpibGFua1wiO1xuXHRcdFx0XHQvLyBUaGUgZm9sbG93aW5nIGxvYWQoKSBpcyBvbmx5IHJlcXVpcmVkIGZvciBGaXJlZm94IDMuNiAoUG93ZXJNYWNzKS5cblx0XHRcdFx0Ly8gUmVjZW50IEhUTWw1IGJyb3dzZXJzIG9ubHkgcmVxdWlyZSB0aGUgc3JjIGNoYW5nZS4gRHVlIHRvIGNoYW5nZXMgaW4gVzNDIHNwZWMgYW5kIGxvYWQoKSBlZmZlY3QuXG5cdFx0XHRcdHRoaXMuaHRtbEVsZW1lbnQubWVkaWEubG9hZCgpOyAvLyBTdG9wcyBhbiBvbGQsIFwiaW4gcHJvZ3Jlc3NcIiBkb3dubG9hZCBmcm9tIGNvbnRpbnVpbmcgdGhlIGRvd25sb2FkLiBUcmlnZ2VycyB0aGUgbG9hZHN0YXJ0LCBlcnJvciBhbmQgZW1wdGllZCBldmVudHMsIGR1ZSB0byB0aGUgZW1wdHkgc3JjLiBBbHNvIGFuIGFib3J0IGV2ZW50IGlmIGEgZG93bmxvYWQgd2FzIGluIHByb2dyZXNzLlxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0X2h0bWxfbG9hZDogZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBUaGlzIGZ1bmN0aW9uIHJlbWFpbnMgdG8gYWxsb3cgdGhlIGVhcmx5IEhUTUw1IGJyb3dzZXJzIHRvIHdvcmssIHN1Y2ggYXMgRmlyZWZveCAzLjZcblx0XHRcdC8vIEEgY2hhbmdlIGluIHRoZSBXM0Mgc3BlYyBmb3IgdGhlIG1lZGlhLmxvYWQoKSBjb21tYW5kIG1lYW5zIHRoYXQgdGhpcyBpcyBubyBsb25nZXIgbmVjZXNzYXJ5LlxuXHRcdFx0Ly8gVGhpcyBjb21tYW5kIHNob3VsZCBiZSByZW1vdmVkIGFuZCBhY3R1YWxseSBjYXVzZXMgbWlub3IgdW5kZXNpcmFibGUgZWZmZWN0cyBvbiBzb21lIGJyb3dzZXJzLiBTdWNoIGFzIGxvYWRpbmcgdGhlIHdob2xlIGZpbGUgYW5kIG5vdCBvbmx5IHRoZSBtZXRhZGF0YS5cblx0XHRcdGlmKHRoaXMuc3RhdHVzLndhaXRGb3JMb2FkKSB7XG5cdFx0XHRcdHRoaXMuc3RhdHVzLndhaXRGb3JMb2FkID0gZmFsc2U7XG5cdFx0XHRcdHRoaXMuaHRtbEVsZW1lbnQubWVkaWEubG9hZCgpO1xuXHRcdFx0fVxuXHRcdFx0Y2xlYXJUaW1lb3V0KHRoaXMuaW50ZXJuYWwuaHRtbERseUNtZElkKTtcblx0XHR9LFxuXHRcdF9odG1sX3BsYXk6IGZ1bmN0aW9uKHRpbWUpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHRcdFx0bWVkaWEgPSB0aGlzLmh0bWxFbGVtZW50Lm1lZGlhO1xuXG5cdFx0XHR0aGlzLmFuZHJvaWRGaXgucGF1c2UgPSBmYWxzZTsgLy8gQ2FuY2VsIHRoZSBwYXVzZSBmaXguXG5cblx0XHRcdHRoaXMuX2h0bWxfbG9hZCgpOyAvLyBMb2FkcyBpZiByZXF1aXJlZCBhbmQgY2xlYXJzIGFueSBkZWxheWVkIGNvbW1hbmRzLlxuXG5cdFx0XHQvLyBTZXR1cCB0aGUgQW5kcm9pZCBGaXguXG5cdFx0XHRpZih0aGlzLmFuZHJvaWRGaXguc2V0TWVkaWEpIHtcblx0XHRcdFx0dGhpcy5hbmRyb2lkRml4LnBsYXkgPSB0cnVlO1xuXHRcdFx0XHR0aGlzLmFuZHJvaWRGaXgudGltZSA9IHRpbWU7XG5cblx0XHRcdH0gZWxzZSBpZighaXNOYU4odGltZSkpIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIHBsYXkgaXQsIHNpbmNlIGlPUyBoYXMgYmVlbiBpZ25vcmluZyBjb21tYW5kc1xuXHRcdFx0XHRpZih0aGlzLmludGVybmFsLmNtZHNJZ25vcmVkKSB7XG5cdFx0XHRcdFx0bWVkaWEucGxheSgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyAhbWVkaWEuc2Vla2FibGUgaXMgZm9yIG9sZCBIVE1MNSBicm93c2VycywgbGlrZSBGaXJlZm94IDMuNi5cblx0XHRcdFx0XHQvLyBDaGVja2luZyBzZWVrYWJsZS5sZW5ndGggaXMgaW1wb3J0YW50IGZvciBpT1M2IHRvIHdvcmsgd2l0aCBzZXRNZWRpYSgpLnBsYXkodGltZSlcblx0XHRcdFx0XHRpZighbWVkaWEuc2Vla2FibGUgfHwgdHlwZW9mIG1lZGlhLnNlZWthYmxlID09PSBcIm9iamVjdFwiICYmIG1lZGlhLnNlZWthYmxlLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHRcdG1lZGlhLmN1cnJlbnRUaW1lID0gdGltZTtcblx0XHRcdFx0XHRcdG1lZGlhLnBsYXkoKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dGhyb3cgMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gY2F0Y2goZXJyKSB7XG5cdFx0XHRcdFx0dGhpcy5pbnRlcm5hbC5odG1sRGx5Q21kSWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c2VsZi5wbGF5KHRpbWUpO1xuXHRcdFx0XHRcdH0sIDI1MCk7XG5cdFx0XHRcdFx0cmV0dXJuOyAvLyBDYW5jZWwgZXhlY3V0aW9uIGFuZCB3YWl0IGZvciB0aGUgZGVsYXllZCBjb21tYW5kLlxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtZWRpYS5wbGF5KCk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl9odG1sX2NoZWNrV2FpdEZvclBsYXkoKTtcblx0XHR9LFxuXHRcdF9odG1sX3BhdXNlOiBmdW5jdGlvbih0aW1lKSB7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXMsXG5cdFx0XHRcdG1lZGlhID0gdGhpcy5odG1sRWxlbWVudC5tZWRpYTtcblxuXHRcdFx0dGhpcy5hbmRyb2lkRml4LnBsYXkgPSBmYWxzZTsgLy8gQ2FuY2VsIHRoZSBwbGF5IGZpeC5cblxuXHRcdFx0aWYodGltZSA+IDApIHsgLy8gV2UgZG8gbm90IHdhbnQgdGhlIHN0b3AoKSBjb21tYW5kLCB3aGljaCBkb2VzIHBhdXNlKDApLCBjYXVzaW5nIGEgbG9hZCBvcGVyYXRpb24uXG5cdFx0XHRcdHRoaXMuX2h0bWxfbG9hZCgpOyAvLyBMb2FkcyBpZiByZXF1aXJlZCBhbmQgY2xlYXJzIGFueSBkZWxheWVkIGNvbW1hbmRzLlxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xlYXJUaW1lb3V0KHRoaXMuaW50ZXJuYWwuaHRtbERseUNtZElkKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3JkZXIgb2YgdGhlc2UgY29tbWFuZHMgaXMgaW1wb3J0YW50IGZvciBTYWZhcmkgKFdpbikgYW5kIElFOS4gUGF1c2UgdGhlbiBjaGFuZ2UgY3VycmVudFRpbWUuXG5cdFx0XHRtZWRpYS5wYXVzZSgpO1xuXG5cdFx0XHQvLyBTZXR1cCB0aGUgQW5kcm9pZCBGaXguXG5cdFx0XHRpZih0aGlzLmFuZHJvaWRGaXguc2V0TWVkaWEpIHtcblx0XHRcdFx0dGhpcy5hbmRyb2lkRml4LnBhdXNlID0gdHJ1ZTtcblx0XHRcdFx0dGhpcy5hbmRyb2lkRml4LnRpbWUgPSB0aW1lO1xuXG5cdFx0XHR9IGVsc2UgaWYoIWlzTmFOKHRpbWUpKSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0aWYoIW1lZGlhLnNlZWthYmxlIHx8IHR5cGVvZiBtZWRpYS5zZWVrYWJsZSA9PT0gXCJvYmplY3RcIiAmJiBtZWRpYS5zZWVrYWJsZS5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0XHRtZWRpYS5jdXJyZW50VGltZSA9IHRpbWU7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRocm93IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGNhdGNoKGVycikge1xuXHRcdFx0XHRcdHRoaXMuaW50ZXJuYWwuaHRtbERseUNtZElkID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHNlbGYucGF1c2UodGltZSk7XG5cdFx0XHRcdFx0fSwgMjUwKTtcblx0XHRcdFx0XHRyZXR1cm47IC8vIENhbmNlbCBleGVjdXRpb24gYW5kIHdhaXQgZm9yIHRoZSBkZWxheWVkIGNvbW1hbmQuXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmKHRpbWUgPiAwKSB7IC8vIEF2b2lkcyBhIHNldE1lZGlhKCkgZm9sbG93ZWQgYnkgc3RvcCgpIG9yIHBhdXNlKDApIGhpZGluZyB0aGUgdmlkZW8gcGxheSBidXR0b24uXG5cdFx0XHRcdHRoaXMuX2h0bWxfY2hlY2tXYWl0Rm9yUGxheSgpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0X2h0bWxfcGxheUhlYWQ6IGZ1bmN0aW9uKHBlcmNlbnQpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcyxcblx0XHRcdFx0bWVkaWEgPSB0aGlzLmh0bWxFbGVtZW50Lm1lZGlhO1xuXG5cdFx0XHR0aGlzLl9odG1sX2xvYWQoKTsgLy8gTG9hZHMgaWYgcmVxdWlyZWQgYW5kIGNsZWFycyBhbnkgZGVsYXllZCBjb21tYW5kcy5cblxuXHRcdFx0Ly8gVGhpcyBwbGF5SGVhZCgpIG1ldGhvZCBuZWVkcyBhIHJlZmFjdG9yIHRvIGFwcGx5IHRoZSBhbmRyb2lkIGZpeC5cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0aWYodHlwZW9mIG1lZGlhLnNlZWthYmxlID09PSBcIm9iamVjdFwiICYmIG1lZGlhLnNlZWthYmxlLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHRtZWRpYS5jdXJyZW50VGltZSA9IHBlcmNlbnQgKiBtZWRpYS5zZWVrYWJsZS5lbmQobWVkaWEuc2Vla2FibGUubGVuZ3RoLTEpIC8gMTAwO1xuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWEuZHVyYXRpb24gPiAwICYmICFpc05hTihtZWRpYS5kdXJhdGlvbikpIHtcblx0XHRcdFx0XHRtZWRpYS5jdXJyZW50VGltZSA9IHBlcmNlbnQgKiBtZWRpYS5kdXJhdGlvbiAvIDEwMDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aHJvdyBcImVcIjtcblx0XHRcdFx0fVxuXHRcdFx0fSBjYXRjaChlcnIpIHtcblx0XHRcdFx0dGhpcy5pbnRlcm5hbC5odG1sRGx5Q21kSWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHNlbGYucGxheUhlYWQocGVyY2VudCk7XG5cdFx0XHRcdH0sIDI1MCk7XG5cdFx0XHRcdHJldHVybjsgLy8gQ2FuY2VsIGV4ZWN1dGlvbiBhbmQgd2FpdCBmb3IgdGhlIGRlbGF5ZWQgY29tbWFuZC5cblx0XHRcdH1cblx0XHRcdGlmKCF0aGlzLnN0YXR1cy53YWl0Rm9yTG9hZCkge1xuXHRcdFx0XHR0aGlzLl9odG1sX2NoZWNrV2FpdEZvclBsYXkoKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdF9odG1sX2NoZWNrV2FpdEZvclBsYXk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYodGhpcy5zdGF0dXMud2FpdEZvclBsYXkpIHtcblx0XHRcdFx0dGhpcy5zdGF0dXMud2FpdEZvclBsYXkgPSBmYWxzZTtcblx0XHRcdFx0aWYodGhpcy5jc3MuanEudmlkZW9QbGF5Lmxlbmd0aCkge1xuXHRcdFx0XHRcdHRoaXMuY3NzLmpxLnZpZGVvUGxheS5oaWRlKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYodGhpcy5zdGF0dXMudmlkZW8pIHtcblx0XHRcdFx0XHR0aGlzLmludGVybmFsLnBvc3Rlci5qcS5oaWRlKCk7XG5cdFx0XHRcdFx0dGhpcy5pbnRlcm5hbC52aWRlby5qcS5jc3Moeyd3aWR0aCc6IHRoaXMuc3RhdHVzLndpZHRoLCAnaGVpZ2h0JzogdGhpcy5zdGF0dXMuaGVpZ2h0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdF9odG1sX3NldFByb3BlcnR5OiBmdW5jdGlvbihwcm9wZXJ0eSwgdmFsdWUpIHtcblx0XHRcdGlmKHRoaXMuaHRtbC5hdWRpby5hdmFpbGFibGUpIHtcblx0XHRcdFx0dGhpcy5odG1sRWxlbWVudC5hdWRpb1twcm9wZXJ0eV0gPSB2YWx1ZTtcblx0XHRcdH1cblx0XHRcdGlmKHRoaXMuaHRtbC52aWRlby5hdmFpbGFibGUpIHtcblx0XHRcdFx0dGhpcy5odG1sRWxlbWVudC52aWRlb1twcm9wZXJ0eV0gPSB2YWx1ZTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdF9hdXJvcmFfc2V0QXVkaW86IGZ1bmN0aW9uKG1lZGlhKSB7XG5cdFx0XHR2YXIgc2VsZiA9IHRoaXM7XG5cblx0XHRcdC8vIEFsd2F5cyBmaW5kcyBhIGZvcm1hdCBkdWUgdG8gY2hlY2tzIGluIHNldE1lZGlhKClcblx0XHRcdCQuZWFjaCh0aGlzLmZvcm1hdHMsIGZ1bmN0aW9uKHByaW9yaXR5LCBmb3JtYXQpIHtcblx0XHRcdFx0aWYoc2VsZi5hdXJvcmEuc3VwcG9ydFtmb3JtYXRdICYmIG1lZGlhW2Zvcm1hdF0pIHtcblx0XHRcdFx0XHRzZWxmLnN0YXR1cy5zcmMgPSBtZWRpYVtmb3JtYXRdO1xuXHRcdFx0XHRcdHNlbGYuc3RhdHVzLmZvcm1hdFtmb3JtYXRdID0gdHJ1ZTtcblx0XHRcdFx0XHRzZWxmLnN0YXR1cy5mb3JtYXRUeXBlID0gZm9ybWF0O1xuXG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy5hdXJvcmEucGxheWVyID0gbmV3IEFWLlBsYXllci5mcm9tVVJMKHRoaXMuc3RhdHVzLnNyYyk7XG5cdFx0XHR0aGlzLl9hZGRBdXJvcmFFdmVudExpc3RlbmVycyh0aGlzLmF1cm9yYS5wbGF5ZXIsIHRoaXMuYXVyb3JhKTtcblxuXHRcdFx0aWYodGhpcy5vcHRpb25zLnByZWxvYWQgPT09ICdhdXRvJykge1xuXHRcdFx0XHR0aGlzLl9hdXJvcmFfbG9hZCgpO1xuXHRcdFx0XHR0aGlzLnN0YXR1cy53YWl0Rm9yTG9hZCA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0X2F1cm9yYV9yZXNldE1lZGlhOiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICh0aGlzLmF1cm9yYS5wbGF5ZXIpIHtcblx0XHRcdFx0dGhpcy5hdXJvcmEucGxheWVyLnN0b3AoKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdF9hdXJvcmFfY2xlYXJNZWRpYTogZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBOb3RoaW5nIHRvIGNsZWFyLlxuXHRcdH0sXG5cdFx0X2F1cm9yYV9sb2FkOiBmdW5jdGlvbigpIHtcblx0XHRcdGlmKHRoaXMuc3RhdHVzLndhaXRGb3JMb2FkKSB7XG5cdFx0XHRcdHRoaXMuc3RhdHVzLndhaXRGb3JMb2FkID0gZmFsc2U7XG5cdFx0XHRcdHRoaXMuYXVyb3JhLnBsYXllci5wcmVsb2FkKCk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfYXVyb3JhX3BsYXk6IGZ1bmN0aW9uKHRpbWUpIHtcblx0XHRcdGlmICghdGhpcy5zdGF0dXMud2FpdEZvckxvYWQpIHtcblx0XHRcdFx0aWYgKCFpc05hTih0aW1lKSkge1xuXHRcdFx0XHRcdHRoaXMuYXVyb3JhLnBsYXllci5zZWVrKHRpbWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIXRoaXMuYXVyb3JhLnBsYXllci5wbGF5aW5nKSB7XG5cdFx0XHRcdHRoaXMuYXVyb3JhLnBsYXllci5wbGF5KCk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnN0YXR1cy53YWl0Rm9yTG9hZCA9IGZhbHNlO1xuXHRcdFx0dGhpcy5fYXVyb3JhX2NoZWNrV2FpdEZvclBsYXkoKTtcblxuXHRcdFx0Ly8gTm8gZXZlbnQgZnJvbSB0aGUgcGxheWVyLCB1cGRhdGUgVUkgbm93LlxuXHRcdFx0dGhpcy5fdXBkYXRlQnV0dG9ucyh0cnVlKTtcblx0XHRcdHRoaXMuX3RyaWdnZXIoJC5qUGxheWVyLmV2ZW50LnBsYXkpO1xuXHRcdH0sXG5cdFx0X2F1cm9yYV9wYXVzZTogZnVuY3Rpb24odGltZSkge1xuXHRcdFx0aWYgKCFpc05hTih0aW1lKSkge1xuXHRcdFx0XHR0aGlzLmF1cm9yYS5wbGF5ZXIuc2Vlayh0aW1lICogMTAwMCk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLmF1cm9yYS5wbGF5ZXIucGF1c2UoKTtcblxuXHRcdFx0aWYodGltZSA+IDApIHsgLy8gQXZvaWRzIGEgc2V0TWVkaWEoKSBmb2xsb3dlZCBieSBzdG9wKCkgb3IgcGF1c2UoMCkgaGlkaW5nIHRoZSB2aWRlbyBwbGF5IGJ1dHRvbi5cblx0XHRcdFx0dGhpcy5fYXVyb3JhX2NoZWNrV2FpdEZvclBsYXkoKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTm8gZXZlbnQgZnJvbSB0aGUgcGxheWVyLCB1cGRhdGUgVUkgbm93LlxuXHRcdFx0dGhpcy5fdXBkYXRlQnV0dG9ucyhmYWxzZSk7XG5cdFx0XHR0aGlzLl90cmlnZ2VyKCQualBsYXllci5ldmVudC5wYXVzZSk7XG5cdFx0fSxcblx0XHRfYXVyb3JhX3BsYXlIZWFkOiBmdW5jdGlvbihwZXJjZW50KSB7XG5cdFx0XHRpZih0aGlzLmF1cm9yYS5wbGF5ZXIuZHVyYXRpb24gPiAwKSB7XG5cdFx0XHRcdC8vIFRoZSBzZWVrKCkgc291bGQgYmUgaW4gbWlsbGlzZWNvbmRzLCBidXQgdGhlIG9ubHkgY29kZWMgdGhhdCB3b3JrcyB3aXRoIHNlZWsgKGFhYy5qcykgdXNlcyBzZWNvbmRzLlxuXHRcdFx0XHR0aGlzLmF1cm9yYS5wbGF5ZXIuc2VlayhwZXJjZW50ICogdGhpcy5hdXJvcmEucGxheWVyLmR1cmF0aW9uIC8gMTAwKTsgLy8gVXNpbmcgc2Vjb25kc1xuXHRcdFx0fVxuXG5cdFx0XHRpZighdGhpcy5zdGF0dXMud2FpdEZvckxvYWQpIHtcblx0XHRcdFx0dGhpcy5fYXVyb3JhX2NoZWNrV2FpdEZvclBsYXkoKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdF9hdXJvcmFfY2hlY2tXYWl0Rm9yUGxheTogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZih0aGlzLnN0YXR1cy53YWl0Rm9yUGxheSkge1xuXHRcdFx0XHR0aGlzLnN0YXR1cy53YWl0Rm9yUGxheSA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0X2F1cm9yYV92b2x1bWU6IGZ1bmN0aW9uKHYpIHtcblx0XHRcdHRoaXMuYXVyb3JhLnBsYXllci52b2x1bWUgPSB2ICogMTAwO1xuXHRcdH0sXG5cdFx0X2F1cm9yYV9tdXRlOiBmdW5jdGlvbihtKSB7XG5cdFx0XHRpZiAobSkge1xuXHRcdFx0XHR0aGlzLmF1cm9yYS5wcm9wZXJ0aWVzLmxhc3R2b2x1bWUgPSB0aGlzLmF1cm9yYS5wbGF5ZXIudm9sdW1lO1xuXHRcdFx0XHR0aGlzLmF1cm9yYS5wbGF5ZXIudm9sdW1lID0gMDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuYXVyb3JhLnBsYXllci52b2x1bWUgPSB0aGlzLmF1cm9yYS5wcm9wZXJ0aWVzLmxhc3R2b2x1bWU7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLmF1cm9yYS5wcm9wZXJ0aWVzLm11dGVkID0gbTtcblx0XHR9LFxuXHRcdF9mbGFzaF9zZXRBdWRpbzogZnVuY3Rpb24obWVkaWEpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRcdHRyeSB7XG5cdFx0XHRcdC8vIEFsd2F5cyBmaW5kcyBhIGZvcm1hdCBkdWUgdG8gY2hlY2tzIGluIHNldE1lZGlhKClcblx0XHRcdFx0JC5lYWNoKHRoaXMuZm9ybWF0cywgZnVuY3Rpb24ocHJpb3JpdHksIGZvcm1hdCkge1xuXHRcdFx0XHRcdGlmKHNlbGYuZmxhc2guc3VwcG9ydFtmb3JtYXRdICYmIG1lZGlhW2Zvcm1hdF0pIHtcblx0XHRcdFx0XHRcdHN3aXRjaCAoZm9ybWF0KSB7XG5cdFx0XHRcdFx0XHRcdGNhc2UgXCJtNGFcIiA6XG5cdFx0XHRcdFx0XHRcdGNhc2UgXCJmbGFcIiA6XG5cdFx0XHRcdFx0XHRcdFx0c2VsZi5fZ2V0TW92aWUoKS5mbF9zZXRBdWRpb19tNGEobWVkaWFbZm9ybWF0XSk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdGNhc2UgXCJtcDNcIiA6XG5cdFx0XHRcdFx0XHRcdFx0c2VsZi5fZ2V0TW92aWUoKS5mbF9zZXRBdWRpb19tcDMobWVkaWFbZm9ybWF0XSk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdGNhc2UgXCJydG1wYVwiOlxuXHRcdFx0XHRcdFx0XHRcdHNlbGYuX2dldE1vdmllKCkuZmxfc2V0QXVkaW9fcnRtcChtZWRpYVtmb3JtYXRdKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHNlbGYuc3RhdHVzLnNyYyA9IG1lZGlhW2Zvcm1hdF07XG5cdFx0XHRcdFx0XHRzZWxmLnN0YXR1cy5mb3JtYXRbZm9ybWF0XSA9IHRydWU7XG5cdFx0XHRcdFx0XHRzZWxmLnN0YXR1cy5mb3JtYXRUeXBlID0gZm9ybWF0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0aWYodGhpcy5vcHRpb25zLnByZWxvYWQgPT09ICdhdXRvJykge1xuXHRcdFx0XHRcdHRoaXMuX2ZsYXNoX2xvYWQoKTtcblx0XHRcdFx0XHR0aGlzLnN0YXR1cy53YWl0Rm9yTG9hZCA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGNhdGNoKGVycikgeyB0aGlzLl9mbGFzaEVycm9yKGVycik7IH1cblx0XHR9LFxuXHRcdF9mbGFzaF9zZXRWaWRlbzogZnVuY3Rpb24obWVkaWEpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRcdHRyeSB7XG5cdFx0XHRcdC8vIEFsd2F5cyBmaW5kcyBhIGZvcm1hdCBkdWUgdG8gY2hlY2tzIGluIHNldE1lZGlhKClcblx0XHRcdFx0JC5lYWNoKHRoaXMuZm9ybWF0cywgZnVuY3Rpb24ocHJpb3JpdHksIGZvcm1hdCkge1xuXHRcdFx0XHRcdGlmKHNlbGYuZmxhc2guc3VwcG9ydFtmb3JtYXRdICYmIG1lZGlhW2Zvcm1hdF0pIHtcblx0XHRcdFx0XHRcdHN3aXRjaCAoZm9ybWF0KSB7XG5cdFx0XHRcdFx0XHRcdGNhc2UgXCJtNHZcIiA6XG5cdFx0XHRcdFx0XHRcdGNhc2UgXCJmbHZcIiA6XG5cdFx0XHRcdFx0XHRcdFx0c2VsZi5fZ2V0TW92aWUoKS5mbF9zZXRWaWRlb19tNHYobWVkaWFbZm9ybWF0XSk7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdGNhc2UgXCJydG1wdlwiOlxuXHRcdFx0XHRcdFx0XHRcdHNlbGYuX2dldE1vdmllKCkuZmxfc2V0VmlkZW9fcnRtcChtZWRpYVtmb3JtYXRdKTtcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHNlbGYuc3RhdHVzLnNyYyA9IG1lZGlhW2Zvcm1hdF07XG5cdFx0XHRcdFx0XHRzZWxmLnN0YXR1cy5mb3JtYXRbZm9ybWF0XSA9IHRydWU7XG5cdFx0XHRcdFx0XHRzZWxmLnN0YXR1cy5mb3JtYXRUeXBlID0gZm9ybWF0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0aWYodGhpcy5vcHRpb25zLnByZWxvYWQgPT09ICdhdXRvJykge1xuXHRcdFx0XHRcdHRoaXMuX2ZsYXNoX2xvYWQoKTtcblx0XHRcdFx0XHR0aGlzLnN0YXR1cy53YWl0Rm9yTG9hZCA9IGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGNhdGNoKGVycikgeyB0aGlzLl9mbGFzaEVycm9yKGVycik7IH1cblx0XHR9LFxuXHRcdF9mbGFzaF9yZXNldE1lZGlhOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuaW50ZXJuYWwuZmxhc2guanEuY3NzKHsnd2lkdGgnOicwcHgnLCAnaGVpZ2h0JzonMHB4J30pOyAvLyBNdXN0IGRvIHZpYSBDU1MgYXMgc2V0dGluZyBhdHRyKCkgdG8gemVybyBjYXVzZXMgYSBqUXVlcnkgZXJyb3IgaW4gSUUuXG5cdFx0XHR0aGlzLl9mbGFzaF9wYXVzZShOYU4pO1xuXHRcdH0sXG5cdFx0X2ZsYXNoX2NsZWFyTWVkaWE6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dGhpcy5fZ2V0TW92aWUoKS5mbF9jbGVhck1lZGlhKCk7XG5cdFx0XHR9IGNhdGNoKGVycikgeyB0aGlzLl9mbGFzaEVycm9yKGVycik7IH1cblx0XHR9LFxuXHRcdF9mbGFzaF9sb2FkOiBmdW5jdGlvbigpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdHRoaXMuX2dldE1vdmllKCkuZmxfbG9hZCgpO1xuXHRcdFx0fSBjYXRjaChlcnIpIHsgdGhpcy5fZmxhc2hFcnJvcihlcnIpOyB9XG5cdFx0XHR0aGlzLnN0YXR1cy53YWl0Rm9yTG9hZCA9IGZhbHNlO1xuXHRcdH0sXG5cdFx0X2ZsYXNoX3BsYXk6IGZ1bmN0aW9uKHRpbWUpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdHRoaXMuX2dldE1vdmllKCkuZmxfcGxheSh0aW1lKTtcblx0XHRcdH0gY2F0Y2goZXJyKSB7IHRoaXMuX2ZsYXNoRXJyb3IoZXJyKTsgfVxuXHRcdFx0dGhpcy5zdGF0dXMud2FpdEZvckxvYWQgPSBmYWxzZTtcblx0XHRcdHRoaXMuX2ZsYXNoX2NoZWNrV2FpdEZvclBsYXkoKTtcblx0XHR9LFxuXHRcdF9mbGFzaF9wYXVzZTogZnVuY3Rpb24odGltZSkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dGhpcy5fZ2V0TW92aWUoKS5mbF9wYXVzZSh0aW1lKTtcblx0XHRcdH0gY2F0Y2goZXJyKSB7IHRoaXMuX2ZsYXNoRXJyb3IoZXJyKTsgfVxuXHRcdFx0aWYodGltZSA+IDApIHsgLy8gQXZvaWRzIGEgc2V0TWVkaWEoKSBmb2xsb3dlZCBieSBzdG9wKCkgb3IgcGF1c2UoMCkgaGlkaW5nIHRoZSB2aWRlbyBwbGF5IGJ1dHRvbi5cblx0XHRcdFx0dGhpcy5zdGF0dXMud2FpdEZvckxvYWQgPSBmYWxzZTtcblx0XHRcdFx0dGhpcy5fZmxhc2hfY2hlY2tXYWl0Rm9yUGxheSgpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0X2ZsYXNoX3BsYXlIZWFkOiBmdW5jdGlvbihwKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHR0aGlzLl9nZXRNb3ZpZSgpLmZsX3BsYXlfaGVhZChwKTtcblx0XHRcdH0gY2F0Y2goZXJyKSB7IHRoaXMuX2ZsYXNoRXJyb3IoZXJyKTsgfVxuXHRcdFx0aWYoIXRoaXMuc3RhdHVzLndhaXRGb3JMb2FkKSB7XG5cdFx0XHRcdHRoaXMuX2ZsYXNoX2NoZWNrV2FpdEZvclBsYXkoKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdF9mbGFzaF9jaGVja1dhaXRGb3JQbGF5OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmKHRoaXMuc3RhdHVzLndhaXRGb3JQbGF5KSB7XG5cdFx0XHRcdHRoaXMuc3RhdHVzLndhaXRGb3JQbGF5ID0gZmFsc2U7XG5cdFx0XHRcdGlmKHRoaXMuY3NzLmpxLnZpZGVvUGxheS5sZW5ndGgpIHtcblx0XHRcdFx0XHR0aGlzLmNzcy5qcS52aWRlb1BsYXkuaGlkZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmKHRoaXMuc3RhdHVzLnZpZGVvKSB7XG5cdFx0XHRcdFx0dGhpcy5pbnRlcm5hbC5wb3N0ZXIuanEuaGlkZSgpO1xuXHRcdFx0XHRcdHRoaXMuaW50ZXJuYWwuZmxhc2guanEuY3NzKHsnd2lkdGgnOiB0aGlzLnN0YXR1cy53aWR0aCwgJ2hlaWdodCc6IHRoaXMuc3RhdHVzLmhlaWdodH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRfZmxhc2hfdm9sdW1lOiBmdW5jdGlvbih2KSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHR0aGlzLl9nZXRNb3ZpZSgpLmZsX3ZvbHVtZSh2KTtcblx0XHRcdH0gY2F0Y2goZXJyKSB7IHRoaXMuX2ZsYXNoRXJyb3IoZXJyKTsgfVxuXHRcdH0sXG5cdFx0X2ZsYXNoX211dGU6IGZ1bmN0aW9uKG0pIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdHRoaXMuX2dldE1vdmllKCkuZmxfbXV0ZShtKTtcblx0XHRcdH0gY2F0Y2goZXJyKSB7IHRoaXMuX2ZsYXNoRXJyb3IoZXJyKTsgfVxuXHRcdH0sXG5cdFx0X2dldE1vdmllOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBkb2N1bWVudFt0aGlzLmludGVybmFsLmZsYXNoLmlkXTtcblx0XHR9LFxuXHRcdF9nZXRGbGFzaFBsdWdpblZlcnNpb246IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBfZ2V0Rmxhc2hQbHVnaW5WZXJzaW9uKCkgY29kZSBpbmZsdWVuY2VkIGJ5OlxuXHRcdFx0Ly8gLSBGbGFzaFJlcGxhY2UgMS4wMTogaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL2ZsYXNocmVwbGFjZS9cblx0XHRcdC8vIC0gU1dGT2JqZWN0IDIuMjogaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL3N3Zm9iamVjdC9cblxuXHRcdFx0dmFyIHZlcnNpb24gPSAwLFxuXHRcdFx0XHRmbGFzaDtcblx0XHRcdGlmKHdpbmRvdy5BY3RpdmVYT2JqZWN0KSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zmxhc2ggPSBuZXcgQWN0aXZlWE9iamVjdChcIlNob2Nrd2F2ZUZsYXNoLlNob2Nrd2F2ZUZsYXNoXCIpO1xuXHRcdFx0XHRcdGlmIChmbGFzaCkgeyAvLyBmbGFzaCB3aWxsIHJldHVybiBudWxsIHdoZW4gQWN0aXZlWCBpcyBkaXNhYmxlZFxuXHRcdFx0XHRcdFx0dmFyIHYgPSBmbGFzaC5HZXRWYXJpYWJsZShcIiR2ZXJzaW9uXCIpO1xuXHRcdFx0XHRcdFx0aWYodikge1xuXHRcdFx0XHRcdFx0XHR2ID0gdi5zcGxpdChcIiBcIilbMV0uc3BsaXQoXCIsXCIpO1xuXHRcdFx0XHRcdFx0XHR2ZXJzaW9uID0gcGFyc2VJbnQodlswXSwgMTApICsgXCIuXCIgKyBwYXJzZUludCh2WzFdLCAxMCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGNhdGNoKGUpIHt9XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmKG5hdmlnYXRvci5wbHVnaW5zICYmIG5hdmlnYXRvci5taW1lVHlwZXMubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRmbGFzaCA9IG5hdmlnYXRvci5wbHVnaW5zW1wiU2hvY2t3YXZlIEZsYXNoXCJdO1xuXHRcdFx0XHRpZihmbGFzaCkge1xuXHRcdFx0XHRcdHZlcnNpb24gPSBuYXZpZ2F0b3IucGx1Z2luc1tcIlNob2Nrd2F2ZSBGbGFzaFwiXS5kZXNjcmlwdGlvbi5yZXBsYWNlKC8uKlxccyhcXGQrXFwuXFxkKykuKi8sIFwiJDFcIik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB2ZXJzaW9uICogMTsgLy8gQ29udmVydHMgdG8gYSBudW1iZXJcblx0XHR9LFxuXHRcdF9jaGVja0ZvckZsYXNoOiBmdW5jdGlvbiAodmVyc2lvbikge1xuXHRcdFx0dmFyIGZsYXNoT2sgPSBmYWxzZTtcblx0XHRcdGlmKHRoaXMuX2dldEZsYXNoUGx1Z2luVmVyc2lvbigpID49IHZlcnNpb24pIHtcblx0XHRcdFx0Zmxhc2hPayA9IHRydWU7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmxhc2hPaztcblx0XHR9LFxuXHRcdF92YWxpZFN0cmluZzogZnVuY3Rpb24odXJsKSB7XG5cdFx0XHRyZXR1cm4gKHVybCAmJiB0eXBlb2YgdXJsID09PSBcInN0cmluZ1wiKTsgLy8gRW1wdHkgc3RyaW5ncyByZXR1cm4gZmFsc2Vcblx0XHR9LFxuXHRcdF9saW1pdFZhbHVlOiBmdW5jdGlvbih2YWx1ZSwgbWluLCBtYXgpIHtcblx0XHRcdHJldHVybiAodmFsdWUgPCBtaW4pID8gbWluIDogKCh2YWx1ZSA+IG1heCkgPyBtYXggOiB2YWx1ZSk7XG5cdFx0fSxcblx0XHRfdXJsTm90U2V0RXJyb3I6IGZ1bmN0aW9uKGNvbnRleHQpIHtcblx0XHRcdHRoaXMuX2Vycm9yKCB7XG5cdFx0XHRcdHR5cGU6ICQualBsYXllci5lcnJvci5VUkxfTk9UX1NFVCxcblx0XHRcdFx0Y29udGV4dDogY29udGV4dCxcblx0XHRcdFx0bWVzc2FnZTogJC5qUGxheWVyLmVycm9yTXNnLlVSTF9OT1RfU0VULFxuXHRcdFx0XHRoaW50OiAkLmpQbGF5ZXIuZXJyb3JIaW50LlVSTF9OT1RfU0VUXG5cdFx0XHR9KTtcblx0XHR9LFxuXHRcdF9mbGFzaEVycm9yOiBmdW5jdGlvbihlcnJvcikge1xuXHRcdFx0dmFyIGVycm9yVHlwZTtcblx0XHRcdGlmKCF0aGlzLmludGVybmFsLnJlYWR5KSB7XG5cdFx0XHRcdGVycm9yVHlwZSA9IFwiRkxBU0hcIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVycm9yVHlwZSA9IFwiRkxBU0hfRElTQUJMRURcIjtcblx0XHRcdH1cblx0XHRcdHRoaXMuX2Vycm9yKCB7XG5cdFx0XHRcdHR5cGU6ICQualBsYXllci5lcnJvcltlcnJvclR5cGVdLFxuXHRcdFx0XHRjb250ZXh0OiB0aGlzLmludGVybmFsLmZsYXNoLnN3Zixcblx0XHRcdFx0bWVzc2FnZTogJC5qUGxheWVyLmVycm9yTXNnW2Vycm9yVHlwZV0gKyBlcnJvci5tZXNzYWdlLFxuXHRcdFx0XHRoaW50OiAkLmpQbGF5ZXIuZXJyb3JIaW50W2Vycm9yVHlwZV1cblx0XHRcdH0pO1xuXHRcdFx0Ly8gQWxsb3cgdGhlIGF1ZGlvIHBsYXllciB0byByZWNvdmVyIGlmIGRpc3BsYXk6bm9uZSBhbmQgdGhlbiBzaG93biBhZ2Fpbiwgb3Igd2l0aCBwb3NpdGlvbjpmaXhlZCBvbiBGaXJlZm94LlxuXHRcdFx0Ly8gVGhpcyByZWFsbHkgb25seSBhZmZlY3RzIGF1ZGlvIGluIGEgbWVkaWEgcGxheWVyLCBhcyBhbiBhdWRpbyBwbGF5ZXIgY291bGQgZWFzaWx5IG1vdmUgdGhlIGpQbGF5ZXIgZWxlbWVudCBhd2F5IGZyb20gc3VjaCBpc3N1ZXMuXG5cdFx0XHR0aGlzLmludGVybmFsLmZsYXNoLmpxLmNzcyh7J3dpZHRoJzonMXB4JywgJ2hlaWdodCc6JzFweCd9KTtcblx0XHR9LFxuXHRcdF9lcnJvcjogZnVuY3Rpb24oZXJyb3IpIHtcblx0XHRcdHRoaXMuX3RyaWdnZXIoJC5qUGxheWVyLmV2ZW50LmVycm9yLCBlcnJvcik7XG5cdFx0XHRpZih0aGlzLm9wdGlvbnMuZXJyb3JBbGVydHMpIHtcblx0XHRcdFx0dGhpcy5fYWxlcnQoXCJFcnJvciFcIiArIChlcnJvci5tZXNzYWdlID8gXCJcXG5cIiArIGVycm9yLm1lc3NhZ2UgOiBcIlwiKSArIChlcnJvci5oaW50ID8gXCJcXG5cIiArIGVycm9yLmhpbnQgOiBcIlwiKSArIFwiXFxuQ29udGV4dDogXCIgKyBlcnJvci5jb250ZXh0KTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdF93YXJuaW5nOiBmdW5jdGlvbih3YXJuaW5nKSB7XG5cdFx0XHR0aGlzLl90cmlnZ2VyKCQualBsYXllci5ldmVudC53YXJuaW5nLCB1bmRlZmluZWQsIHdhcm5pbmcpO1xuXHRcdFx0aWYodGhpcy5vcHRpb25zLndhcm5pbmdBbGVydHMpIHtcblx0XHRcdFx0dGhpcy5fYWxlcnQoXCJXYXJuaW5nIVwiICsgKHdhcm5pbmcubWVzc2FnZSA/IFwiXFxuXCIgKyB3YXJuaW5nLm1lc3NhZ2UgOiBcIlwiKSArICh3YXJuaW5nLmhpbnQgPyBcIlxcblwiICsgd2FybmluZy5oaW50IDogXCJcIikgKyBcIlxcbkNvbnRleHQ6IFwiICsgd2FybmluZy5jb250ZXh0KTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdF9hbGVydDogZnVuY3Rpb24obWVzc2FnZSkge1xuXHRcdFx0dmFyIG1zZyA9IFwialBsYXllciBcIiArIHRoaXMudmVyc2lvbi5zY3JpcHQgKyBcIiA6IGlkPSdcIiArIHRoaXMuaW50ZXJuYWwuc2VsZi5pZCArXCInIDogXCIgKyBtZXNzYWdlO1xuXHRcdFx0aWYoIXRoaXMub3B0aW9ucy5jb25zb2xlQWxlcnRzKSB7XG5cdFx0XHRcdGFsZXJ0KG1zZyk7XG5cdFx0XHR9IGVsc2UgaWYod2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUubG9nKSB7XG5cdFx0XHRcdHdpbmRvdy5jb25zb2xlLmxvZyhtc2cpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0X2VtdWxhdGVIdG1sQnJpZGdlOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdFx0Ly8gRW11bGF0ZSBtZXRob2RzIG9uIGpQbGF5ZXIncyBET00gZWxlbWVudC5cblx0XHRcdCQuZWFjaCggJC5qUGxheWVyLmVtdWxhdGVNZXRob2RzLnNwbGl0KC9cXHMrL2cpLCBmdW5jdGlvbihpLCBuYW1lKSB7XG5cdFx0XHRcdHNlbGYuaW50ZXJuYWwuZG9tTm9kZVtuYW1lXSA9IGZ1bmN0aW9uKGFyZykge1xuXHRcdFx0XHRcdHNlbGZbbmFtZV0oYXJnKTtcblx0XHRcdFx0fTtcblxuXHRcdFx0fSk7XG5cblx0XHRcdC8vIEJ1YmJsZSBqUGxheWVyIGV2ZW50cyB0byBpdHMgRE9NIGVsZW1lbnQuXG5cdFx0XHQkLmVhY2goJC5qUGxheWVyLmV2ZW50LCBmdW5jdGlvbihldmVudE5hbWUsZXZlbnRUeXBlKSB7XG5cdFx0XHRcdHZhciBuYXRpdmVFdmVudCA9IHRydWU7XG5cdFx0XHRcdCQuZWFjaCggJC5qUGxheWVyLnJlc2VydmVkRXZlbnQuc3BsaXQoL1xccysvZyksIGZ1bmN0aW9uKGksIG5hbWUpIHtcblx0XHRcdFx0XHRpZihuYW1lID09PSBldmVudE5hbWUpIHtcblx0XHRcdFx0XHRcdG5hdGl2ZUV2ZW50ID0gZmFsc2U7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdFx0aWYobmF0aXZlRXZlbnQpIHtcblx0XHRcdFx0XHRzZWxmLmVsZW1lbnQuYmluZChldmVudFR5cGUgKyBcIi5qUGxheWVyLmpQbGF5ZXJIdG1sXCIsIGZ1bmN0aW9uKCkgeyAvLyBXaXRoIC5qUGxheWVyICYgLmpQbGF5ZXJIdG1sIG5hbWVzcGFjZXMuXG5cdFx0XHRcdFx0XHRzZWxmLl9lbXVsYXRlSHRtbFVwZGF0ZSgpO1xuXHRcdFx0XHRcdFx0dmFyIGRvbUV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKTtcblx0XHRcdFx0XHRcdGRvbUV2ZW50LmluaXRFdmVudChldmVudE5hbWUsIGZhbHNlLCB0cnVlKTtcblx0XHRcdFx0XHRcdHNlbGYuaW50ZXJuYWwuZG9tTm9kZS5kaXNwYXRjaEV2ZW50KGRvbUV2ZW50KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0XHQvLyBUaGUgZXJyb3IgZXZlbnQgd291bGQgcmVxdWlyZSBhIHNwZWNpYWwgY2FzZVxuXHRcdFx0fSk7XG5cblx0XHRcdC8vIElFOSBoYXMgYSByZWFkeVN0YXRlIHByb3BlcnR5IG9uIGFsbCBlbGVtZW50cy4gVGhlIGRvY3VtZW50IHNob3VsZCBoYXZlIGl0LCBidXQgYWxsIChleGNlcHQgbWVkaWEpIGVsZW1lbnRzIGluaGVyaXQgaXQgaW4gSUU5LiBUaGlzIGNvbmZsaWN0cyB3aXRoIFBvcGNvcm4sIHdoaWNoIHBvbGxzIHRoZSByZWFkeVN0YXRlLlxuXHRcdH0sXG5cdFx0X2VtdWxhdGVIdG1sVXBkYXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblxuXHRcdFx0JC5lYWNoKCAkLmpQbGF5ZXIuZW11bGF0ZVN0YXR1cy5zcGxpdCgvXFxzKy9nKSwgZnVuY3Rpb24oaSwgbmFtZSkge1xuXHRcdFx0XHRzZWxmLmludGVybmFsLmRvbU5vZGVbbmFtZV0gPSBzZWxmLnN0YXR1c1tuYW1lXTtcblx0XHRcdH0pO1xuXHRcdFx0JC5lYWNoKCAkLmpQbGF5ZXIuZW11bGF0ZU9wdGlvbnMuc3BsaXQoL1xccysvZyksIGZ1bmN0aW9uKGksIG5hbWUpIHtcblx0XHRcdFx0c2VsZi5pbnRlcm5hbC5kb21Ob2RlW25hbWVdID0gc2VsZi5vcHRpb25zW25hbWVdO1xuXHRcdFx0fSk7XG5cdFx0fSxcblx0XHRfZGVzdHJveUh0bWxCcmlkZ2U6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSB0aGlzO1xuXG5cdFx0XHQvLyBCcmlkZ2UgZXZlbnQgaGFuZGxlcnMgYXJlIGFsc28gcmVtb3ZlZCBieSBkZXN0cm95KCkgdGhyb3VnaCAualBsYXllciBuYW1lc3BhY2UuXG5cdFx0XHR0aGlzLmVsZW1lbnQudW5iaW5kKFwiLmpQbGF5ZXJIdG1sXCIpOyAvLyBSZW1vdmUgYWxsIGV2ZW50IGhhbmRsZXJzIGNyZWF0ZWQgYnkgdGhlIGpQbGF5ZXIgYnJpZGdlLiBTbyB5b3UgY2FuIGNoYW5nZSB0aGUgZW11bGF0ZUh0bWwgb3B0aW9uLlxuXG5cdFx0XHQvLyBSZW1vdmUgdGhlIG1ldGhvZHMgYW5kIHByb3BlcnRpZXNcblx0XHRcdHZhciBlbXVsYXRlZCA9ICQualBsYXllci5lbXVsYXRlTWV0aG9kcyArIFwiIFwiICsgJC5qUGxheWVyLmVtdWxhdGVTdGF0dXMgKyBcIiBcIiArICQualBsYXllci5lbXVsYXRlT3B0aW9ucztcblx0XHRcdCQuZWFjaCggZW11bGF0ZWQuc3BsaXQoL1xccysvZyksIGZ1bmN0aW9uKGksIG5hbWUpIHtcblx0XHRcdFx0ZGVsZXRlIHNlbGYuaW50ZXJuYWwuZG9tTm9kZVtuYW1lXTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fTtcblxuXHQkLmpQbGF5ZXIuZXJyb3IgPSB7XG5cdFx0RkxBU0g6IFwiZV9mbGFzaFwiLFxuXHRcdEZMQVNIX0RJU0FCTEVEOiBcImVfZmxhc2hfZGlzYWJsZWRcIixcblx0XHROT19TT0xVVElPTjogXCJlX25vX3NvbHV0aW9uXCIsXG5cdFx0Tk9fU1VQUE9SVDogXCJlX25vX3N1cHBvcnRcIixcblx0XHRVUkw6IFwiZV91cmxcIixcblx0XHRVUkxfTk9UX1NFVDogXCJlX3VybF9ub3Rfc2V0XCIsXG5cdFx0VkVSU0lPTjogXCJlX3ZlcnNpb25cIlxuXHR9O1xuXG5cdCQualBsYXllci5lcnJvck1zZyA9IHtcblx0XHRGTEFTSDogXCJqUGxheWVyJ3MgRmxhc2ggZmFsbGJhY2sgaXMgbm90IGNvbmZpZ3VyZWQgY29ycmVjdGx5LCBvciBhIGNvbW1hbmQgd2FzIGlzc3VlZCBiZWZvcmUgdGhlIGpQbGF5ZXIgUmVhZHkgZXZlbnQuIERldGFpbHM6IFwiLCAvLyBVc2VkIGluOiBfZmxhc2hFcnJvcigpXG5cdFx0RkxBU0hfRElTQUJMRUQ6IFwialBsYXllcidzIEZsYXNoIGZhbGxiYWNrIGhhcyBiZWVuIGRpc2FibGVkIGJ5IHRoZSBicm93c2VyIGR1ZSB0byB0aGUgQ1NTIHJ1bGVzIHlvdSBoYXZlIHVzZWQuIERldGFpbHM6IFwiLCAvLyBVc2VkIGluOiBfZmxhc2hFcnJvcigpXG5cdFx0Tk9fU09MVVRJT046IFwiTm8gc29sdXRpb24gY2FuIGJlIGZvdW5kIGJ5IGpQbGF5ZXIgaW4gdGhpcyBicm93c2VyLiBOZWl0aGVyIEhUTUwgbm9yIEZsYXNoIGNhbiBiZSB1c2VkLlwiLCAvLyBVc2VkIGluOiBfaW5pdCgpXG5cdFx0Tk9fU1VQUE9SVDogXCJJdCBpcyBub3QgcG9zc2libGUgdG8gcGxheSBhbnkgbWVkaWEgZm9ybWF0IHByb3ZpZGVkIGluIHNldE1lZGlhKCkgb24gdGhpcyBicm93c2VyIHVzaW5nIHlvdXIgY3VycmVudCBvcHRpb25zLlwiLCAvLyBVc2VkIGluOiBzZXRNZWRpYSgpXG5cdFx0VVJMOiBcIk1lZGlhIFVSTCBjb3VsZCBub3QgYmUgbG9hZGVkLlwiLCAvLyBVc2VkIGluOiBqUGxheWVyRmxhc2hFdmVudCgpIGFuZCBfYWRkSHRtbEV2ZW50TGlzdGVuZXJzKClcblx0XHRVUkxfTk9UX1NFVDogXCJBdHRlbXB0IHRvIGlzc3VlIG1lZGlhIHBsYXliYWNrIGNvbW1hbmRzLCB3aGlsZSBubyBtZWRpYSB1cmwgaXMgc2V0LlwiLCAvLyBVc2VkIGluOiBsb2FkKCksIHBsYXkoKSwgcGF1c2UoKSwgc3RvcCgpIGFuZCBwbGF5SGVhZCgpXG5cdFx0VkVSU0lPTjogXCJqUGxheWVyIFwiICsgJC5qUGxheWVyLnByb3RvdHlwZS52ZXJzaW9uLnNjcmlwdCArIFwiIG5lZWRzIEpwbGF5ZXIuc3dmIHZlcnNpb24gXCIgKyAkLmpQbGF5ZXIucHJvdG90eXBlLnZlcnNpb24ubmVlZEZsYXNoICsgXCIgYnV0IGZvdW5kIFwiIC8vIFVzZWQgaW46IGpQbGF5ZXJSZWFkeSgpXG5cdH07XG5cblx0JC5qUGxheWVyLmVycm9ySGludCA9IHtcblx0XHRGTEFTSDogXCJDaGVjayB5b3VyIHN3ZlBhdGggb3B0aW9uIGFuZCB0aGF0IEpwbGF5ZXIuc3dmIGlzIHRoZXJlLlwiLFxuXHRcdEZMQVNIX0RJU0FCTEVEOiBcIkNoZWNrIHRoYXQgeW91IGhhdmUgbm90IGRpc3BsYXk6bm9uZTsgdGhlIGpQbGF5ZXIgZW50aXR5IG9yIGFueSBhbmNlc3Rvci5cIixcblx0XHROT19TT0xVVElPTjogXCJSZXZpZXcgdGhlIGpQbGF5ZXIgb3B0aW9uczogc3VwcG9ydCBhbmQgc3VwcGxpZWQuXCIsXG5cdFx0Tk9fU1VQUE9SVDogXCJWaWRlbyBvciBhdWRpbyBmb3JtYXRzIGRlZmluZWQgaW4gdGhlIHN1cHBsaWVkIG9wdGlvbiBhcmUgbWlzc2luZy5cIixcblx0XHRVUkw6IFwiQ2hlY2sgbWVkaWEgVVJMIGlzIHZhbGlkLlwiLFxuXHRcdFVSTF9OT1RfU0VUOiBcIlVzZSBzZXRNZWRpYSgpIHRvIHNldCB0aGUgbWVkaWEgVVJMLlwiLFxuXHRcdFZFUlNJT046IFwiVXBkYXRlIGpQbGF5ZXIgZmlsZXMuXCJcblx0fTtcblxuXHQkLmpQbGF5ZXIud2FybmluZyA9IHtcblx0XHRDU1NfU0VMRUNUT1JfQ09VTlQ6IFwiZV9jc3Nfc2VsZWN0b3JfY291bnRcIixcblx0XHRDU1NfU0VMRUNUT1JfTUVUSE9EOiBcImVfY3NzX3NlbGVjdG9yX21ldGhvZFwiLFxuXHRcdENTU19TRUxFQ1RPUl9TVFJJTkc6IFwiZV9jc3Nfc2VsZWN0b3Jfc3RyaW5nXCIsXG5cdFx0T1BUSU9OX0tFWTogXCJlX29wdGlvbl9rZXlcIlxuXHR9O1xuXG5cdCQualBsYXllci53YXJuaW5nTXNnID0ge1xuXHRcdENTU19TRUxFQ1RPUl9DT1VOVDogXCJUaGUgbnVtYmVyIG9mIGNzcyBzZWxlY3RvcnMgZm91bmQgZGlkIG5vdCBlcXVhbCBvbmU6IFwiLFxuXHRcdENTU19TRUxFQ1RPUl9NRVRIT0Q6IFwiVGhlIG1ldGhvZE5hbWUgZ2l2ZW4gaW4galBsYXllcignY3NzU2VsZWN0b3InKSBpcyBub3QgYSB2YWxpZCBqUGxheWVyIG1ldGhvZC5cIixcblx0XHRDU1NfU0VMRUNUT1JfU1RSSU5HOiBcIlRoZSBtZXRob2RDc3NTZWxlY3RvciBnaXZlbiBpbiBqUGxheWVyKCdjc3NTZWxlY3RvcicpIGlzIG5vdCBhIFN0cmluZyBvciBpcyBlbXB0eS5cIixcblx0XHRPUFRJT05fS0VZOiBcIlRoZSBvcHRpb24gcmVxdWVzdGVkIGluIGpQbGF5ZXIoJ29wdGlvbicpIGlzIHVuZGVmaW5lZC5cIlxuXHR9O1xuXG5cdCQualBsYXllci53YXJuaW5nSGludCA9IHtcblx0XHRDU1NfU0VMRUNUT1JfQ09VTlQ6IFwiQ2hlY2sgeW91ciBjc3Mgc2VsZWN0b3IgYW5kIHRoZSBhbmNlc3Rvci5cIixcblx0XHRDU1NfU0VMRUNUT1JfTUVUSE9EOiBcIkNoZWNrIHlvdXIgbWV0aG9kIG5hbWUuXCIsXG5cdFx0Q1NTX1NFTEVDVE9SX1NUUklORzogXCJDaGVjayB5b3VyIGNzcyBzZWxlY3RvciBpcyBhIHN0cmluZy5cIixcblx0XHRPUFRJT05fS0VZOiBcIkNoZWNrIHlvdXIgb3B0aW9uIG5hbWUuXCJcblx0fTtcbn0pKHdpbmRvdy5qUXVlcnkpO1xuIiwiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYxLjExLjNcbiAqIGh0dHA6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cDovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgMjAwNSwgMjAxNCBqUXVlcnkgRm91bmRhdGlvbiwgSW5jLiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE1LTA0LTI4VDE2OjE5WlxuICovXG5cbihmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciB3aW5kb3cgaXMgcHJlc2VudCxcblx0XHQvLyBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5XG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBpbmhlcmVudGx5IHBvc3NlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgalF1ZXJ5LW1ha2luZyBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCB3aW5kb3dcblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mb1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIENhbid0IGRvIHRoaXMgYmVjYXVzZSBzZXZlcmFsIGFwcHMgaW5jbHVkaW5nIEFTUC5ORVQgdHJhY2Vcbi8vIHRoZSBzdGFjayB2aWEgYXJndW1lbnRzLmNhbGxlci5jYWxsZWUgYW5kIEZpcmVmb3ggZGllcyBpZlxuLy8geW91IHRyeSB0byB0cmFjZSB0aHJvdWdoIFwidXNlIHN0cmljdFwiIGNhbGwgY2hhaW5zLiAoIzEzMzM1KVxuLy8gU3VwcG9ydDogRmlyZWZveCAxOCtcbi8vXG5cbnZhciBkZWxldGVkSWRzID0gW107XG5cbnZhciBzbGljZSA9IGRlbGV0ZWRJZHMuc2xpY2U7XG5cbnZhciBjb25jYXQgPSBkZWxldGVkSWRzLmNvbmNhdDtcblxudmFyIHB1c2ggPSBkZWxldGVkSWRzLnB1c2g7XG5cbnZhciBpbmRleE9mID0gZGVsZXRlZElkcy5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxuXG5cbnZhclxuXHR2ZXJzaW9uID0gXCIxLjExLjNcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xLCBJRTw5XG5cdC8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxuXHRydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZyxcblxuXHQvLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcblx0cm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFtcXGRhLXpdKS9naSxcblxuXHQvLyBVc2VkIGJ5IGpRdWVyeS5jYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5cdGZjYW1lbENhc2UgPSBmdW5jdGlvbiggYWxsLCBsZXR0ZXIgKSB7XG5cdFx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xuXHR9O1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFN0YXJ0IHdpdGggYW4gZW1wdHkgc2VsZWN0b3Jcblx0c2VsZWN0b3I6IFwiXCIsXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXHRcdHJldHVybiBudW0gIT0gbnVsbCA/XG5cblx0XHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRcdCggbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXSApIDpcblxuXHRcdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdFx0c2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblx0XHRyZXQuY29udGV4dCA9IHRoaXMuY29udGV4dDtcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHQvLyAoWW91IGNhbiBzZWVkIHRoZSBhcmd1bWVudHMgd2l0aCBhbiBhcnJheSBvZiBhcmdzLCBidXQgdGhpcyBpc1xuXHQvLyBvbmx5IHVzZWQgaW50ZXJuYWxseS4pXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjaywgYXJncyApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrLCBhcmdzICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9KSk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1tqXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcihudWxsKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBkZWxldGVkSWRzLnNvcnQsXG5cdHNwbGljZTogZGVsZXRlZElkcy5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBzcmMsIGNvcHlJc0FycmF5LCBjb3B5LCBuYW1lLCBvcHRpb25zLCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbMF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBza2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24odGFyZ2V0KSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIGV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoIChvcHRpb25zID0gYXJndW1lbnRzWyBpIF0pICE9IG51bGwgKSB7XG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdChjb3B5KSB8fCAoY29weUlzQXJyYXkgPSBqUXVlcnkuaXNBcnJheShjb3B5KSkgKSApIHtcblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICkge1xuXHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc0FycmF5KHNyYykgPyBzcmMgOiBbXTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdChzcmMpID8gc3JjIDoge307XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKHtcblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0Ly8gU2VlIHRlc3QvdW5pdC9jb3JlLmpzIGZvciBkZXRhaWxzIGNvbmNlcm5pbmcgaXNGdW5jdGlvbi5cblx0Ly8gU2luY2UgdmVyc2lvbiAxLjMsIERPTSBtZXRob2RzIGFuZCBmdW5jdGlvbnMgbGlrZSBhbGVydFxuXHQvLyBhcmVuJ3Qgc3VwcG9ydGVkLiBUaGV5IHJldHVybiBmYWxzZSBvbiBJRSAoIzI5NjgpLlxuXHRpc0Z1bmN0aW9uOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHJldHVybiBqUXVlcnkudHlwZShvYmopID09PSBcImZ1bmN0aW9uXCI7XG5cdH0sXG5cblx0aXNBcnJheTogQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiggb2JqICkge1xuXHRcdHJldHVybiBqUXVlcnkudHlwZShvYmopID09PSBcImFycmF5XCI7XG5cdH0sXG5cblx0aXNXaW5kb3c6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0LyoganNoaW50IGVxZXFlcTogZmFsc2UgKi9cblx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09IG9iai53aW5kb3c7XG5cdH0sXG5cblx0aXNOdW1lcmljOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChudWxsfHRydWV8ZmFsc2V8XCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0Ly8gYWRkaW5nIDEgY29ycmVjdHMgbG9zcyBvZiBwcmVjaXNpb24gZnJvbSBwYXJzZUZsb2F0ICgjMTUxMDApXG5cdFx0cmV0dXJuICFqUXVlcnkuaXNBcnJheSggb2JqICkgJiYgKG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICsgMSkgPj0gMDtcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBuYW1lO1xuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBrZXk7XG5cblx0XHQvLyBNdXN0IGJlIGFuIE9iamVjdC5cblx0XHQvLyBCZWNhdXNlIG9mIElFLCB3ZSBhbHNvIGhhdmUgdG8gY2hlY2sgdGhlIHByZXNlbmNlIG9mIHRoZSBjb25zdHJ1Y3RvciBwcm9wZXJ0eS5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCBET00gbm9kZXMgYW5kIHdpbmRvdyBvYmplY3RzIGRvbid0IHBhc3MgdGhyb3VnaCwgYXMgd2VsbFxuXHRcdGlmICggIW9iaiB8fCBqUXVlcnkudHlwZShvYmopICE9PSBcIm9iamVjdFwiIHx8IG9iai5ub2RlVHlwZSB8fCBqUXVlcnkuaXNXaW5kb3coIG9iaiApICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHRyeSB7XG5cdFx0XHQvLyBOb3Qgb3duIGNvbnN0cnVjdG9yIHByb3BlcnR5IG11c3QgYmUgT2JqZWN0XG5cdFx0XHRpZiAoIG9iai5jb25zdHJ1Y3RvciAmJlxuXHRcdFx0XHQhaGFzT3duLmNhbGwob2JqLCBcImNvbnN0cnVjdG9yXCIpICYmXG5cdFx0XHRcdCFoYXNPd24uY2FsbChvYmouY29uc3RydWN0b3IucHJvdG90eXBlLCBcImlzUHJvdG90eXBlT2ZcIikgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdC8vIElFOCw5IFdpbGwgdGhyb3cgZXhjZXB0aW9ucyBvbiBjZXJ0YWluIGhvc3Qgb2JqZWN0cyAjOTg5N1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBIYW5kbGUgaXRlcmF0aW9uIG92ZXIgaW5oZXJpdGVkIHByb3BlcnRpZXMgYmVmb3JlIG93biBwcm9wZXJ0aWVzLlxuXHRcdGlmICggc3VwcG9ydC5vd25MYXN0ICkge1xuXHRcdFx0Zm9yICgga2V5IGluIG9iaiApIHtcblx0XHRcdFx0cmV0dXJuIGhhc093bi5jYWxsKCBvYmosIGtleSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE93biBwcm9wZXJ0aWVzIGFyZSBlbnVtZXJhdGVkIGZpcnN0bHksIHNvIHRvIHNwZWVkIHVwLFxuXHRcdC8vIGlmIGxhc3Qgb25lIGlzIG93biwgdGhlbiBhbGwgcHJvcGVydGllcyBhcmUgb3duLlxuXHRcdGZvciAoIGtleSBpbiBvYmogKSB7fVxuXG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkIHx8IGhhc093bi5jYWxsKCBvYmosIGtleSApO1xuXHR9LFxuXG5cdHR5cGU6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbChvYmopIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0XHR0eXBlb2Ygb2JqO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIGdsb2JhbCBjb250ZXh0XG5cdC8vIFdvcmthcm91bmRzIGJhc2VkIG9uIGZpbmRpbmdzIGJ5IEppbSBEcmlzY29sbFxuXHQvLyBodHRwOi8vd2VibG9ncy5qYXZhLm5ldC9ibG9nL2RyaXNjb2xsL2FyY2hpdmUvMjAwOS8wOS8wOC9ldmFsLWphdmFzY3JpcHQtZ2xvYmFsLWNvbnRleHRcblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGRhdGEgKSB7XG5cdFx0aWYgKCBkYXRhICYmIGpRdWVyeS50cmltKCBkYXRhICkgKSB7XG5cdFx0XHQvLyBXZSB1c2UgZXhlY1NjcmlwdCBvbiBJbnRlcm5ldCBFeHBsb3JlclxuXHRcdFx0Ly8gV2UgdXNlIGFuIGFub255bW91cyBmdW5jdGlvbiBzbyB0aGF0IGNvbnRleHQgaXMgd2luZG93XG5cdFx0XHQvLyByYXRoZXIgdGhhbiBqUXVlcnkgaW4gRmlyZWZveFxuXHRcdFx0KCB3aW5kb3cuZXhlY1NjcmlwdCB8fCBmdW5jdGlvbiggZGF0YSApIHtcblx0XHRcdFx0d2luZG93WyBcImV2YWxcIiBdLmNhbGwoIHdpbmRvdywgZGF0YSApO1xuXHRcdFx0fSApKCBkYXRhICk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcblx0Ly8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuXHRjYW1lbENhc2U6IGZ1bmN0aW9uKCBzdHJpbmcgKSB7XG5cdFx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG5cdH0sXG5cblx0bm9kZU5hbWU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHR9LFxuXG5cdC8vIGFyZ3MgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdFx0dmFyIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoLFxuXHRcdFx0aXNBcnJheSA9IGlzQXJyYXlsaWtlKCBvYmogKTtcblxuXHRcdGlmICggYXJncyApIHtcblx0XHRcdGlmICggaXNBcnJheSApIHtcblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjay5hcHBseSggb2JqWyBpIF0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrLmFwcGx5KCBvYmpbIGkgXSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEEgc3BlY2lhbCwgZmFzdCwgY2FzZSBmb3IgdGhlIG1vc3QgY29tbW9uIHVzZSBvZiBlYWNoXG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggaXNBcnJheSApIHtcblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKTtcblxuXHRcdFx0XHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xLCBJRTw5XG5cdHRyaW06IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFx0XCJcIiA6XG5cdFx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlsaWtlKCBPYmplY3QoYXJyKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHZhciBsZW47XG5cblx0XHRpZiAoIGFyciApIHtcblx0XHRcdGlmICggaW5kZXhPZiApIHtcblx0XHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdFx0XHR9XG5cblx0XHRcdGxlbiA9IGFyci5sZW5ndGg7XG5cdFx0XHRpID0gaSA/IGkgPCAwID8gTWF0aC5tYXgoIDAsIGxlbiArIGkgKSA6IGkgOiAwO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Ly8gU2tpcCBhY2Nlc3NpbmcgaW4gc3BhcnNlIGFycmF5c1xuXHRcdFx0XHRpZiAoIGkgaW4gYXJyICYmIGFyclsgaSBdID09PSBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcblx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXG5cdFx0XHRqID0gMCxcblx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XG5cblx0XHR3aGlsZSAoIGogPCBsZW4gKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGorKyBdO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBXb3JrYXJvdW5kIGNhc3Rpbmcgb2YgLmxlbmd0aCB0byBOYU4gb24gb3RoZXJ3aXNlIGFycmF5bGlrZSBvYmplY3RzIChlLmcuLCBOb2RlTGlzdHMpXG5cdFx0aWYgKCBsZW4gIT09IGxlbiApIHtcblx0XHRcdHdoaWxlICggc2Vjb25kW2pdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaisrIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0aXNBcnJheSA9IGlzQXJyYXlsaWtlKCBlbGVtcyApLFxuXHRcdFx0cmV0ID0gW107XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xuXHRcdGlmICggaXNBcnJheSApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG5cdC8vIGFyZ3VtZW50cy5cblx0cHJveHk6IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0XHR2YXIgYXJncywgcHJveHksIHRtcDtcblxuXHRcdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdFx0Y29udGV4dCA9IGZuO1xuXHRcdFx0Zm4gPSB0bXA7XG5cdFx0fVxuXG5cdFx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0XHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBTaW11bGF0ZWQgYmluZFxuXHRcdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0XHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdFx0fTtcblxuXHRcdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRcdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdFx0cmV0dXJuIHByb3h5O1xuXHR9LFxuXG5cdG5vdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuICsoIG5ldyBEYXRlKCkgKTtcblx0fSxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSk7XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yXCIuc3BsaXQoXCIgXCIpLCBmdW5jdGlvbihpLCBuYW1lKSB7XG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xufSk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlsaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogaU9TIDguMiAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcblx0dmFyIGxlbmd0aCA9IFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXG5cdFx0dHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblxuXHRpZiAoIHR5cGUgPT09IFwiZnVuY3Rpb25cIiB8fCBqUXVlcnkuaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggb2JqLm5vZGVUeXBlID09PSAxICYmIGxlbmd0aCApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4yLjAtcHJlXG4gKiBodHRwOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCAyMDA4LCAyMDE0IGpRdWVyeSBGb3VuZGF0aW9uLCBJbmMuIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cDovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTQtMTItMTZcbiAqL1xuKGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG5cbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEdlbmVyYWwtcHVycG9zZSBjb25zdGFudHNcblx0TUFYX05FR0FUSVZFID0gMSA8PCAzMSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICh7fSkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoX25hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cDovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFtpXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gV2hpdGVzcGFjZSBjaGFyYWN0ZXJzIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc3ludGF4LyNjaGFyYWN0ZXJzXG5cdGNoYXJhY3RlckVuY29kaW5nID0gXCIoPzpcXFxcXFxcXC58W1xcXFx3LV18W15cXFxceDAwLVxcXFx4YTBdKStcIixcblxuXHQvLyBMb29zZWx5IG1vZGVsZWQgb24gQ1NTIGlkZW50aWZpZXIgY2hhcmFjdGVyc1xuXHQvLyBBbiB1bnF1b3RlZCB2YWx1ZSBzaG91bGQgYmUgYSBDU1MgaWRlbnRpZmllciBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHQvLyBQcm9wZXIgc3ludGF4OiBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjdmFsdWUtZGVmLWlkZW50aWZpZXJcblx0aWRlbnRpZmllciA9IGNoYXJhY3RlckVuY29kaW5nLnJlcGxhY2UoIFwid1wiLCBcIncjXCIgKSxcblxuXHQvLyBBdHRyaWJ1dGUgc2VsZWN0b3JzOiBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2F0dHJpYnV0ZS1zZWxlY3RvcnNcblx0YXR0cmlidXRlcyA9IFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooXCIgKyBjaGFyYWN0ZXJFbmNvZGluZyArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGNoYXJhY3RlckVuY29kaW5nICsgXCIpKD86XFxcXCgoXCIgK1xuXHRcdC8vIFRvIHJlZHVjZSB0aGUgbnVtYmVyIG9mIHNlbGVjdG9ycyBuZWVkaW5nIHRva2VuaXplIGluIHRoZSBwcmVGaWx0ZXIsIHByZWZlciBhcmd1bWVudHM6XG5cdFx0Ly8gMS4gcXVvdGVkIChjYXB0dXJlIDM7IGNhcHR1cmUgNCBvciBjYXB0dXJlIDUpXG5cdFx0XCIoJygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwiKXxcIiArXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArIHdoaXRlc3BhY2UgKyBcIiskXCIsIFwiZ1wiICksXG5cblx0cmNvbW1hID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqLFwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJjb21iaW5hdG9ycyA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKihbPit+XXxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXG5cdHJhdHRyaWJ1dGVRdW90ZXMgPSBuZXcgUmVnRXhwKCBcIj1cIiArIHdoaXRlc3BhY2UgKyBcIiooW15cXFxcXSdcXFwiXSo/KVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsIFwiZ1wiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBjaGFyYWN0ZXJFbmNvZGluZyArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGNoYXJhY3RlckVuY29kaW5nICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBjaGFyYWN0ZXJFbmNvZGluZy5yZXBsYWNlKCBcIndcIiwgXCJ3KlwiICkgKyBcIilcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXHRcdC8vIEZvciB1c2UgaW4gbGlicmFyaWVzIGltcGxlbWVudGluZyAuaXMoKVxuXHRcdC8vIFdlIHVzZSB0aGlzIGZvciBQT1MgbWF0Y2hpbmcgaW4gYHNlbGVjdGBcblx0XHRcIm5lZWRzQ29udGV4dFwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblx0cmVzY2FwZSA9IC8nfFxcXFwvZyxcblxuXHQvLyBDU1MgZXNjYXBlcyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFwoW1xcXFxkYS1mXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICsgXCI/fChcIiArIHdoaXRlc3BhY2UgKyBcIil8LilcIiwgXCJpZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBfLCBlc2NhcGVkLCBlc2NhcGVkV2hpdGVzcGFjZSApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZWQgLSAweDEwMDAwO1xuXHRcdC8vIE5hTiBtZWFucyBub24tY29kZXBvaW50XG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyNFxuXHRcdC8vIFdvcmthcm91bmQgZXJyb25lb3VzIG51bWVyaWMgaW50ZXJwcmV0YXRpb24gb2YgK1wiMHhcIlxuXHRcdHJldHVybiBoaWdoICE9PSBoaWdoIHx8IGVzY2FwZWRXaGl0ZXNwYWNlID9cblx0XHRcdGVzY2FwZWQgOlxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHQvLyBCTVAgY29kZXBvaW50XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHQvLyBTdXBwbGVtZW50YWwgUGxhbmUgY29kZXBvaW50IChzdXJyb2dhdGUgcGFpcilcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUVcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH07XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdChhcnIgPSBzbGljZS5jYWxsKCBwcmVmZXJyZWREb2MuY2hpbGROb2RlcyApKSxcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHQpO1xuXHQvLyBTdXBwb3J0OiBBbmRyb2lkPDQuMFxuXHQvLyBEZXRlY3Qgc2lsZW50bHkgZmFpbGluZyBwdXNoLmFwcGx5XG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoX25hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKGVscykgKTtcblx0XHR9IDpcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBPdGhlcndpc2UgYXBwZW5kIGRpcmVjdGx5XG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0dmFyIGogPSB0YXJnZXQubGVuZ3RoLFxuXHRcdFx0XHRpID0gMDtcblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAodGFyZ2V0W2orK10gPSBlbHNbaSsrXSkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG1hdGNoLCBlbGVtLCBtLCBub2RlVHlwZSxcblx0XHQvLyBRU0EgdmFyc1xuXHRcdGksIGdyb3Vwcywgb2xkLCBuaWQsIG5ld0NvbnRleHQsIG5ld1NlbGVjdG9yO1xuXG5cdGlmICggKCBjb250ZXh0ID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBwcmVmZXJyZWREb2MgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXG5cdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblx0bm9kZVR5cGUgPSBjb250ZXh0Lm5vZGVUeXBlO1xuXG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0aWYgKCAhc2VlZCAmJiBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgd2hlbiBwb3NzaWJsZSAoZS5nLiwgbm90IHVuZGVyIERvY3VtZW50RnJhZ21lbnQpXG5cdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHtcblx0XHRcdC8vIFNwZWVkLXVwOiBTaXp6bGUoXCIjSURcIilcblx0XHRcdGlmICggKG0gPSBtYXRjaFsxXSkgKSB7XG5cdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKTtcblx0XHRcdFx0XHQvLyBDaGVjayBwYXJlbnROb2RlIHRvIGNhdGNoIHdoZW4gQmxhY2tiZXJyeSA0LjYgcmV0dXJuc1xuXHRcdFx0XHRcdC8vIG5vZGVzIHRoYXQgYXJlIG5vIGxvbmdlciBpbiB0aGUgZG9jdW1lbnQgKGpRdWVyeSAjNjk2Mylcblx0XHRcdFx0XHRpZiAoIGVsZW0gJiYgZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBjYXNlIHdoZXJlIElFLCBPcGVyYSwgYW5kIFdlYmtpdCByZXR1cm4gaXRlbXNcblx0XHRcdFx0XHRcdC8vIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyBDb250ZXh0IGlzIG5vdCBhIGRvY3VtZW50XG5cdFx0XHRcdFx0aWYgKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgJiYgKGVsZW0gPSBjb250ZXh0Lm93bmVyRG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiZcblx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiYgZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFNwZWVkLXVwOiBTaXp6bGUoXCJUQUdcIilcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzJdICkge1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBTcGVlZC11cDogU2l6emxlKFwiLkNMQVNTXCIpXG5cdFx0XHR9IGVsc2UgaWYgKCAobSA9IG1hdGNoWzNdKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFFTQSBwYXRoXG5cdFx0aWYgKCBzdXBwb3J0LnFzYSAmJiAoIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkpICkge1xuXHRcdFx0bmlkID0gb2xkID0gZXhwYW5kbztcblx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXHRcdFx0bmV3U2VsZWN0b3IgPSBub2RlVHlwZSAhPT0gMSAmJiBzZWxlY3RvcjtcblxuXHRcdFx0Ly8gcVNBIHdvcmtzIHN0cmFuZ2VseSBvbiBFbGVtZW50LXJvb3RlZCBxdWVyaWVzXG5cdFx0XHQvLyBXZSBjYW4gd29yayBhcm91bmQgdGhpcyBieSBzcGVjaWZ5aW5nIGFuIGV4dHJhIElEIG9uIHRoZSByb290XG5cdFx0XHQvLyBhbmQgd29ya2luZyB1cCBmcm9tIHRoZXJlIChUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhlIHRlY2huaXF1ZSlcblx0XHRcdC8vIElFIDggZG9lc24ndCB3b3JrIG9uIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gMSAmJiBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXG5cdFx0XHRcdGlmICggKG9sZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKFwiaWRcIikpICkge1xuXHRcdFx0XHRcdG5pZCA9IG9sZC5yZXBsYWNlKCByZXNjYXBlLCBcIlxcXFwkJlwiICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgbmlkICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0bmlkID0gXCJbaWQ9J1wiICsgbmlkICsgXCInXSBcIjtcblxuXHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0Z3JvdXBzW2ldID0gbmlkICsgdG9TZWxlY3RvciggZ3JvdXBzW2ldICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHQ7XG5cdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oXCIsXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG5ld1NlbGVjdG9yICkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9IGNhdGNoKHFzYUVycm9yKSB7XG5cdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0aWYgKCAhb2xkICkge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoXCJpZFwiKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge0Z1bmN0aW9uKHN0cmluZywgT2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuIChjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBkaXYgYW5kIGV4cGVjdHMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBkaXYgKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGRpdi5wYXJlbnROb2RlICkge1xuXHRcdFx0ZGl2LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGRpdiApO1xuXHRcdH1cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGRpdiA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KFwifFwiKSxcblx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyW2ldIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdCggfmIuc291cmNlSW5kZXggfHwgTUFYX05FR0FUSVZFICkgLVxuXHRcdFx0KCB+YS5zb3VyY2VJbmRleCB8fCBNQVhfTkVHQVRJVkUgKTtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLm5leHRTaWJsaW5nKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAobmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIpICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcblx0XHRcdFx0XHRzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHQvLyBkb2N1bWVudEVsZW1lbnQgaXMgdmVyaWZpZWQgZm9yIGNhc2VzIHdoZXJlIGl0IGRvZXNuJ3QgeWV0IGV4aXN0XG5cdC8vIChzdWNoIGFzIGxvYWRpbmcgaWZyYW1lcyBpbiBJRSAtICM0ODMzKVxuXHR2YXIgZG9jdW1lbnRFbGVtZW50ID0gZWxlbSAmJiAoZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0pLmRvY3VtZW50RWxlbWVudDtcblx0cmV0dXJuIGRvY3VtZW50RWxlbWVudCA/IGRvY3VtZW50RWxlbWVudC5ub2RlTmFtZSAhPT0gXCJIVE1MXCIgOiBmYWxzZTtcbn07XG5cbi8qKlxuICogU2V0cyBkb2N1bWVudC1yZWxhdGVkIHZhcmlhYmxlcyBvbmNlIGJhc2VkIG9uIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBbZG9jXSBBbiBlbGVtZW50IG9yIGRvY3VtZW50IG9iamVjdCB0byB1c2UgdG8gc2V0IHRoZSBkb2N1bWVudFxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY3VycmVudCBkb2N1bWVudFxuICovXG5zZXREb2N1bWVudCA9IFNpenpsZS5zZXREb2N1bWVudCA9IGZ1bmN0aW9uKCBub2RlICkge1xuXHR2YXIgaGFzQ29tcGFyZSwgcGFyZW50LFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYztcblxuXHQvLyBJZiBubyBkb2N1bWVudCBhbmQgZG9jdW1lbnRFbGVtZW50IGlzIGF2YWlsYWJsZSwgcmV0dXJuXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gU2V0IG91ciBkb2N1bWVudFxuXHRkb2N1bWVudCA9IGRvYztcblx0ZG9jRWxlbSA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdHBhcmVudCA9IGRvYy5kZWZhdWx0VmlldztcblxuXHQvLyBTdXBwb3J0OiBJRT44XG5cdC8vIElmIGlmcmFtZSBkb2N1bWVudCBpcyBhc3NpZ25lZCB0byBcImRvY3VtZW50XCIgdmFyaWFibGUgYW5kIGlmIGlmcmFtZSBoYXMgYmVlbiByZWxvYWRlZCxcblx0Ly8gSUUgd2lsbCB0aHJvdyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3Igd2hlbiBhY2Nlc3NpbmcgXCJkb2N1bWVudFwiIHZhcmlhYmxlLCBzZWUgalF1ZXJ5ICMxMzkzNlxuXHQvLyBJRTYtOCBkbyBub3Qgc3VwcG9ydCB0aGUgZGVmYXVsdFZpZXcgcHJvcGVydHkgc28gcGFyZW50IHdpbGwgYmUgdW5kZWZpbmVkXG5cdGlmICggcGFyZW50ICYmIHBhcmVudCAhPT0gcGFyZW50LnRvcCApIHtcblx0XHQvLyBJRTExIGRvZXMgbm90IGhhdmUgYXR0YWNoRXZlbnQsIHNvIGFsbCBtdXN0IHN1ZmZlclxuXHRcdGlmICggcGFyZW50LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRwYXJlbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJ1bmxvYWRcIiwgdW5sb2FkSGFuZGxlciwgZmFsc2UgKTtcblx0XHR9IGVsc2UgaWYgKCBwYXJlbnQuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRwYXJlbnQuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8qIFN1cHBvcnQgdGVzdHNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jICk7XG5cblx0LyogQXR0cmlidXRlc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gU3VwcG9ydDogSUU8OFxuXHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXNcblx0Ly8gKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdGRpdi5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWRpdi5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIik7XG5cdH0pO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdGRpdi5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUNvbW1lbnQoXCJcIikgKTtcblx0XHRyZXR1cm4gIWRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jLmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTwxMFxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50QnlJZCByZXR1cm5zIGVsZW1lbnRzIGJ5IG5hbWVcblx0Ly8gVGhlIGJyb2tlbiBnZXRFbGVtZW50QnlJZCBtZXRob2RzIGRvbid0IHBpY2sgdXAgcHJvZ3JhbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGRpdiApLmlkID0gZXhwYW5kbztcblx0XHRyZXR1cm4gIWRvYy5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jLmdldEVsZW1lbnRzQnlOYW1lKCBleHBhbmRvICkubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBJRCBmaW5kIGFuZCBmaWx0ZXJcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdC8vIENoZWNrIHBhcmVudE5vZGUgdG8gY2F0Y2ggd2hlbiBCbGFja2JlcnJ5IDQuNiByZXR1cm5zXG5cdFx0XHRcdC8vIG5vZGVzIHRoYXQgYXJlIG5vIGxvbmdlciBpbiB0aGUgZG9jdW1lbnQgIzY5NjNcblx0XHRcdFx0cmV0dXJuIG0gJiYgbS5wYXJlbnROb2RlID8gWyBtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwiaWRcIikgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHQvLyBTdXBwb3J0OiBJRTYvN1xuXHRcdC8vIGdldEVsZW1lbnRCeUlkIGlzIG5vdCByZWxpYWJsZSBhcyBhIGZpbmQgc2hvcnRjdXRcblx0XHRkZWxldGUgRXhwci5maW5kW1wiSURcIl07XG5cblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gIGZ1bmN0aW9uKCBpZCApIHtcblx0XHRcdHZhciBhdHRySWQgPSBpZC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZU5vZGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbXCJUQUdcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHQvLyBCeSBoYXBweSBjb2luY2lkZW5jZSwgYSAoYnJva2VuKSBnRUJUTiBhcHBlYXJzIG9uIERvY3VtZW50RnJhZ21lbnQgbm9kZXMgdG9vXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFtcIkNMQVNTXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMzM3OFxuXHRyYnVnZ3lRU0EgPSBbXTtcblxuXHRpZiAoIChzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jLnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZGl2ICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxmXScgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlsqXiRdPVwiICsgd2hpdGVzcGFjZSArIFwiKig/OicnfFxcXCJcXFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGFuZCBcInZhbHVlXCIgYXJlIG5vdCB0cmVhdGVkIGNvcnJlY3RseVxuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbc2VsZWN0ZWRdXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuMissIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS43K1xuXHRcdFx0aWYgKCAhZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW2lkfj1cIiArIGV4cGFuZG8gKyBcIi1dXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwifj1cIik7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFdlYmtpdC9PcGVyYSAtIDpjaGVja2VkIHNob3VsZCByZXR1cm4gc2VsZWN0ZWQgb3B0aW9uIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggIWRpdi5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaChcIjpjaGVja2VkXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCssIGlPUyA4K1xuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNjg1MVxuXHRcdFx0Ly8gSW4tcGFnZSBgc2VsZWN0b3IjaWQgc2liaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbCggXCJhI1wiICsgZXhwYW5kbyArIFwiKypcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIuIy4rWyt+XVwiKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvYy5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIsLio6XCIpO1xuXHRcdH0pO1xuXHR9XG5cblx0aWYgKCAoc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoIChtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IpICkpICkge1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBkaXYsIFwiZGl2XCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBkaXYsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKFwifFwiKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKFwifFwiKSApO1xuXG5cdC8qIENvbnRhaW5zXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xuXG5cdC8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlclxuXHQvLyBQdXJwb3NlZnVsbHkgZG9lcyBub3QgaW1wbGVtZW50IGluY2x1c2l2ZSBkZXNjZW5kZW50XG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkpO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoIChiID0gYi5wYXJlbnROb2RlKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCghc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHRpZiAoIGEgPT09IGRvYyB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGIgPT09IGRvYyB8fCBiLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGIpICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0Ly8gRXhpdCBlYXJseSBpZiB0aGUgbm9kZXMgYXJlIGlkZW50aWNhbFxuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdXAgPSBhLnBhcmVudE5vZGUsXG5cdFx0XHRidXAgPSBiLnBhcmVudE5vZGUsXG5cdFx0XHRhcCA9IFsgYSBdLFxuXHRcdFx0YnAgPSBbIGIgXTtcblxuXHRcdC8vIFBhcmVudGxlc3Mgbm9kZXMgYXJlIGVpdGhlciBkb2N1bWVudHMgb3IgZGlzY29ubmVjdGVkXG5cdFx0aWYgKCAhYXVwIHx8ICFidXAgKSB7XG5cdFx0XHRyZXR1cm4gYSA9PT0gZG9jID8gLTEgOlxuXHRcdFx0XHRiID09PSBkb2MgPyAxIDpcblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbaV0sIGJwW2ldICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2M7XG59O1xuXG5TaXp6bGUubWF0Y2hlcyA9IGZ1bmN0aW9uKCBleHByLCBlbGVtZW50cyApIHtcblx0cmV0dXJuIFNpenpsZSggZXhwciwgbnVsbCwgbnVsbCwgZWxlbWVudHMgKTtcbn07XG5cblNpenpsZS5tYXRjaGVzU2VsZWN0b3IgPSBmdW5jdGlvbiggZWxlbSwgZXhwciApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0Ly8gTWFrZSBzdXJlIHRoYXQgYXR0cmlidXRlIHNlbGVjdG9ycyBhcmUgcXVvdGVkXG5cdGV4cHIgPSBleHByLnJlcGxhY2UoIHJhdHRyaWJ1dGVRdW90ZXMsIFwiPSckMSddXCIgKTtcblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblx0XHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGUpIHt9XG5cdH1cblxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAobm9kZSA9IGVsZW1baSsrXSkgKSB7XG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFszXSA9ICggbWF0Y2hbM10gfHwgbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbMl0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbM10gPSBcIiBcIiArIG1hdGNoWzNdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbMV0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbNF0gPSArKCBtYXRjaFs0XSA/IG1hdGNoWzVdICsgKG1hdGNoWzZdIHx8IDEpIDogMiAqICggbWF0Y2hbM10gPT09IFwiZXZlblwiIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0bWF0Y2hbNV0gPSArKCAoIG1hdGNoWzddICsgbWF0Y2hbOF0gKSB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbNl0gJiYgbWF0Y2hbMl07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByW1wiQ0hJTERcIl0udGVzdCggbWF0Y2hbMF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRtYXRjaFsyXSA9IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApKSAmJlxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWzJdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdChwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSkgJiZcblx0XHRcdFx0Y2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KCB0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiApO1xuXHRcdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIGFyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIGRpZmYsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID8gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDogbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gcGFyZW50WyBleHBhbmRvIF0gfHwgKHBhcmVudFsgZXhwYW5kbyBdID0ge30pO1xuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IG91dGVyQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbMF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbMV07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBjYWNoZVswXSA9PT0gZGlycnVucyAmJiBjYWNoZVsyXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB1c2VDYWNoZSAmJiAoY2FjaGUgPSAoZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSkpWyB0eXBlIF0pICYmIGNhY2hlWzBdID09PSBkaXJydW5zICkge1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gY2FjaGVbMV07XG5cblx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLikgb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgPyBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOiBub2RlLm5vZGVUeXBlID09PSAxICkgJiYgKytkaWZmICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0KG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pKVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZiggc2VlZCwgbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFtpXSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXHRcdC8vIFBvdGVudGlhbGx5IGNvbXBsZXggcHNldWRvc1xuXHRcdFwibm90XCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHQvLyBUcmltIHRoZSBzZWxlY3RvciBwYXNzZWQgdG8gY29tcGlsZVxuXHRcdFx0Ly8gdG8gYXZvaWQgdHJlYXRpbmcgbGVhZGluZyBhbmQgdHJhaWxpbmdcblx0XHRcdC8vIHNwYWNlcyBhcyBjb21iaW5hdG9yc1xuXHRcdFx0dmFyIGlucHV0ID0gW10sXG5cdFx0XHRcdHJlc3VsdHMgPSBbXSxcblx0XHRcdFx0bWF0Y2hlciA9IGNvbXBpbGUoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSApO1xuXG5cdFx0XHRyZXR1cm4gbWF0Y2hlclsgZXhwYW5kbyBdID9cblx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdFx0XHR1bm1hdGNoZWQgPSBtYXRjaGVyKCBzZWVkLCBudWxsLCB4bWwsIFtdICksXG5cdFx0XHRcdFx0XHRpID0gc2VlZC5sZW5ndGg7XG5cblx0XHRcdFx0XHQvLyBNYXRjaCBlbGVtZW50cyB1bm1hdGNoZWQgYnkgYG1hdGNoZXJgXG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0c2VlZFtpXSA9ICEobWF0Y2hlc1tpXSA9IGVsZW0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdGlucHV0WzBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cdFx0XHRcdFx0Ly8gRG9uJ3Qga2VlcCB0aGUgZWxlbWVudCAoaXNzdWUgIzI5OSlcblx0XHRcdFx0XHRpbnB1dFswXSA9IG51bGw7XG5cdFx0XHRcdFx0cmV0dXJuICFyZXN1bHRzLnBvcCgpO1xuXHRcdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJoYXNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiY29udGFpbnNcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0dGV4dCA9IHRleHQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS50ZXh0Q29udGVudCB8fCBlbGVtLmlubmVyVGV4dCB8fCBnZXRUZXh0KCBlbGVtICkgKS5pbmRleE9mKCB0ZXh0ICkgPiAtMTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXHRcdFx0Ly8gbGFuZyB2YWx1ZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxuXHRcdFx0aWYgKCAhcmlkZW50aWZpZXIudGVzdChsYW5nIHx8IFwiXCIpICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgbGFuZzogXCIgKyBsYW5nICk7XG5cdFx0XHR9XG5cdFx0XHRsYW5nID0gbGFuZy5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBlbGVtTGFuZztcblx0XHRcdFx0ZG8ge1xuXHRcdFx0XHRcdGlmICggKGVsZW1MYW5nID0gZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0XHRcdFx0ZWxlbS5sYW5nIDpcblx0XHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKFwieG1sOmxhbmdcIikgfHwgZWxlbS5nZXRBdHRyaWJ1dGUoXCJsYW5nXCIpKSApIHtcblxuXHRcdFx0XHRcdFx0ZWxlbUxhbmcgPSBlbGVtTGFuZy50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW1MYW5nID09PSBsYW5nIHx8IGVsZW1MYW5nLmluZGV4T2YoIGxhbmcgKyBcIi1cIiApID09PSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSB3aGlsZSAoIChlbGVtID0gZWxlbS5wYXJlbnROb2RlKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHQvLyBNaXNjZWxsYW5lb3VzXG5cdFx0XCJ0YXJnZXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbiAmJiB3aW5kb3cubG9jYXRpb24uaGFzaDtcblx0XHRcdHJldHVybiBoYXNoICYmIGhhc2guc2xpY2UoIDEgKSA9PT0gZWxlbS5pZDtcblx0XHR9LFxuXG5cdFx0XCJyb290XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY0VsZW07XG5cdFx0fSxcblxuXHRcdFwiZm9jdXNcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiAoIWRvY3VtZW50Lmhhc0ZvY3VzIHx8IGRvY3VtZW50Lmhhc0ZvY3VzKCkpICYmICEhKGVsZW0udHlwZSB8fCBlbGVtLmhyZWYgfHwgfmVsZW0udGFiSW5kZXgpO1xuXHRcdH0sXG5cblx0XHQvLyBCb29sZWFuIHByb3BlcnRpZXNcblx0XHRcImVuYWJsZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2U7XG5cdFx0fSxcblxuXHRcdFwiZGlzYWJsZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJjaGVja2VkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gSW4gQ1NTMywgOmNoZWNrZWQgc2hvdWxkIHJldHVybiBib3RoIGNoZWNrZWQgYW5kIHNlbGVjdGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDExL1JFQy1jc3MzLXNlbGVjdG9ycy0yMDExMDkyOS8jY2hlY2tlZFxuXHRcdFx0dmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIChub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmICEhZWxlbS5jaGVja2VkKSB8fCAobm9kZU5hbWUgPT09IFwib3B0aW9uXCIgJiYgISFlbGVtLnNlbGVjdGVkKTtcblx0XHR9LFxuXG5cdFx0XCJzZWxlY3RlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEFjY2Vzc2luZyB0aGlzIHByb3BlcnR5IG1ha2VzIHNlbGVjdGVkLWJ5LWRlZmF1bHRcblx0XHRcdC8vIG9wdGlvbnMgaW4gU2FmYXJpIHdvcmsgcHJvcGVybHlcblx0XHRcdGlmICggZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jZW1wdHktcHNldWRvXG5cdFx0XHQvLyA6ZW1wdHkgaXMgbmVnYXRlZCBieSBlbGVtZW50ICgxKSBvciBjb250ZW50IG5vZGVzICh0ZXh0OiAzOyBjZGF0YTogNDsgZW50aXR5IHJlZjogNSksXG5cdFx0XHQvLyAgIGJ1dCBub3QgYnkgb3RoZXJzIChjb21tZW50OiA4OyBwcm9jZXNzaW5nIGluc3RydWN0aW9uOiA3OyBldGMuKVxuXHRcdFx0Ly8gbm9kZVR5cGUgPCA2IHdvcmtzIGJlY2F1c2UgYXR0cmlidXRlcyAoMikgZG8gbm90IGFwcGVhciBhcyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA8IDYgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0XCJwYXJlbnRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gIUV4cHIucHNldWRvc1tcImVtcHR5XCJdKCBlbGVtICk7XG5cdFx0fSxcblxuXHRcdC8vIEVsZW1lbnQvaW5wdXQgdHlwZXNcblx0XHRcImhlYWRlclwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaGVhZGVyLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJpbnB1dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiByaW5wdXRzLnRlc3QoIGVsZW0ubm9kZU5hbWUgKTtcblx0XHR9LFxuXG5cdFx0XCJidXR0b25cIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSBcImJ1dHRvblwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCI7XG5cdFx0fSxcblxuXHRcdFwidGV4dFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBhdHRyO1xuXHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICYmXG5cdFx0XHRcdGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCIgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw4XG5cdFx0XHRcdC8vIE5ldyBIVE1MNSBhdHRyaWJ1dGUgdmFsdWVzIChlLmcuLCBcInNlYXJjaFwiKSBhcHBlYXIgd2l0aCBlbGVtLnR5cGUgPT09IFwidGV4dFwiXG5cdFx0XHRcdCggKGF0dHIgPSBlbGVtLmdldEF0dHJpYnV0ZShcInR5cGVcIikpID09IG51bGwgfHwgYXR0ci50b0xvd2VyQ2FzZSgpID09PSBcInRleHRcIiApO1xuXHRcdH0sXG5cblx0XHQvLyBQb3NpdGlvbi1pbi1jb2xsZWN0aW9uXG5cdFx0XCJmaXJzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIFsgMCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIFsgbGVuZ3RoIC0gMSBdO1xuXHRcdH0pLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHRyZXR1cm4gWyBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50IF07XG5cdFx0fSksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcIm9kZFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwibHRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyAtLWkgPj0gMDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7ICsraSA8IGxlbmd0aDsgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pXG5cdH1cbn07XG5cbkV4cHIucHNldWRvc1tcIm50aFwiXSA9IEV4cHIucHNldWRvc1tcImVxXCJdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAobWF0Y2ggPSByY29tbWEuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRpZiAoIG1hdGNoICkge1xuXHRcdFx0XHQvLyBEb24ndCBjb25zdW1lIHRyYWlsaW5nIGNvbW1hcyBhcyB2YWxpZFxuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaFswXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAodG9rZW5zID0gW10pICk7XG5cdFx0fVxuXG5cdFx0bWF0Y2hlZCA9IGZhbHNlO1xuXG5cdFx0Ly8gQ29tYmluYXRvcnNcblx0XHRpZiAoIChtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0Ly8gQ2FzdCBkZXNjZW5kYW50IGNvbWJpbmF0b3JzIHRvIHNwYWNlXG5cdFx0XHRcdHR5cGU6IG1hdGNoWzBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9KTtcblx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmlsdGVyc1xuXHRcdGZvciAoIHR5cGUgaW4gRXhwci5maWx0ZXIgKSB7XG5cdFx0XHRpZiAoIChtYXRjaCA9IG1hdGNoRXhwclsgdHlwZSBdLmV4ZWMoIHNvRmFyICkpICYmICghcHJlRmlsdGVyc1sgdHlwZSBdIHx8XG5cdFx0XHRcdChtYXRjaCA9IHByZUZpbHRlcnNbIHR5cGUgXSggbWF0Y2ggKSkpICkge1xuXHRcdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdFx0dG9rZW5zLnB1c2goe1xuXHRcdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdFx0bWF0Y2hlczogbWF0Y2hcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblx0XHRcdC8vIENhY2hlIHRoZSB0b2tlbnNcblx0XHRcdHRva2VuQ2FjaGUoIHNlbGVjdG9yLCBncm91cHMgKS5zbGljZSggMCApO1xufTtcblxuZnVuY3Rpb24gdG9TZWxlY3RvciggdG9rZW5zICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRzZWxlY3RvciA9IFwiXCI7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdHNlbGVjdG9yICs9IHRva2Vuc1tpXS52YWx1ZTtcblx0fVxuXHRyZXR1cm4gc2VsZWN0b3I7XG59XG5cbmZ1bmN0aW9uIGFkZENvbWJpbmF0b3IoIG1hdGNoZXIsIGNvbWJpbmF0b3IsIGJhc2UgKSB7XG5cdHZhciBkaXIgPSBjb21iaW5hdG9yLmRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBkaXIgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCBvdXRlckNhY2hlLFxuXHRcdFx0XHRuZXdDYWNoZSA9IFsgZGlycnVucywgZG9uZU5hbWUgXTtcblxuXHRcdFx0Ly8gV2UgY2FuJ3Qgc2V0IGFyYml0cmFyeSBkYXRhIG9uIFhNTCBub2Rlcywgc28gdGhleSBkb24ndCBiZW5lZml0IGZyb20gZGlyIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pO1xuXHRcdFx0XHRcdFx0aWYgKCAob2xkQ2FjaGUgPSBvdXRlckNhY2hlWyBkaXIgXSkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKG5ld0NhY2hlWyAyIF0gPSBvbGRDYWNoZVsgMiBdKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJldXNlIG5ld2NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZVsgZGlyIF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAobmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1swXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIiwgY29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKGVsZW0gPSB0ZW1wW2ldKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwW2ldIF0gPSAhKG1hdGNoZXJJblsgcG9zdE1hcFtpXSBdID0gZWxlbSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSApIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKG1hdGNoZXJPdXQgPSBbXSksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgJiZcblx0XHRcdFx0XHRcdCh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFtpXSkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbXCIgXCJdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoY2hlY2tDb250ZXh0ID0gY29udGV4dCkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbaV0udHlwZSBdKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1tpXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1tpXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2pdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHRcdHRva2Vucy5zbGljZSggMCwgaSAtIDEgKS5jb25jYXQoeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0pXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAodG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkpICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbXCJUQUdcIl0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9IChkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ICE9PSBkb2N1bWVudCAmJiBjb250ZXh0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gS2VlcCBgaWAgYSBzdHJpbmcgaWYgdGhlcmUgYXJlIG5vIGVsZW1lbnRzIHNvIGBtYXRjaGVkQ291bnRgIHdpbGwgYmUgXCIwMFwiIGJlbG93XG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGJ5RWxlbWVudCAmJiBlbGVtICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBlbGVtZW50TWF0Y2hlcnNbaisrXSkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEodW5tYXRjaGVkW2ldIHx8IHNldE1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbaV0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLCBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvcikgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBubyBzZWVkIGFuZCBvbmx5IG9uZSBncm91cFxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFRha2UgYSBzaG9ydGN1dCBhbmQgc2V0IHRoZSBjb250ZXh0IGlmIHRoZSByb290IHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKHRva2VuID0gdG9rZW5zWzBdKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdFx0c3VwcG9ydC5nZXRCeUlkICYmIGNvbnRleHQubm9kZVR5cGUgPT09IDkgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHRcdFx0RXhwci5yZWxhdGl2ZVsgdG9rZW5zWzFdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kW1wiSURcIl0oIHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZShydW5lc2NhcGUsIGZ1bmVzY2FwZSksIGNvbnRleHQgKSB8fCBbXSApWzBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwcltcIm5lZWRzQ29udGV4dFwiXS50ZXN0KCBzZWxlY3RvciApID8gMCA6IHRva2Vucy5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0b2tlbiA9IHRva2Vuc1tpXTtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgd2UgaGl0IGEgY29tYmluYXRvclxuXHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyAodHlwZSA9IHRva2VuLnR5cGUpIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoZmluZCA9IEV4cHIuZmluZFsgdHlwZSBdKSApIHtcblx0XHRcdFx0Ly8gU2VhcmNoLCBleHBhbmRpbmcgY29udGV4dCBmb3IgbGVhZGluZyBzaWJsaW5nIGNvbWJpbmF0b3JzXG5cdFx0XHRcdGlmICggKHNlZWQgPSBmaW5kKFxuXHRcdFx0XHRcdHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKSxcblx0XHRcdFx0XHRyc2libGluZy50ZXN0KCB0b2tlbnNbMF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdFx0XHRcdCkpICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgc2VlZCBpcyBlbXB0eSBvciBubyB0b2tlbnMgcmVtYWluLCB3ZSBjYW4gcmV0dXJuIGVhcmx5XG5cdFx0XHRcdFx0dG9rZW5zLnNwbGljZSggaSwgMSApO1xuXHRcdFx0XHRcdHNlbGVjdG9yID0gc2VlZC5sZW5ndGggJiYgdG9TZWxlY3RvciggdG9rZW5zICk7XG5cdFx0XHRcdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZWVkICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENvbXBpbGUgYW5kIGV4ZWN1dGUgYSBmaWx0ZXJpbmcgZnVuY3Rpb24gaWYgb25lIGlzIG5vdCBwcm92aWRlZFxuXHQvLyBQcm92aWRlIGBtYXRjaGAgdG8gYXZvaWQgcmV0b2tlbml6YXRpb24gaWYgd2UgbW9kaWZpZWQgdGhlIHNlbGVjdG9yIGFib3ZlXG5cdCggY29tcGlsZWQgfHwgY29tcGlsZSggc2VsZWN0b3IsIG1hdGNoICkgKShcblx0XHRzZWVkLFxuXHRcdGNvbnRleHQsXG5cdFx0IWRvY3VtZW50SXNIVE1MLFxuXHRcdHJlc3VsdHMsXG5cdFx0cnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHQpO1xuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8vIE9uZS10aW1lIGFzc2lnbm1lbnRzXG5cbi8vIFNvcnQgc3RhYmlsaXR5XG5zdXBwb3J0LnNvcnRTdGFibGUgPSBleHBhbmRvLnNwbGl0KFwiXCIpLnNvcnQoIHNvcnRPcmRlciApLmpvaW4oXCJcIikgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYxICkge1xuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGRpdjEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgKSAmIDE7XG59KTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRkaXYuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG5cdHJldHVybiBkaXYuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiA7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRkaXYuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xuXHRkaXYuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZGl2LmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRyZXR1cm4gZGl2LmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpID09IG51bGw7XG59KSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9KTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5qUXVlcnkuZXhwcltcIjpcIl0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcblxuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG52YXIgcnNpbmdsZVRhZyA9ICgvXjwoXFx3KylcXHMqXFwvPz4oPzo8XFwvXFwxPnwpJC8pO1xuXG5cblxudmFyIHJpc1NpbXBsZSA9IC9eLlteOiNcXFtcXC4sXSokLztcblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0pO1xuXG5cdH1cblxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSk7XG5cblx0fVxuXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRpZiAoIHJpc1NpbXBsZS50ZXN0KCBxdWFsaWZpZXIgKSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcblx0XHR9XG5cblx0XHRxdWFsaWZpZXIgPSBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzICk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gKCBqUXVlcnkuaW5BcnJheSggZWxlbSwgcXVhbGlmaWVyICkgPj0gMCApICE9PSBub3Q7XG5cdH0pO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0cmV0dXJuIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxID9cblx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW10gOlxuXHRcdGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0XHR9KSk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRzZWxmID0gdGhpcyxcblx0XHRcdGxlbiA9IHNlbGYubGVuZ3RoO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KSApO1xuXHRcdH1cblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0Ly8gTmVlZGVkIGJlY2F1c2UgJCggc2VsZWN0b3IsIGNvbnRleHQgKSBiZWNvbWVzICQoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlKCByZXQgKSA6IHJldCApO1xuXHRcdHJldC5zZWxlY3RvciA9IHRoaXMuc2VsZWN0b3IgPyB0aGlzLnNlbGVjdG9yICsgXCIgXCIgKyBzZWxlY3RvciA6IHNlbGVjdG9yO1xuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3codGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUpICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIFVzZSB0aGUgY29ycmVjdCBkb2N1bWVudCBhY2NvcmRpbmdseSB3aXRoIHdpbmRvdyBhcmd1bWVudCAoc2FuZGJveClcblx0ZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQsXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSopKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3IuY2hhckF0KDApID09PSBcIjxcIiAmJiBzZWxlY3Rvci5jaGFyQXQoIHNlbGVjdG9yLmxlbmd0aCAtIDEgKSA9PT0gXCI+XCIgJiYgc2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAobWF0Y2hbMV0gfHwgIWNvbnRleHQpICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWzFdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFswXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsxXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsxXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsyXSApO1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgcGFyZW50Tm9kZSB0byBjYXRjaCB3aGVuIEJsYWNrYmVycnkgNC42IHJldHVybnNcblx0XHRcdFx0XHQvLyBub2RlcyB0aGF0IGFyZSBubyBsb25nZXIgaW4gdGhlIGRvY3VtZW50ICM2OTYzXG5cdFx0XHRcdFx0aWYgKCBlbGVtICYmIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSBJRSBhbmQgT3BlcmEgcmV0dXJuIGl0ZW1zXG5cdFx0XHRcdFx0XHQvLyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCAhPT0gbWF0Y2hbMl0gKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByb290alF1ZXJ5LmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgd2UgaW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHRcdHRoaXNbMF0gPSBlbGVtO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRoaXMuY29udGV4dCA9IGRvY3VtZW50O1xuXHRcdFx0XHRcdHRoaXMuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdGpRdWVyeSApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXMuY29udGV4dCA9IHRoaXNbMF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHR5cGVvZiByb290alF1ZXJ5LnJlYWR5ICE9PSBcInVuZGVmaW5lZFwiID9cblx0XHRcdFx0cm9vdGpRdWVyeS5yZWFkeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3Iuc2VsZWN0b3IgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHRoaXMuc2VsZWN0b3IgPSBzZWxlY3Rvci5zZWxlY3Rvcjtcblx0XHRcdHRoaXMuY29udGV4dCA9IHNlbGVjdG9yLmNvbnRleHQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblx0Ly8gbWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmV4dGVuZCh7XG5cdGRpcjogZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHRcdGN1ciA9IGVsZW1bIGRpciBdO1xuXG5cdFx0d2hpbGUgKCBjdXIgJiYgY3VyLm5vZGVUeXBlICE9PSA5ICYmICh1bnRpbCA9PT0gdW5kZWZpbmVkIHx8IGN1ci5ub2RlVHlwZSAhPT0gMSB8fCAhalF1ZXJ5KCBjdXIgKS5pcyggdW50aWwgKSkgKSB7XG5cdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdH1cblx0XHRcdGN1ciA9IGN1cltkaXJdO1xuXHRcdH1cblx0XHRyZXR1cm4gbWF0Y2hlZDtcblx0fSxcblxuXHRzaWJsaW5nOiBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0XHR2YXIgciA9IFtdO1xuXG5cdFx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcblx0XHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0XHRyLnB1c2goIG4gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcjtcblx0fVxufSk7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHR0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGxlbiA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKCkge1xuXHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbaV0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0cG9zID0gcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSB8fCB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvcnMsIGNvbnRleHQgfHwgdGhpcy5jb250ZXh0ICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0Zm9yICggY3VyID0gdGhpc1tpXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmIChwb3MgP1xuXHRcdFx0XHRcdHBvcy5pbmRleChjdXIpID4gLTEgOlxuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoY3VyLCBzZWxlY3RvcnMpKSApIHtcblxuXHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWUoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcblx0fSxcblxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluXG5cdC8vIHRoZSBtYXRjaGVkIHNldCBvZiBlbGVtZW50c1xuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWzBdICYmIHRoaXNbMF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBpbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmluQXJyYXkoIHRoaXNbMF0sIGpRdWVyeSggZWxlbSApICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGpRdWVyeS5pbkFycmF5KFxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bMF0gOiBlbGVtLCB0aGlzICk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuXHRcdFx0alF1ZXJ5LnVuaXF1ZShcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKHNlbGVjdG9yKVxuXHRcdCk7XG5cdH1cbn0pO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0ZG8ge1xuXHRcdGN1ciA9IGN1clsgZGlyIF07XG5cdH0gd2hpbGUgKCBjdXIgJiYgY3VyLm5vZGVUeXBlICE9PSAxICk7XG5cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goe1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5kaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5zaWJsaW5nKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBqUXVlcnkuc2libGluZyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4galF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcImlmcmFtZVwiICkgP1xuXHRcdFx0ZWxlbS5jb250ZW50RG9jdW1lbnQgfHwgZWxlbS5jb250ZW50V2luZG93LmRvY3VtZW50IDpcblx0XHRcdGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRyZXQgPSBqUXVlcnkudW5pcXVlKCByZXQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0cmV0ID0gcmV0LnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSk7XG52YXIgcm5vdHdoaXRlID0gKC9cXFMrL2cpO1xuXG5cblxuLy8gU3RyaW5nIHRvIE9iamVjdCBvcHRpb25zIGZvcm1hdCBjYWNoZVxudmFyIG9wdGlvbnNDYWNoZSA9IHt9O1xuXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lcyBhbmQgc3RvcmUgaW4gY2FjaGVcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSBvcHRpb25zQ2FjaGVbIG9wdGlvbnMgXSA9IHt9O1xuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0KCBvcHRpb25zQ2FjaGVbIG9wdGlvbnMgXSB8fCBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblx0XHQvLyBMYXN0IGZpcmUgdmFsdWUgKGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHMpXG5cdFx0bWVtb3J5LFxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0ZmlyZWQsXG5cdFx0Ly8gRW5kIG9mIHRoZSBsb29wIHdoZW4gZmlyaW5nXG5cdFx0ZmlyaW5nTGVuZ3RoLFxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IHJlbW92ZSBpZiBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXgsXG5cdFx0Ly8gRmlyc3QgY2FsbGJhY2sgdG8gZmlyZSAodXNlZCBpbnRlcm5hbGx5IGJ5IGFkZCBhbmQgZmlyZVdpdGgpXG5cdFx0ZmlyaW5nU3RhcnQsXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cdFx0Ly8gU3RhY2sgb2YgZmlyZSBjYWxscyBmb3IgcmVwZWF0YWJsZSBsaXN0c1xuXHRcdHN0YWNrID0gIW9wdGlvbnMub25jZSAmJiBbXSxcblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0XHRcdG1lbW9yeSA9IG9wdGlvbnMubWVtb3J5ICYmIGRhdGE7XG5cdFx0XHRmaXJlZCA9IHRydWU7XG5cdFx0XHRmaXJpbmdJbmRleCA9IGZpcmluZ1N0YXJ0IHx8IDA7XG5cdFx0XHRmaXJpbmdTdGFydCA9IDA7XG5cdFx0XHRmaXJpbmdMZW5ndGggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IGxpc3QgJiYgZmlyaW5nSW5kZXggPCBmaXJpbmdMZW5ndGg7IGZpcmluZ0luZGV4KysgKSB7XG5cdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggZGF0YVsgMCBdLCBkYXRhWyAxIF0gKSA9PT0gZmFsc2UgJiYgb3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTsgLy8gVG8gcHJldmVudCBmdXJ0aGVyIGNhbGxzIHVzaW5nIGFkZFxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0aWYgKCBzdGFjayApIHtcblx0XHRcdFx0XHRpZiAoIHN0YWNrLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGZpcmUoIHN0YWNrLnNoaWZ0KCkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c2VsZi5kaXNhYmxlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHQvLyBGaXJzdCwgd2Ugc2F2ZSB0aGUgY3VycmVudCBsZW5ndGhcblx0XHRcdFx0XHR2YXIgc3RhcnQgPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHQoZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH0pKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHQvLyBEbyB3ZSBuZWVkIHRvIGFkZCB0aGUgY2FsbGJhY2tzIHRvIHRoZVxuXHRcdFx0XHRcdC8vIGN1cnJlbnQgZmlyaW5nIGJhdGNoP1xuXHRcdFx0XHRcdGlmICggZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nTGVuZ3RoID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0Ly8gV2l0aCBtZW1vcnksIGlmIHdlJ3JlIG5vdCBmaXJpbmcgdGhlblxuXHRcdFx0XHRcdC8vIHdlIHNob3VsZCBjYWxsIHJpZ2h0IGF3YXlcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdTdGFydCA9IHN0YXJ0O1xuXHRcdFx0XHRcdFx0ZmlyZSggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdFx0aWYgKCBmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdMZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRmaXJpbmdMZW5ndGgtLTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/IGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOiAhISggbGlzdCAmJiBsaXN0Lmxlbmd0aCApO1xuXHRcdFx0fSxcblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHRmaXJpbmdMZW5ndGggPSAwO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHQvLyBIYXZlIHRoZSBsaXN0IGRvIG5vdGhpbmcgYW55bW9yZVxuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxpc3QgPSBzdGFjayA9IG1lbW9yeSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gSXMgaXQgZGlzYWJsZWQ/XG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cdFx0XHQvLyBMb2NrIHRoZSBsaXN0IGluIGl0cyBjdXJyZW50IHN0YXRlXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c3RhY2sgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdGlmICggIW1lbW9yeSApIHtcblx0XHRcdFx0XHRzZWxmLmRpc2FibGUoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHQvLyBJcyBpdCBsb2NrZWQ/XG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIXN0YWNrO1xuXHRcdFx0fSxcblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0aWYgKCBsaXN0ICYmICggIWZpcmVkIHx8IHN0YWNrICkgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRpZiAoIGZpcmluZyApIHtcblx0XHRcdFx0XHRcdHN0YWNrLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZmlyZSggYXJncyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxualF1ZXJ5LmV4dGVuZCh7XG5cblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdHZhciB0dXBsZXMgPSBbXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBsaXN0ZW5lciBsaXN0LCBmaW5hbCBzdGF0ZVxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLCBcInJlamVjdGVkXCIgXSxcblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoXCJtZW1vcnlcIikgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0galF1ZXJ5LmlzRnVuY3Rpb24oIGZuc1sgaSBdICkgJiYgZm5zWyBpIF07XG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkWyBkb25lIHwgZmFpbCB8IHByb2dyZXNzIF0gZm9yIGZvcndhcmRpbmcgYWN0aW9ucyB0byBuZXdEZWZlclxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbMV0gXShmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBqUXVlcnkuaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gcHJvbWlzZSA/IG5ld0RlZmVyLnByb21pc2UoKSA6IHRoaXMsIGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9KS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0cHJvbWlzZS5waXBlID0gcHJvbWlzZS50aGVuO1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgMyBdO1xuXG5cdFx0XHQvLyBwcm9taXNlWyBkb25lIHwgZmFpbCB8IHByb2dyZXNzIF0gPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbMV0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdC8vIHN0YXRlID0gWyByZXNvbHZlZCB8IHJlamVjdGVkIF1cblx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXG5cdFx0XHRcdC8vIFsgcmVqZWN0X2xpc3QgfCByZXNvbHZlX2xpc3QgXS5kaXNhYmxlOyBwcm9ncmVzc19saXN0LmxvY2tcblx0XHRcdFx0fSwgdHVwbGVzWyBpIF4gMSBdWyAyIF0uZGlzYWJsZSwgdHVwbGVzWyAyIF1bIDIgXS5sb2NrICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGRlZmVycmVkWyByZXNvbHZlIHwgcmVqZWN0IHwgbm90aWZ5IF1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVswXSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVswXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gcHJvbWlzZSA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbMF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHR9KTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHN1Ym9yZGluYXRlIC8qICwgLi4uLCBzdWJvcmRpbmF0ZU4gKi8gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXHRcdFx0bGVuZ3RoID0gcmVzb2x2ZVZhbHVlcy5sZW5ndGgsXG5cblx0XHRcdC8vIHRoZSBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGxlbmd0aCAhPT0gMSB8fCAoIHN1Ym9yZGluYXRlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBzdWJvcmRpbmF0ZS5wcm9taXNlICkgKSA/IGxlbmd0aCA6IDAsXG5cblx0XHRcdC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWQuIElmIHJlc29sdmVWYWx1ZXMgY29uc2lzdCBvZiBvbmx5IGEgc2luZ2xlIERlZmVycmVkLCBqdXN0IHVzZSB0aGF0LlxuXHRcdFx0ZGVmZXJyZWQgPSByZW1haW5pbmcgPT09IDEgPyBzdWJvcmRpbmF0ZSA6IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cdFx0XHQvLyBVcGRhdGUgZnVuY3Rpb24gZm9yIGJvdGggcmVzb2x2ZSBhbmQgcHJvZ3Jlc3MgdmFsdWVzXG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGksIGNvbnRleHRzLCB2YWx1ZXMgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0Y29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0dmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCB2YWx1ZXMgPT09IHByb2dyZXNzVmFsdWVzICkge1xuXHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggY29udGV4dHMsIHZhbHVlcyApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggISgtLXJlbWFpbmluZykgKSB7XG5cdFx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY29udGV4dHMsIHZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH0sXG5cblx0XHRcdHByb2dyZXNzVmFsdWVzLCBwcm9ncmVzc0NvbnRleHRzLCByZXNvbHZlQ29udGV4dHM7XG5cblx0XHQvLyBhZGQgbGlzdGVuZXJzIHRvIERlZmVycmVkIHN1Ym9yZGluYXRlczsgdHJlYXQgb3RoZXJzIGFzIHJlc29sdmVkXG5cdFx0aWYgKCBsZW5ndGggPiAxICkge1xuXHRcdFx0cHJvZ3Jlc3NWYWx1ZXMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xuXHRcdFx0cHJvZ3Jlc3NDb250ZXh0cyA9IG5ldyBBcnJheSggbGVuZ3RoICk7XG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0ucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXS5wcm9taXNlKClcblx0XHRcdFx0XHRcdC5kb25lKCB1cGRhdGVGdW5jKCBpLCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKSApXG5cdFx0XHRcdFx0XHQuZmFpbCggZGVmZXJyZWQucmVqZWN0IClcblx0XHRcdFx0XHRcdC5wcm9ncmVzcyggdXBkYXRlRnVuYyggaSwgcHJvZ3Jlc3NDb250ZXh0cywgcHJvZ3Jlc3NWYWx1ZXMgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC0tcmVtYWluaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gaWYgd2UncmUgbm90IHdhaXRpbmcgb24gYW55dGhpbmcsIHJlc29sdmUgdGhlIG1hc3RlclxuXHRcdGlmICggIXJlbWFpbmluZyApIHtcblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpO1xuXHR9XG59KTtcblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3Q7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0Ly8gQWRkIHRoZSBjYWxsYmFja1xuXHRqUXVlcnkucmVhZHkucHJvbWlzZSgpLmRvbmUoIGZuICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKHtcblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSG9sZCAob3IgcmVsZWFzZSkgdGhlIHJlYWR5IGV2ZW50XG5cdGhvbGRSZWFkeTogZnVuY3Rpb24oIGhvbGQgKSB7XG5cdFx0aWYgKCBob2xkICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIGJvZHkgZXhpc3RzLCBhdCBsZWFzdCwgaW4gY2FzZSBJRSBnZXRzIGEgbGl0dGxlIG92ZXJ6ZWFsb3VzICh0aWNrZXQgIzU0NDMpLlxuXHRcdGlmICggIWRvY3VtZW50LmJvZHkgKSB7XG5cdFx0XHRyZXR1cm4gc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXG5cdFx0Ly8gVHJpZ2dlciBhbnkgYm91bmQgcmVhZHkgZXZlbnRzXG5cdFx0aWYgKCBqUXVlcnkuZm4udHJpZ2dlckhhbmRsZXIgKSB7XG5cdFx0XHRqUXVlcnkoIGRvY3VtZW50ICkudHJpZ2dlckhhbmRsZXIoIFwicmVhZHlcIiApO1xuXHRcdFx0alF1ZXJ5KCBkb2N1bWVudCApLm9mZiggXCJyZWFkeVwiICk7XG5cdFx0fVxuXHR9XG59KTtcblxuLyoqXG4gKiBDbGVhbi11cCBtZXRob2QgZm9yIGRvbSByZWFkeSBldmVudHNcbiAqL1xuZnVuY3Rpb24gZGV0YWNoKCkge1xuXHRpZiAoIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCwgZmFsc2UgKTtcblx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCwgZmFsc2UgKTtcblxuXHR9IGVsc2Uge1xuXHRcdGRvY3VtZW50LmRldGFjaEV2ZW50KCBcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiLCBjb21wbGV0ZWQgKTtcblx0XHR3aW5kb3cuZGV0YWNoRXZlbnQoIFwib25sb2FkXCIsIGNvbXBsZXRlZCApO1xuXHR9XG59XG5cbi8qKlxuICogVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbiAqL1xuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHQvLyByZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgaXMgZ29vZCBlbm91Z2ggZm9yIHVzIHRvIGNhbGwgdGhlIGRvbSByZWFkeSBpbiBvbGRJRVxuXHRpZiAoIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIgfHwgZXZlbnQudHlwZSA9PT0gXCJsb2FkXCIgfHwgZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiICkge1xuXHRcdGRldGFjaCgpO1xuXHRcdGpRdWVyeS5yZWFkeSgpO1xuXHR9XG59XG5cbmpRdWVyeS5yZWFkeS5wcm9taXNlID0gZnVuY3Rpb24oIG9iaiApIHtcblx0aWYgKCAhcmVhZHlMaXN0ICkge1xuXG5cdFx0cmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cblx0XHQvLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZCBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cblx0XHQvLyB3ZSBvbmNlIHRyaWVkIHRvIHVzZSByZWFkeVN0YXRlIFwiaW50ZXJhY3RpdmVcIiBoZXJlLCBidXQgaXQgY2F1c2VkIGlzc3VlcyBsaWtlIHRoZSBvbmVcblx0XHQvLyBkaXNjb3ZlcmVkIGJ5IENocmlzUyBoZXJlOiBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjI4MiNjb21tZW50OjE1XG5cdFx0aWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgKSB7XG5cdFx0XHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0XHRcdHNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG5cdFx0Ly8gU3RhbmRhcmRzLWJhc2VkIGJyb3dzZXJzIHN1cHBvcnQgRE9NQ29udGVudExvYWRlZFxuXHRcdH0gZWxzZSBpZiAoIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkLCBmYWxzZSApO1xuXG5cdFx0XHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHRcdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQsIGZhbHNlICk7XG5cblx0XHQvLyBJZiBJRSBldmVudCBtb2RlbCBpcyB1c2VkXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIEVuc3VyZSBmaXJpbmcgYmVmb3JlIG9ubG9hZCwgbWF5YmUgbGF0ZSBidXQgc2FmZSBhbHNvIGZvciBpZnJhbWVzXG5cdFx0XHRkb2N1bWVudC5hdHRhY2hFdmVudCggXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiwgY29tcGxldGVkICk7XG5cblx0XHRcdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdFx0XHR3aW5kb3cuYXR0YWNoRXZlbnQoIFwib25sb2FkXCIsIGNvbXBsZXRlZCApO1xuXG5cdFx0XHQvLyBJZiBJRSBhbmQgbm90IGEgZnJhbWVcblx0XHRcdC8vIGNvbnRpbnVhbGx5IGNoZWNrIHRvIHNlZSBpZiB0aGUgZG9jdW1lbnQgaXMgcmVhZHlcblx0XHRcdHZhciB0b3AgPSBmYWxzZTtcblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dG9wID0gd2luZG93LmZyYW1lRWxlbWVudCA9PSBudWxsICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0XHRcdH0gY2F0Y2goZSkge31cblxuXHRcdFx0aWYgKCB0b3AgJiYgdG9wLmRvU2Nyb2xsICkge1xuXHRcdFx0XHQoZnVuY3Rpb24gZG9TY3JvbGxDaGVjaygpIHtcblx0XHRcdFx0XHRpZiAoICFqUXVlcnkuaXNSZWFkeSApIHtcblxuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSB0cmljayBieSBEaWVnbyBQZXJpbmlcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cDovL2phdmFzY3JpcHQubndib3guY29tL0lFQ29udGVudExvYWRlZC9cblx0XHRcdFx0XHRcdFx0dG9wLmRvU2Nyb2xsKFwibGVmdFwiKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gc2V0VGltZW91dCggZG9TY3JvbGxDaGVjaywgNTAgKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gZGV0YWNoIGFsbCBkb20gcmVhZHkgZXZlbnRzXG5cdFx0XHRcdFx0XHRkZXRhY2goKTtcblxuXHRcdFx0XHRcdFx0Ly8gYW5kIGV4ZWN1dGUgYW55IHdhaXRpbmcgZnVuY3Rpb25zXG5cdFx0XHRcdFx0XHRqUXVlcnkucmVhZHkoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZWFkeUxpc3QucHJvbWlzZSggb2JqICk7XG59O1xuXG5cbnZhciBzdHJ1bmRlZmluZWQgPSB0eXBlb2YgdW5kZWZpbmVkO1xuXG5cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gSXRlcmF0aW9uIG92ZXIgb2JqZWN0J3MgaW5oZXJpdGVkIHByb3BlcnRpZXMgYmVmb3JlIGl0cyBvd25cbnZhciBpO1xuZm9yICggaSBpbiBqUXVlcnkoIHN1cHBvcnQgKSApIHtcblx0YnJlYWs7XG59XG5zdXBwb3J0Lm93bkxhc3QgPSBpICE9PSBcIjBcIjtcblxuLy8gTm90ZTogbW9zdCBzdXBwb3J0IHRlc3RzIGFyZSBkZWZpbmVkIGluIHRoZWlyIHJlc3BlY3RpdmUgbW9kdWxlcy5cbi8vIGZhbHNlIHVudGlsIHRoZSB0ZXN0IGlzIHJ1blxuc3VwcG9ydC5pbmxpbmVCbG9ja05lZWRzTGF5b3V0ID0gZmFsc2U7XG5cbi8vIEV4ZWN1dGUgQVNBUCBpbiBjYXNlIHdlIG5lZWQgdG8gc2V0IGJvZHkuc3R5bGUuem9vbVxualF1ZXJ5KGZ1bmN0aW9uKCkge1xuXHQvLyBNaW5pZmllZDogdmFyIGEsYixjLGRcblx0dmFyIHZhbCwgZGl2LCBib2R5LCBjb250YWluZXI7XG5cblx0Ym9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcImJvZHlcIiApWyAwIF07XG5cdGlmICggIWJvZHkgfHwgIWJvZHkuc3R5bGUgKSB7XG5cdFx0Ly8gUmV0dXJuIGZvciBmcmFtZXNldCBkb2NzIHRoYXQgZG9uJ3QgaGF2ZSBhIGJvZHlcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTZXR1cFxuXHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2JvcmRlcjowO3dpZHRoOjA7aGVpZ2h0OjA7dG9wOjA7bGVmdDotOTk5OXB4XCI7XG5cdGJvZHkuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuXHRpZiAoIHR5cGVvZiBkaXYuc3R5bGUuem9vbSAhPT0gc3RydW5kZWZpbmVkICkge1xuXHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHQvLyBDaGVjayBpZiBuYXRpdmVseSBibG9jay1sZXZlbCBlbGVtZW50cyBhY3QgbGlrZSBpbmxpbmUtYmxvY2tcblx0XHQvLyBlbGVtZW50cyB3aGVuIHNldHRpbmcgdGhlaXIgZGlzcGxheSB0byAnaW5saW5lJyBhbmQgZ2l2aW5nXG5cdFx0Ly8gdGhlbSBsYXlvdXRcblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9IFwiZGlzcGxheTppbmxpbmU7bWFyZ2luOjA7Ym9yZGVyOjA7cGFkZGluZzoxcHg7d2lkdGg6MXB4O3pvb206MVwiO1xuXG5cdFx0c3VwcG9ydC5pbmxpbmVCbG9ja05lZWRzTGF5b3V0ID0gdmFsID0gZGl2Lm9mZnNldFdpZHRoID09PSAzO1xuXHRcdGlmICggdmFsICkge1xuXHRcdFx0Ly8gUHJldmVudCBJRSA2IGZyb20gYWZmZWN0aW5nIGxheW91dCBmb3IgcG9zaXRpb25lZCBlbGVtZW50cyAjMTEwNDhcblx0XHRcdC8vIFByZXZlbnQgSUUgZnJvbSBzaHJpbmtpbmcgdGhlIGJvZHkgaW4gSUUgNyBtb2RlICMxMjg2OVxuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0Ym9keS5zdHlsZS56b29tID0gMTtcblx0XHR9XG5cdH1cblxuXHRib2R5LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcbn0pO1xuXG5cblxuXG4oZnVuY3Rpb24oKSB7XG5cdHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRXhlY3V0ZSB0aGUgdGVzdCBvbmx5IGlmIG5vdCBhbHJlYWR5IGV4ZWN1dGVkIGluIGFub3RoZXIgbW9kdWxlLlxuXHRpZiAoc3VwcG9ydC5kZWxldGVFeHBhbmRvID09IG51bGwpIHtcblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0c3VwcG9ydC5kZWxldGVFeHBhbmRvID0gdHJ1ZTtcblx0XHR0cnkge1xuXHRcdFx0ZGVsZXRlIGRpdi50ZXN0O1xuXHRcdH0gY2F0Y2goIGUgKSB7XG5cdFx0XHRzdXBwb3J0LmRlbGV0ZUV4cGFuZG8gPSBmYWxzZTtcblx0XHR9XG5cdH1cblxuXHQvLyBOdWxsIGVsZW1lbnRzIHRvIGF2b2lkIGxlYWtzIGluIElFLlxuXHRkaXYgPSBudWxsO1xufSkoKTtcblxuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciBhbiBvYmplY3QgY2FuIGhhdmUgZGF0YVxuICovXG5qUXVlcnkuYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9EYXRhID0galF1ZXJ5Lm5vRGF0YVsgKGVsZW0ubm9kZU5hbWUgKyBcIiBcIikudG9Mb3dlckNhc2UoKSBdLFxuXHRcdG5vZGVUeXBlID0gK2VsZW0ubm9kZVR5cGUgfHwgMTtcblxuXHQvLyBEbyBub3Qgc2V0IGRhdGEgb24gbm9uLWVsZW1lbnQgRE9NIG5vZGVzIGJlY2F1c2UgaXQgd2lsbCBub3QgYmUgY2xlYXJlZCAoIzgzMzUpLlxuXHRyZXR1cm4gbm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgP1xuXHRcdGZhbHNlIDpcblxuXHRcdC8vIE5vZGVzIGFjY2VwdCBkYXRhIHVubGVzcyBvdGhlcndpc2Ugc3BlY2lmaWVkOyByZWplY3Rpb24gY2FuIGJlIGNvbmRpdGlvbmFsXG5cdFx0IW5vRGF0YSB8fCBub0RhdGEgIT09IHRydWUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc2lkXCIpID09PSBub0RhdGE7XG59O1xuXG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvKFtBLVpdKS9nO1xuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0dmFyIG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJDFcIiApLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZGF0YSA9PT0gXCJ0cnVlXCIgPyB0cnVlIDpcblx0XHRcdFx0XHRkYXRhID09PSBcImZhbHNlXCIgPyBmYWxzZSA6XG5cdFx0XHRcdFx0ZGF0YSA9PT0gXCJudWxsXCIgPyBudWxsIDpcblx0XHRcdFx0XHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRcdFx0XHRcdCtkYXRhICsgXCJcIiA9PT0gZGF0YSA/ICtkYXRhIDpcblx0XHRcdFx0XHRyYnJhY2UudGVzdCggZGF0YSApID8galF1ZXJ5LnBhcnNlSlNPTiggZGF0YSApIDpcblx0XHRcdFx0XHRkYXRhO1xuXHRcdFx0fSBjYXRjaCggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0alF1ZXJ5LmRhdGEoIGVsZW0sIGtleSwgZGF0YSApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbi8vIGNoZWNrcyBhIGNhY2hlIG9iamVjdCBmb3IgZW1wdGluZXNzXG5mdW5jdGlvbiBpc0VtcHR5RGF0YU9iamVjdCggb2JqICkge1xuXHR2YXIgbmFtZTtcblx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cblx0XHQvLyBpZiB0aGUgcHVibGljIGRhdGEgb2JqZWN0IGlzIGVtcHR5LCB0aGUgcHJpdmF0ZSBpcyBzdGlsbCBlbXB0eVxuXHRcdGlmICggbmFtZSA9PT0gXCJkYXRhXCIgJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9ialtuYW1lXSApICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXHRcdGlmICggbmFtZSAhPT0gXCJ0b0pTT05cIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaW50ZXJuYWxEYXRhKCBlbGVtLCBuYW1lLCBkYXRhLCBwdnQgLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdGlmICggIWpRdWVyeS5hY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0dmFyIHJldCwgdGhpc0NhY2hlLFxuXHRcdGludGVybmFsS2V5ID0galF1ZXJ5LmV4cGFuZG8sXG5cblx0XHQvLyBXZSBoYXZlIHRvIGhhbmRsZSBET00gbm9kZXMgYW5kIEpTIG9iamVjdHMgZGlmZmVyZW50bHkgYmVjYXVzZSBJRTYtN1xuXHRcdC8vIGNhbid0IEdDIG9iamVjdCByZWZlcmVuY2VzIHByb3Blcmx5IGFjcm9zcyB0aGUgRE9NLUpTIGJvdW5kYXJ5XG5cdFx0aXNOb2RlID0gZWxlbS5ub2RlVHlwZSxcblxuXHRcdC8vIE9ubHkgRE9NIG5vZGVzIG5lZWQgdGhlIGdsb2JhbCBqUXVlcnkgY2FjaGU7IEpTIG9iamVjdCBkYXRhIGlzXG5cdFx0Ly8gYXR0YWNoZWQgZGlyZWN0bHkgdG8gdGhlIG9iamVjdCBzbyBHQyBjYW4gb2NjdXIgYXV0b21hdGljYWxseVxuXHRcdGNhY2hlID0gaXNOb2RlID8galF1ZXJ5LmNhY2hlIDogZWxlbSxcblxuXHRcdC8vIE9ubHkgZGVmaW5pbmcgYW4gSUQgZm9yIEpTIG9iamVjdHMgaWYgaXRzIGNhY2hlIGFscmVhZHkgZXhpc3RzIGFsbG93c1xuXHRcdC8vIHRoZSBjb2RlIHRvIHNob3J0Y3V0IG9uIHRoZSBzYW1lIHBhdGggYXMgYSBET00gbm9kZSB3aXRoIG5vIGNhY2hlXG5cdFx0aWQgPSBpc05vZGUgPyBlbGVtWyBpbnRlcm5hbEtleSBdIDogZWxlbVsgaW50ZXJuYWxLZXkgXSAmJiBpbnRlcm5hbEtleTtcblxuXHQvLyBBdm9pZCBkb2luZyBhbnkgbW9yZSB3b3JrIHRoYW4gd2UgbmVlZCB0byB3aGVuIHRyeWluZyB0byBnZXQgZGF0YSBvbiBhblxuXHQvLyBvYmplY3QgdGhhdCBoYXMgbm8gZGF0YSBhdCBhbGxcblx0aWYgKCAoIWlkIHx8ICFjYWNoZVtpZF0gfHwgKCFwdnQgJiYgIWNhY2hlW2lkXS5kYXRhKSkgJiYgZGF0YSA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBuYW1lID09PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGlmICggIWlkICkge1xuXHRcdC8vIE9ubHkgRE9NIG5vZGVzIG5lZWQgYSBuZXcgdW5pcXVlIElEIGZvciBlYWNoIGVsZW1lbnQgc2luY2UgdGhlaXIgZGF0YVxuXHRcdC8vIGVuZHMgdXAgaW4gdGhlIGdsb2JhbCBjYWNoZVxuXHRcdGlmICggaXNOb2RlICkge1xuXHRcdFx0aWQgPSBlbGVtWyBpbnRlcm5hbEtleSBdID0gZGVsZXRlZElkcy5wb3AoKSB8fCBqUXVlcnkuZ3VpZCsrO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZCA9IGludGVybmFsS2V5O1xuXHRcdH1cblx0fVxuXG5cdGlmICggIWNhY2hlWyBpZCBdICkge1xuXHRcdC8vIEF2b2lkIGV4cG9zaW5nIGpRdWVyeSBtZXRhZGF0YSBvbiBwbGFpbiBKUyBvYmplY3RzIHdoZW4gdGhlIG9iamVjdFxuXHRcdC8vIGlzIHNlcmlhbGl6ZWQgdXNpbmcgSlNPTi5zdHJpbmdpZnlcblx0XHRjYWNoZVsgaWQgXSA9IGlzTm9kZSA/IHt9IDogeyB0b0pTT046IGpRdWVyeS5ub29wIH07XG5cdH1cblxuXHQvLyBBbiBvYmplY3QgY2FuIGJlIHBhc3NlZCB0byBqUXVlcnkuZGF0YSBpbnN0ZWFkIG9mIGEga2V5L3ZhbHVlIHBhaXI7IHRoaXMgZ2V0c1xuXHQvLyBzaGFsbG93IGNvcGllZCBvdmVyIG9udG8gdGhlIGV4aXN0aW5nIGNhY2hlXG5cdGlmICggdHlwZW9mIG5hbWUgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0XHRpZiAoIHB2dCApIHtcblx0XHRcdGNhY2hlWyBpZCBdID0galF1ZXJ5LmV4dGVuZCggY2FjaGVbIGlkIF0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y2FjaGVbIGlkIF0uZGF0YSA9IGpRdWVyeS5leHRlbmQoIGNhY2hlWyBpZCBdLmRhdGEsIG5hbWUgKTtcblx0XHR9XG5cdH1cblxuXHR0aGlzQ2FjaGUgPSBjYWNoZVsgaWQgXTtcblxuXHQvLyBqUXVlcnkgZGF0YSgpIGlzIHN0b3JlZCBpbiBhIHNlcGFyYXRlIG9iamVjdCBpbnNpZGUgdGhlIG9iamVjdCdzIGludGVybmFsIGRhdGFcblx0Ly8gY2FjaGUgaW4gb3JkZXIgdG8gYXZvaWQga2V5IGNvbGxpc2lvbnMgYmV0d2VlbiBpbnRlcm5hbCBkYXRhIGFuZCB1c2VyLWRlZmluZWRcblx0Ly8gZGF0YS5cblx0aWYgKCAhcHZ0ICkge1xuXHRcdGlmICggIXRoaXNDYWNoZS5kYXRhICkge1xuXHRcdFx0dGhpc0NhY2hlLmRhdGEgPSB7fTtcblx0XHR9XG5cblx0XHR0aGlzQ2FjaGUgPSB0aGlzQ2FjaGUuZGF0YTtcblx0fVxuXG5cdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdHRoaXNDYWNoZVsgalF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApIF0gPSBkYXRhO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIGJvdGggY29udmVydGVkLXRvLWNhbWVsIGFuZCBub24tY29udmVydGVkIGRhdGEgcHJvcGVydHkgbmFtZXNcblx0Ly8gSWYgYSBkYXRhIHByb3BlcnR5IHdhcyBzcGVjaWZpZWRcblx0aWYgKCB0eXBlb2YgbmFtZSA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdC8vIEZpcnN0IFRyeSB0byBmaW5kIGFzLWlzIHByb3BlcnR5IGRhdGFcblx0XHRyZXQgPSB0aGlzQ2FjaGVbIG5hbWUgXTtcblxuXHRcdC8vIFRlc3QgZm9yIG51bGx8dW5kZWZpbmVkIHByb3BlcnR5IGRhdGFcblx0XHRpZiAoIHJldCA9PSBudWxsICkge1xuXG5cdFx0XHQvLyBUcnkgdG8gZmluZCB0aGUgY2FtZWxDYXNlZCBwcm9wZXJ0eVxuXHRcdFx0cmV0ID0gdGhpc0NhY2hlWyBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICkgXTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gdGhpc0NhY2hlO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gaW50ZXJuYWxSZW1vdmVEYXRhKCBlbGVtLCBuYW1lLCBwdnQgKSB7XG5cdGlmICggIWpRdWVyeS5hY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0dmFyIHRoaXNDYWNoZSwgaSxcblx0XHRpc05vZGUgPSBlbGVtLm5vZGVUeXBlLFxuXG5cdFx0Ly8gU2VlIGpRdWVyeS5kYXRhIGZvciBtb3JlIGluZm9ybWF0aW9uXG5cdFx0Y2FjaGUgPSBpc05vZGUgPyBqUXVlcnkuY2FjaGUgOiBlbGVtLFxuXHRcdGlkID0gaXNOb2RlID8gZWxlbVsgalF1ZXJ5LmV4cGFuZG8gXSA6IGpRdWVyeS5leHBhbmRvO1xuXG5cdC8vIElmIHRoZXJlIGlzIGFscmVhZHkgbm8gY2FjaGUgZW50cnkgZm9yIHRoaXMgb2JqZWN0LCB0aGVyZSBpcyBub1xuXHQvLyBwdXJwb3NlIGluIGNvbnRpbnVpbmdcblx0aWYgKCAhY2FjaGVbIGlkIF0gKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aWYgKCBuYW1lICkge1xuXG5cdFx0dGhpc0NhY2hlID0gcHZ0ID8gY2FjaGVbIGlkIF0gOiBjYWNoZVsgaWQgXS5kYXRhO1xuXG5cdFx0aWYgKCB0aGlzQ2FjaGUgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBuYW1lcyBmb3IgZGF0YSBrZXlzXG5cdFx0XHRpZiAoICFqUXVlcnkuaXNBcnJheSggbmFtZSApICkge1xuXG5cdFx0XHRcdC8vIHRyeSB0aGUgc3RyaW5nIGFzIGEga2V5IGJlZm9yZSBhbnkgbWFuaXB1bGF0aW9uXG5cdFx0XHRcdGlmICggbmFtZSBpbiB0aGlzQ2FjaGUgKSB7XG5cdFx0XHRcdFx0bmFtZSA9IFsgbmFtZSBdO1xuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gc3BsaXQgdGhlIGNhbWVsIGNhc2VkIHZlcnNpb24gYnkgc3BhY2VzIHVubGVzcyBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzXG5cdFx0XHRcdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKTtcblx0XHRcdFx0XHRpZiAoIG5hbWUgaW4gdGhpc0NhY2hlICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IFsgbmFtZSBdO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gbmFtZS5zcGxpdChcIiBcIik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBJZiBcIm5hbWVcIiBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdoZW4gZGF0YSBpcyBpbml0aWFsbHkgY3JlYXRlZCwgdmlhIChcImtleVwiLCBcInZhbFwiKSBzaWduYXR1cmUsXG5cdFx0XHRcdC8vIGtleXMgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gY2FtZWxDYXNlLlxuXHRcdFx0XHQvLyBTaW5jZSB0aGVyZSBpcyBubyB3YXkgdG8gdGVsbCBfaG93XyBhIGtleSB3YXMgYWRkZWQsIHJlbW92ZVxuXHRcdFx0XHQvLyBib3RoIHBsYWluIGtleSBhbmQgY2FtZWxDYXNlIGtleS4gIzEyNzg2XG5cdFx0XHRcdC8vIFRoaXMgd2lsbCBvbmx5IHBlbmFsaXplIHRoZSBhcnJheSBhcmd1bWVudCBwYXRoLlxuXHRcdFx0XHRuYW1lID0gbmFtZS5jb25jYXQoIGpRdWVyeS5tYXAoIG5hbWUsIGpRdWVyeS5jYW1lbENhc2UgKSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0gbmFtZS5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIHRoaXNDYWNoZVsgbmFtZVtpXSBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGVyZSBpcyBubyBkYXRhIGxlZnQgaW4gdGhlIGNhY2hlLCB3ZSB3YW50IHRvIGNvbnRpbnVlXG5cdFx0XHQvLyBhbmQgbGV0IHRoZSBjYWNoZSBvYmplY3QgaXRzZWxmIGdldCBkZXN0cm95ZWRcblx0XHRcdGlmICggcHZ0ID8gIWlzRW1wdHlEYXRhT2JqZWN0KHRoaXNDYWNoZSkgOiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QodGhpc0NhY2hlKSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNlZSBqUXVlcnkuZGF0YSBmb3IgbW9yZSBpbmZvcm1hdGlvblxuXHRpZiAoICFwdnQgKSB7XG5cdFx0ZGVsZXRlIGNhY2hlWyBpZCBdLmRhdGE7XG5cblx0XHQvLyBEb24ndCBkZXN0cm95IHRoZSBwYXJlbnQgY2FjaGUgdW5sZXNzIHRoZSBpbnRlcm5hbCBkYXRhIG9iamVjdFxuXHRcdC8vIGhhZCBiZWVuIHRoZSBvbmx5IHRoaW5nIGxlZnQgaW4gaXRcblx0XHRpZiAoICFpc0VtcHR5RGF0YU9iamVjdCggY2FjaGVbIGlkIF0gKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdH1cblxuXHQvLyBEZXN0cm95IHRoZSBjYWNoZVxuXHRpZiAoIGlzTm9kZSApIHtcblx0XHRqUXVlcnkuY2xlYW5EYXRhKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXG5cdC8vIFVzZSBkZWxldGUgd2hlbiBzdXBwb3J0ZWQgZm9yIGV4cGFuZG9zIG9yIGBjYWNoZWAgaXMgbm90IGEgd2luZG93IHBlciBpc1dpbmRvdyAoIzEwMDgwKVxuXHQvKiBqc2hpbnQgZXFlcWVxOiBmYWxzZSAqL1xuXHR9IGVsc2UgaWYgKCBzdXBwb3J0LmRlbGV0ZUV4cGFuZG8gfHwgY2FjaGUgIT0gY2FjaGUud2luZG93ICkge1xuXHRcdC8qIGpzaGludCBlcWVxZXE6IHRydWUgKi9cblx0XHRkZWxldGUgY2FjaGVbIGlkIF07XG5cblx0Ly8gV2hlbiBhbGwgZWxzZSBmYWlscywgbnVsbFxuXHR9IGVsc2Uge1xuXHRcdGNhY2hlWyBpZCBdID0gbnVsbDtcblx0fVxufVxuXG5qUXVlcnkuZXh0ZW5kKHtcblx0Y2FjaGU6IHt9LFxuXG5cdC8vIFRoZSBmb2xsb3dpbmcgZWxlbWVudHMgKHNwYWNlLXN1ZmZpeGVkIHRvIGF2b2lkIE9iamVjdC5wcm90b3R5cGUgY29sbGlzaW9ucylcblx0Ly8gdGhyb3cgdW5jYXRjaGFibGUgZXhjZXB0aW9ucyBpZiB5b3UgYXR0ZW1wdCB0byBzZXQgZXhwYW5kbyBwcm9wZXJ0aWVzXG5cdG5vRGF0YToge1xuXHRcdFwiYXBwbGV0IFwiOiB0cnVlLFxuXHRcdFwiZW1iZWQgXCI6IHRydWUsXG5cdFx0Ly8gLi4uYnV0IEZsYXNoIG9iamVjdHMgKHdoaWNoIGhhdmUgdGhpcyBjbGFzc2lkKSAqY2FuKiBoYW5kbGUgZXhwYW5kb3Ncblx0XHRcIm9iamVjdCBcIjogXCJjbHNpZDpEMjdDREI2RS1BRTZELTExY2YtOTZCOC00NDQ1NTM1NDAwMDBcIlxuXHR9LFxuXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdGVsZW0gPSBlbGVtLm5vZGVUeXBlID8galF1ZXJ5LmNhY2hlWyBlbGVtW2pRdWVyeS5leHBhbmRvXSBdIDogZWxlbVsgalF1ZXJ5LmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gISFlbGVtICYmICFpc0VtcHR5RGF0YU9iamVjdCggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBpbnRlcm5hbERhdGEoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRyZXR1cm4gaW50ZXJuYWxSZW1vdmVEYXRhKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGludGVybmFsRGF0YSggZWxlbSwgbmFtZSwgZGF0YSwgdHJ1ZSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRyZXR1cm4gaW50ZXJuYWxSZW1vdmVEYXRhKCBlbGVtLCBuYW1lLCB0cnVlICk7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1swXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBTcGVjaWFsIGV4cGVjdGlvbnMgb2YgLmRhdGEgYmFzaWNhbGx5IHRod2FydCBqUXVlcnkuYWNjZXNzLFxuXHRcdC8vIHNvIGltcGxlbWVudCB0aGUgcmVsZXZhbnQgYmVoYXZpb3Igb3Vyc2VsdmVzXG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGpRdWVyeS5kYXRhKCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFqUXVlcnkuX2RhdGEoIGVsZW0sIFwicGFyc2VkQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFMTErXG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lLnNsaWNlKDUpICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGpRdWVyeS5fZGF0YSggZWxlbSwgXCJwYXJzZWRBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGF0YSggdGhpcywga2V5ICk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDEgP1xuXG5cdFx0XHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHRcdFx0dGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGF0YSggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSkgOlxuXG5cdFx0XHQvLyBHZXRzIG9uZSB2YWx1ZVxuXHRcdFx0Ly8gVHJ5IHRvIGZldGNoIGFueSBpbnRlcm5hbGx5IHN0b3JlZCBkYXRhIGZpcnN0XG5cdFx0XHRlbGVtID8gZGF0YUF0dHIoIGVsZW0sIGtleSwgalF1ZXJ5LmRhdGEoIGVsZW0sIGtleSApICkgOiB1bmRlZmluZWQ7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZURhdGEoIHRoaXMsIGtleSApO1xuXHRcdH0pO1xuXHR9XG59KTtcblxuXG5qUXVlcnkuZXh0ZW5kKHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGpRdWVyeS5fZGF0YSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IGpRdWVyeS5pc0FycmF5KGRhdGEpICkge1xuXHRcdFx0XHRcdHF1ZXVlID0galF1ZXJ5Ll9kYXRhKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KGRhdGEpICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGNsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gbm90IGludGVuZGVkIGZvciBwdWJsaWMgY29uc3VtcHRpb24gLSBnZW5lcmF0ZXMgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJucyB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGpRdWVyeS5fZGF0YSggZWxlbSwga2V5ICkgfHwgalF1ZXJ5Ll9kYXRhKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIikuYWRkKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuX3JlbW92ZURhdGEoIGVsZW0sIHR5cGUgKyBcInF1ZXVlXCIgKTtcblx0XHRcdFx0alF1ZXJ5Ll9yZW1vdmVEYXRhKCBlbGVtLCBrZXkgKTtcblx0XHRcdH0pXG5cdFx0fSk7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbMF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBlbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVswXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0pO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0galF1ZXJ5Ll9kYXRhKCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59KTtcbnZhciBwbnVtID0gKC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvKS5zb3VyY2U7XG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGlzSGlkZGVuID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXHRcdC8vIGlzSGlkZGVuIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiIHx8ICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXHR9O1xuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBqUXVlcnkuYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggalF1ZXJ5LnR5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRqUXVlcnkuYWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVtpXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBrZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0Zm4oIGVsZW1zW2ldLCBrZXksIHJhdyA/IHZhbHVlIDogdmFsdWUuY2FsbCggZWxlbXNbaV0sIGksIGZuKCBlbGVtc1tpXSwga2V5ICkgKSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjaGFpbmFibGUgP1xuXHRcdGVsZW1zIDpcblxuXHRcdC8vIEdldHNcblx0XHRidWxrID9cblx0XHRcdGZuLmNhbGwoIGVsZW1zICkgOlxuXHRcdFx0bGVuZ3RoID8gZm4oIGVsZW1zWzBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcbnZhciByY2hlY2thYmxlVHlwZSA9ICgvXig/OmNoZWNrYm94fHJhZGlvKSQvaSk7XG5cblxuXG4oZnVuY3Rpb24oKSB7XG5cdC8vIE1pbmlmaWVkOiB2YXIgYSxiLGNcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuXG5cdC8vIFNldHVwXG5cdGRpdi5pbm5lckhUTUwgPSBcIiAgPGxpbmsvPjx0YWJsZT48L3RhYmxlPjxhIGhyZWY9Jy9hJz5hPC9hPjxpbnB1dCB0eXBlPSdjaGVja2JveCcvPlwiO1xuXG5cdC8vIElFIHN0cmlwcyBsZWFkaW5nIHdoaXRlc3BhY2Ugd2hlbiAuaW5uZXJIVE1MIGlzIHVzZWRcblx0c3VwcG9ydC5sZWFkaW5nV2hpdGVzcGFjZSA9IGRpdi5maXJzdENoaWxkLm5vZGVUeXBlID09PSAzO1xuXG5cdC8vIE1ha2Ugc3VyZSB0aGF0IHRib2R5IGVsZW1lbnRzIGFyZW4ndCBhdXRvbWF0aWNhbGx5IGluc2VydGVkXG5cdC8vIElFIHdpbGwgaW5zZXJ0IHRoZW0gaW50byBlbXB0eSB0YWJsZXNcblx0c3VwcG9ydC50Ym9keSA9ICFkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwidGJvZHlcIiApLmxlbmd0aDtcblxuXHQvLyBNYWtlIHN1cmUgdGhhdCBsaW5rIGVsZW1lbnRzIGdldCBzZXJpYWxpemVkIGNvcnJlY3RseSBieSBpbm5lckhUTUxcblx0Ly8gVGhpcyByZXF1aXJlcyBhIHdyYXBwZXIgZWxlbWVudCBpbiBJRVxuXHRzdXBwb3J0Lmh0bWxTZXJpYWxpemUgPSAhIWRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJsaW5rXCIgKS5sZW5ndGg7XG5cblx0Ly8gTWFrZXMgc3VyZSBjbG9uaW5nIGFuIGh0bWw1IGVsZW1lbnQgZG9lcyBub3QgY2F1c2UgcHJvYmxlbXNcblx0Ly8gV2hlcmUgb3V0ZXJIVE1MIGlzIHVuZGVmaW5lZCwgdGhpcyBzdGlsbCB3b3Jrc1xuXHRzdXBwb3J0Lmh0bWw1Q2xvbmUgPVxuXHRcdGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwibmF2XCIgKS5jbG9uZU5vZGUoIHRydWUgKS5vdXRlckhUTUwgIT09IFwiPDpuYXY+PC86bmF2PlwiO1xuXG5cdC8vIENoZWNrIGlmIGEgZGlzY29ubmVjdGVkIGNoZWNrYm94IHdpbGwgcmV0YWluIGl0cyBjaGVja2VkXG5cdC8vIHZhbHVlIG9mIHRydWUgYWZ0ZXIgYXBwZW5kZWQgdG8gdGhlIERPTSAoSUU2LzcpXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cdGlucHV0LmNoZWNrZWQgPSB0cnVlO1xuXHRmcmFnbWVudC5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblx0c3VwcG9ydC5hcHBlbmRDaGVja2VkID0gaW5wdXQuY2hlY2tlZDtcblxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHQvLyBTdXBwb3J0OiBJRTYtSUUxMStcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcblxuXHQvLyAjMTEyMTcgLSBXZWJLaXQgbG9zZXMgY2hlY2sgd2hlbiB0aGUgbmFtZSBpcyBhZnRlciB0aGUgY2hlY2tlZCBhdHRyaWJ1dGVcblx0ZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXHRkaXYuaW5uZXJIVE1MID0gXCI8aW5wdXQgdHlwZT0ncmFkaW8nIGNoZWNrZWQ9J2NoZWNrZWQnIG5hbWU9J3QnLz5cIjtcblxuXHQvLyBTdXBwb3J0OiBTYWZhcmkgNS4xLCBpT1MgNS4xLCBBbmRyb2lkIDQueCwgQW5kcm9pZCAyLjNcblx0Ly8gb2xkIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHQvLyBPcGVyYSBkb2VzIG5vdCBjbG9uZSBldmVudHMgKGFuZCB0eXBlb2YgZGl2LmF0dGFjaEV2ZW50ID09PSB1bmRlZmluZWQpLlxuXHQvLyBJRTktMTAgY2xvbmVzIGV2ZW50cyBib3VuZCB2aWEgYXR0YWNoRXZlbnQsIGJ1dCB0aGV5IGRvbid0IHRyaWdnZXIgd2l0aCAuY2xpY2soKVxuXHRzdXBwb3J0Lm5vQ2xvbmVFdmVudCA9IHRydWU7XG5cdGlmICggZGl2LmF0dGFjaEV2ZW50ICkge1xuXHRcdGRpdi5hdHRhY2hFdmVudCggXCJvbmNsaWNrXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3VwcG9ydC5ub0Nsb25lRXZlbnQgPSBmYWxzZTtcblx0XHR9KTtcblxuXHRcdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbGljaygpO1xuXHR9XG5cblx0Ly8gRXhlY3V0ZSB0aGUgdGVzdCBvbmx5IGlmIG5vdCBhbHJlYWR5IGV4ZWN1dGVkIGluIGFub3RoZXIgbW9kdWxlLlxuXHRpZiAoc3VwcG9ydC5kZWxldGVFeHBhbmRvID09IG51bGwpIHtcblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0c3VwcG9ydC5kZWxldGVFeHBhbmRvID0gdHJ1ZTtcblx0XHR0cnkge1xuXHRcdFx0ZGVsZXRlIGRpdi50ZXN0O1xuXHRcdH0gY2F0Y2goIGUgKSB7XG5cdFx0XHRzdXBwb3J0LmRlbGV0ZUV4cGFuZG8gPSBmYWxzZTtcblx0XHR9XG5cdH1cbn0pKCk7XG5cblxuKGZ1bmN0aW9uKCkge1xuXHR2YXIgaSwgZXZlbnROYW1lLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5IChsYWNrIHN1Ym1pdC9jaGFuZ2UgYnViYmxlKSwgRmlyZWZveCAyMysgKGxhY2sgZm9jdXNpbiBldmVudClcblx0Zm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgY2hhbmdlOiB0cnVlLCBmb2N1c2luOiB0cnVlIH0pIHtcblx0XHRldmVudE5hbWUgPSBcIm9uXCIgKyBpO1xuXG5cdFx0aWYgKCAhKHN1cHBvcnRbIGkgKyBcIkJ1YmJsZXNcIiBdID0gZXZlbnROYW1lIGluIHdpbmRvdykgKSB7XG5cdFx0XHQvLyBCZXdhcmUgb2YgQ1NQIHJlc3RyaWN0aW9ucyAoaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vU2VjdXJpdHkvQ1NQKVxuXHRcdFx0ZGl2LnNldEF0dHJpYnV0ZSggZXZlbnROYW1lLCBcInRcIiApO1xuXHRcdFx0c3VwcG9ydFsgaSArIFwiQnViYmxlc1wiIF0gPSBkaXYuYXR0cmlidXRlc1sgZXZlbnROYW1lIF0uZXhwYW5kbyA9PT0gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0Ly8gTnVsbCBlbGVtZW50cyB0byBhdm9pZCBsZWFrcyBpbiBJRS5cblx0ZGl2ID0gbnVsbDtcbn0pKCk7XG5cblxudmFyIHJmb3JtRWxlbXMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYSkkL2ksXG5cdHJrZXlFdmVudCA9IC9ea2V5Lyxcblx0cm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnUpfGNsaWNrLyxcblx0cmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpJC87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXHRcdHZhciB0bXAsIGV2ZW50cywgdCwgaGFuZGxlT2JqSW4sXG5cdFx0XHRzcGVjaWFsLCBldmVudEhhbmRsZSwgaGFuZGxlT2JqLFxuXHRcdFx0aGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBqUXVlcnkuX2RhdGEoIGVsZW0gKTtcblxuXHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXG5cdFx0aWYgKCAhZWxlbURhdGEgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcblx0XHR9XG5cblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0aWYgKCAhKGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cykgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSB7fTtcblx0XHR9XG5cdFx0aWYgKCAhKGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IHN0cnVuZGVmaW5lZCAmJiAoIWUgfHwgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlKSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBldmVudEhhbmRsZS5lbGVtLCBhcmd1bWVudHMgKSA6XG5cdFx0XHRcdFx0dW5kZWZpbmVkO1xuXHRcdFx0fTtcblx0XHRcdC8vIEFkZCBlbGVtIGFzIGEgcHJvcGVydHkgb2YgdGhlIGhhbmRsZSBmbiB0byBwcmV2ZW50IGEgbWVtb3J5IGxlYWsgd2l0aCBJRSBub24tbmF0aXZlIGV2ZW50c1xuXHRcdFx0ZXZlbnRIYW5kbGUuZWxlbSA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1t0XSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWzFdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWzJdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoe1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbihcIi5cIilcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lci9hdHRhY2hFdmVudCBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHwgc3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHQvLyBCaW5kIHRoZSBnbG9iYWwgZXZlbnQgaGFuZGxlciB0byB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSwgZmFsc2UgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIGVsZW0uYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmF0dGFjaEV2ZW50KCBcIm9uXCIgKyB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE51bGxpZnkgZWxlbSB0byBwcmV2ZW50IG1lbW9yeSBsZWFrcyBpbiBJRVxuXHRcdGVsZW0gPSBudWxsO1xuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXHRcdHZhciBqLCBoYW5kbGVPYmosIHRtcCxcblx0XHRcdG9yaWdDb3VudCwgdCwgZXZlbnRzLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsXG5cdFx0XHRuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0galF1ZXJ5Lmhhc0RhdGEoIGVsZW0gKSAmJiBqUXVlcnkuX2RhdGEoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzW3RdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbMV07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbMl0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWzJdICYmIG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oXCJcXFxcLig/Oi4qXFxcXC58KVwiKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XG5cblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHwgc3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGVsZXRlIGVsZW1EYXRhLmhhbmRsZTtcblxuXHRcdFx0Ly8gcmVtb3ZlRGF0YSBhbHNvIGNoZWNrcyBmb3IgZW1wdGluZXNzIGFuZCBjbGVhcnMgdGhlIGV4cGFuZG8gaWYgZW1wdHlcblx0XHRcdC8vIHNvIHVzZSBpdCBpbnN0ZWFkIG9mIGRlbGV0ZVxuXHRcdFx0alF1ZXJ5Ll9yZW1vdmVEYXRhKCBlbGVtLCBcImV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXHRcdHZhciBoYW5kbGUsIG9udHlwZSwgY3VyLFxuXHRcdFx0YnViYmxlVHlwZSwgc3BlY2lhbCwgdG1wLCBpLFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KFwiLlwiKSA6IFtdO1xuXG5cdFx0Y3VyID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZihcIi5cIikgPj0gMCApIHtcblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KFwiLlwiKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKFwiOlwiKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKFwiLlwiKTtcblx0XHRldmVudC5uYW1lc3BhY2VfcmUgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoY3VyID0gZXZlbnRQYXRoW2krK10pICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKCBqUXVlcnkuX2RhdGEoIGN1ciwgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSAmJiBqUXVlcnkuX2RhdGEoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBqUXVlcnkuYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCFzcGVjaWFsLl9kZWZhdWx0IHx8IHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSkgJiZcblx0XHRcdFx0alF1ZXJ5LmFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIENhbid0IHVzZSBhbiAuaXNGdW5jdGlvbigpIGNoZWNrIGhlcmUgYmVjYXVzZSBJRTYvNyBmYWlscyB0aGF0IHRlc3QuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgZWxlbVsgdHlwZSBdICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0Ly8gSUU8OSBkaWVzIG9uIGZvY3VzL2JsdXIgdG8gaGlkZGVuIGVsZW1lbnQgKCMxNDg2LCMxMjUxOClcblx0XHRcdFx0XHRcdC8vIG9ubHkgcmVwcm9kdWNpYmxlIG9uIHdpblhQIElFOCBuYXRpdmUsIG5vdCBJRTkgaW4gSUU4IG1vZGVcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0ZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApO1xuXG5cdFx0dmFyIGksIHJldCwgaGFuZGxlT2JqLCBtYXRjaGVkLCBqLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cdFx0XHRoYW5kbGVycyA9ICggalF1ZXJ5Ll9kYXRhKCB0aGlzLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbMF0gPSBldmVudDtcblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoIChtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdKSAmJiAhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0XHQvLyBUcmlnZ2VyZWQgZXZlbnQgbXVzdCBlaXRoZXIgMSkgaGF2ZSBubyBuYW1lc3BhY2UsIG9yXG5cdFx0XHRcdC8vIDIpIGhhdmUgbmFtZXNwYWNlKHMpIGEgc3Vic2V0IG9yIGVxdWFsIHRvIHRob3NlIGluIHRoZSBib3VuZCBldmVudCAoYm90aCBjYW4gaGF2ZSBubyBuYW1lc3BhY2UpLlxuXHRcdFx0XHRpZiAoICFldmVudC5uYW1lc3BhY2VfcmUgfHwgZXZlbnQubmFtZXNwYWNlX3JlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoIChqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30pLmhhbmRsZSB8fCBoYW5kbGVPYmouaGFuZGxlciApXG5cdFx0XHRcdFx0XHRcdC5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZXZlbnQucmVzdWx0ID0gcmV0KSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBzZWwsIGhhbmRsZU9iaiwgbWF0Y2hlcywgaSxcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKCMxMzE4MClcblx0XHQvLyBBdm9pZCBub24tbGVmdC1jbGljayBidWJibGluZyBpbiBGaXJlZm94ICgjMzg2MSlcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiYgY3VyLm5vZGVUeXBlICYmICghZXZlbnQuYnV0dG9uIHx8IGV2ZW50LnR5cGUgIT09IFwiY2xpY2tcIikgKSB7XG5cblx0XHRcdC8qIGpzaGludCBlcWVxZXE6IGZhbHNlICovXG5cdFx0XHRmb3IgKCA7IGN1ciAhPSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXHRcdFx0XHQvKiBqc2hpbnQgZXFlcWVxOiB0cnVlICovXG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAoY3VyLmRpc2FibGVkICE9PSB0cnVlIHx8IGV2ZW50LnR5cGUgIT09IFwiY2xpY2tcIikgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlcyA9IFtdO1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZXNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPj0gMCA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZXMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlcy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCh7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZXMgfSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKHsgZWxlbTogdGhpcywgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRpZiAoIGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdICkge1xuXHRcdFx0cmV0dXJuIGV2ZW50O1xuXHRcdH1cblxuXHRcdC8vIENyZWF0ZSBhIHdyaXRhYmxlIGNvcHkgb2YgdGhlIGV2ZW50IG9iamVjdCBhbmQgbm9ybWFsaXplIHNvbWUgcHJvcGVydGllc1xuXHRcdHZhciBpLCBwcm9wLCBjb3B5LFxuXHRcdFx0dHlwZSA9IGV2ZW50LnR5cGUsXG5cdFx0XHRvcmlnaW5hbEV2ZW50ID0gZXZlbnQsXG5cdFx0XHRmaXhIb29rID0gdGhpcy5maXhIb29rc1sgdHlwZSBdO1xuXG5cdFx0aWYgKCAhZml4SG9vayApIHtcblx0XHRcdHRoaXMuZml4SG9va3NbIHR5cGUgXSA9IGZpeEhvb2sgPVxuXHRcdFx0XHRybW91c2VFdmVudC50ZXN0KCB0eXBlICkgPyB0aGlzLm1vdXNlSG9va3MgOlxuXHRcdFx0XHRya2V5RXZlbnQudGVzdCggdHlwZSApID8gdGhpcy5rZXlIb29rcyA6XG5cdFx0XHRcdHt9O1xuXHRcdH1cblx0XHRjb3B5ID0gZml4SG9vay5wcm9wcyA/IHRoaXMucHJvcHMuY29uY2F0KCBmaXhIb29rLnByb3BzICkgOiB0aGlzLnByb3BzO1xuXG5cdFx0ZXZlbnQgPSBuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cblx0XHRpID0gY29weS5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRwcm9wID0gY29weVsgaSBdO1xuXHRcdFx0ZXZlbnRbIHByb3AgXSA9IG9yaWdpbmFsRXZlbnRbIHByb3AgXTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gRml4IHRhcmdldCBwcm9wZXJ0eSAoIzE5MjUpXG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gb3JpZ2luYWxFdmVudC5zcmNFbGVtZW50IHx8IGRvY3VtZW50O1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSAyMyssIFNhZmFyaT9cblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxuXHRcdGlmICggZXZlbnQudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZXZlbnQudGFyZ2V0LnBhcmVudE5vZGU7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIEZvciBtb3VzZS9rZXkgZXZlbnRzLCBtZXRhS2V5PT1mYWxzZSBpZiBpdCdzIHVuZGVmaW5lZCAoIzMzNjgsICMxMTMyOClcblx0XHRldmVudC5tZXRhS2V5ID0gISFldmVudC5tZXRhS2V5O1xuXG5cdFx0cmV0dXJuIGZpeEhvb2suZmlsdGVyID8gZml4SG9vay5maWx0ZXIoIGV2ZW50LCBvcmlnaW5hbEV2ZW50ICkgOiBldmVudDtcblx0fSxcblxuXHQvLyBJbmNsdWRlcyBzb21lIGV2ZW50IHByb3BzIHNoYXJlZCBieSBLZXlFdmVudCBhbmQgTW91c2VFdmVudFxuXHRwcm9wczogXCJhbHRLZXkgYnViYmxlcyBjYW5jZWxhYmxlIGN0cmxLZXkgY3VycmVudFRhcmdldCBldmVudFBoYXNlIG1ldGFLZXkgcmVsYXRlZFRhcmdldCBzaGlmdEtleSB0YXJnZXQgdGltZVN0YW1wIHZpZXcgd2hpY2hcIi5zcGxpdChcIiBcIiksXG5cblx0Zml4SG9va3M6IHt9LFxuXG5cdGtleUhvb2tzOiB7XG5cdFx0cHJvcHM6IFwiY2hhciBjaGFyQ29kZSBrZXkga2V5Q29kZVwiLnNwbGl0KFwiIFwiKSxcblx0XHRmaWx0ZXI6IGZ1bmN0aW9uKCBldmVudCwgb3JpZ2luYWwgKSB7XG5cblx0XHRcdC8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50c1xuXHRcdFx0aWYgKCBldmVudC53aGljaCA9PSBudWxsICkge1xuXHRcdFx0XHRldmVudC53aGljaCA9IG9yaWdpbmFsLmNoYXJDb2RlICE9IG51bGwgPyBvcmlnaW5hbC5jaGFyQ29kZSA6IG9yaWdpbmFsLmtleUNvZGU7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBldmVudDtcblx0XHR9XG5cdH0sXG5cblx0bW91c2VIb29rczoge1xuXHRcdHByb3BzOiBcImJ1dHRvbiBidXR0b25zIGNsaWVudFggY2xpZW50WSBmcm9tRWxlbWVudCBvZmZzZXRYIG9mZnNldFkgcGFnZVggcGFnZVkgc2NyZWVuWCBzY3JlZW5ZIHRvRWxlbWVudFwiLnNwbGl0KFwiIFwiKSxcblx0XHRmaWx0ZXI6IGZ1bmN0aW9uKCBldmVudCwgb3JpZ2luYWwgKSB7XG5cdFx0XHR2YXIgYm9keSwgZXZlbnREb2MsIGRvYyxcblx0XHRcdFx0YnV0dG9uID0gb3JpZ2luYWwuYnV0dG9uLFxuXHRcdFx0XHRmcm9tRWxlbWVudCA9IG9yaWdpbmFsLmZyb21FbGVtZW50O1xuXG5cdFx0XHQvLyBDYWxjdWxhdGUgcGFnZVgvWSBpZiBtaXNzaW5nIGFuZCBjbGllbnRYL1kgYXZhaWxhYmxlXG5cdFx0XHRpZiAoIGV2ZW50LnBhZ2VYID09IG51bGwgJiYgb3JpZ2luYWwuY2xpZW50WCAhPSBudWxsICkge1xuXHRcdFx0XHRldmVudERvYyA9IGV2ZW50LnRhcmdldC5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50O1xuXHRcdFx0XHRkb2MgPSBldmVudERvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHRcdGJvZHkgPSBldmVudERvYy5ib2R5O1xuXG5cdFx0XHRcdGV2ZW50LnBhZ2VYID0gb3JpZ2luYWwuY2xpZW50WCArICggZG9jICYmIGRvYy5zY3JvbGxMZWZ0IHx8IGJvZHkgJiYgYm9keS5zY3JvbGxMZWZ0IHx8IDAgKSAtICggZG9jICYmIGRvYy5jbGllbnRMZWZ0IHx8IGJvZHkgJiYgYm9keS5jbGllbnRMZWZ0IHx8IDAgKTtcblx0XHRcdFx0ZXZlbnQucGFnZVkgPSBvcmlnaW5hbC5jbGllbnRZICsgKCBkb2MgJiYgZG9jLnNjcm9sbFRvcCAgfHwgYm9keSAmJiBib2R5LnNjcm9sbFRvcCAgfHwgMCApIC0gKCBkb2MgJiYgZG9jLmNsaWVudFRvcCAgfHwgYm9keSAmJiBib2R5LmNsaWVudFRvcCAgfHwgMCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgcmVsYXRlZFRhcmdldCwgaWYgbmVjZXNzYXJ5XG5cdFx0XHRpZiAoICFldmVudC5yZWxhdGVkVGFyZ2V0ICYmIGZyb21FbGVtZW50ICkge1xuXHRcdFx0XHRldmVudC5yZWxhdGVkVGFyZ2V0ID0gZnJvbUVsZW1lbnQgPT09IGV2ZW50LnRhcmdldCA/IG9yaWdpbmFsLnRvRWxlbWVudCA6IGZyb21FbGVtZW50O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgd2hpY2ggZm9yIGNsaWNrOiAxID09PSBsZWZ0OyAyID09PSBtaWRkbGU7IDMgPT09IHJpZ2h0XG5cdFx0XHQvLyBOb3RlOiBidXR0b24gaXMgbm90IG5vcm1hbGl6ZWQsIHNvIGRvbid0IHVzZSBpdFxuXHRcdFx0aWYgKCAhZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGV2ZW50LndoaWNoID0gKCBidXR0b24gJiAxID8gMSA6ICggYnV0dG9uICYgMiA/IDMgOiAoIGJ1dHRvbiAmIDQgPyAyIDogMCApICkgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV2ZW50O1xuXHRcdH1cblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGZvY3VzOiB7XG5cdFx0XHQvLyBGaXJlIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgIT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5mb2N1cyApIHtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0dGhpcy5mb2N1cygpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdFx0XHRcdFx0Ly8gSWYgd2UgZXJyb3Igb24gZm9jdXMgdG8gaGlkZGVuIGVsZW1lbnQgKCMxNDg2LCAjMTI1MTgpLFxuXHRcdFx0XHRcdFx0Ly8gbGV0IC50cmlnZ2VyKCkgcnVuIHRoZSBoYW5kbGVyc1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c2luXCJcblx0XHR9LFxuXHRcdGJsdXI6IHtcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5ibHVyICkge1xuXHRcdFx0XHRcdHRoaXMuYmx1cigpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c291dFwiXG5cdFx0fSxcblx0XHRjbGljazoge1xuXHRcdFx0Ly8gRm9yIGNoZWNrYm94LCBmaXJlIG5hdGl2ZSBldmVudCBzbyBjaGVja2VkIHN0YXRlIHdpbGwgYmUgcmlnaHRcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5ub2RlTmFtZSggdGhpcywgXCJpbnB1dFwiICkgJiYgdGhpcy50eXBlID09PSBcImNoZWNrYm94XCIgJiYgdGhpcy5jbGljayApIHtcblx0XHRcdFx0XHR0aGlzLmNsaWNrKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgZG9uJ3QgZmlyZSBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubm9kZU5hbWUoIGV2ZW50LnRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQsIGJ1YmJsZSApIHtcblx0XHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmUuXG5cdFx0Ly8gRmFrZSBvcmlnaW5hbEV2ZW50IHRvIGF2b2lkIGRvbm9yJ3Mgc3RvcFByb3BhZ2F0aW9uLCBidXQgaWYgdGhlXG5cdFx0Ly8gc2ltdWxhdGVkIGV2ZW50IHByZXZlbnRzIGRlZmF1bHQgdGhlbiB3ZSBkbyB0aGUgc2FtZSBvbiB0aGUgZG9ub3IuXG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlLFxuXHRcdFx0XHRvcmlnaW5hbEV2ZW50OiB7fVxuXHRcdFx0fVxuXHRcdCk7XG5cdFx0aWYgKCBidWJibGUgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guY2FsbCggZWxlbSwgZSApO1xuXHRcdH1cblx0XHRpZiAoIGUuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciA/XG5cdGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cdFx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSwgZmFsc2UgKTtcblx0XHR9XG5cdH0gOlxuXHRmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXHRcdHZhciBuYW1lID0gXCJvblwiICsgdHlwZTtcblxuXHRcdGlmICggZWxlbS5kZXRhY2hFdmVudCApIHtcblxuXHRcdFx0Ly8gIzg1NDUsICM3MDU0LCBwcmV2ZW50aW5nIG1lbW9yeSBsZWFrcyBmb3IgY3VzdG9tIGV2ZW50cyBpbiBJRTYtOFxuXHRcdFx0Ly8gZGV0YWNoRXZlbnQgbmVlZGVkIHByb3BlcnR5IG9uIGVsZW1lbnQsIGJ5IG5hbWUgb2YgdGhhdCBldmVudCwgdG8gcHJvcGVybHkgZXhwb3NlIGl0IHRvIEdDXG5cdFx0XHRpZiAoIHR5cGVvZiBlbGVtWyBuYW1lIF0gPT09IHN0cnVuZGVmaW5lZCApIHtcblx0XHRcdFx0ZWxlbVsgbmFtZSBdID0gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5kZXRhY2hFdmVudCggbmFtZSwgaGFuZGxlICk7XG5cdFx0fVxuXHR9O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISh0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50KSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDwgOSwgQW5kcm9pZCA8IDQuMFxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgalF1ZXJ5Lm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXHRcdGlmICggIWUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgcHJldmVudERlZmF1bHQgZXhpc3RzLCBydW4gaXQgb24gdGhlIG9yaWdpbmFsIGV2ZW50XG5cdFx0aWYgKCBlLnByZXZlbnREZWZhdWx0ICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUVcblx0XHQvLyBPdGhlcndpc2Ugc2V0IHRoZSByZXR1cm5WYWx1ZSBwcm9wZXJ0eSBvZiB0aGUgb3JpZ2luYWwgZXZlbnQgdG8gZmFsc2Vcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZS5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXHRcdGlmICggIWUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdC8vIElmIHN0b3BQcm9wYWdhdGlvbiBleGlzdHMsIHJ1biBpdCBvbiB0aGUgb3JpZ2luYWwgZXZlbnRcblx0XHRpZiAoIGUuc3RvcFByb3BhZ2F0aW9uICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRVxuXHRcdC8vIFNldCB0aGUgY2FuY2VsQnViYmxlIHByb3BlcnR5IG9mIHRoZSBvcmlnaW5hbCBldmVudCB0byB0cnVlXG5cdFx0ZS5jYW5jZWxCdWJibGUgPSB0cnVlO1xuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xualF1ZXJ5LmVhY2goe1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8IChyZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkpICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0pO1xuXG4vLyBJRSBzdWJtaXQgZGVsZWdhdGlvblxuaWYgKCAhc3VwcG9ydC5zdWJtaXRCdWJibGVzICkge1xuXG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsLnN1Ym1pdCA9IHtcblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBPbmx5IG5lZWQgdGhpcyBmb3IgZGVsZWdhdGVkIGZvcm0gc3VibWl0IGV2ZW50c1xuXHRcdFx0aWYgKCBqUXVlcnkubm9kZU5hbWUoIHRoaXMsIFwiZm9ybVwiICkgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTGF6eS1hZGQgYSBzdWJtaXQgaGFuZGxlciB3aGVuIGEgZGVzY2VuZGFudCBmb3JtIG1heSBwb3RlbnRpYWxseSBiZSBzdWJtaXR0ZWRcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIFwiY2xpY2suX3N1Ym1pdCBrZXlwcmVzcy5fc3VibWl0XCIsIGZ1bmN0aW9uKCBlICkge1xuXHRcdFx0XHQvLyBOb2RlIG5hbWUgY2hlY2sgYXZvaWRzIGEgVk1MLXJlbGF0ZWQgY3Jhc2ggaW4gSUUgKCM5ODA3KVxuXHRcdFx0XHR2YXIgZWxlbSA9IGUudGFyZ2V0LFxuXHRcdFx0XHRcdGZvcm0gPSBqUXVlcnkubm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApIHx8IGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJidXR0b25cIiApID8gZWxlbS5mb3JtIDogdW5kZWZpbmVkO1xuXHRcdFx0XHRpZiAoIGZvcm0gJiYgIWpRdWVyeS5fZGF0YSggZm9ybSwgXCJzdWJtaXRCdWJibGVzXCIgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBmb3JtLCBcInN1Ym1pdC5fc3VibWl0XCIsIGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0XHRcdGV2ZW50Ll9zdWJtaXRfYnViYmxlID0gdHJ1ZTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRqUXVlcnkuX2RhdGEoIGZvcm0sIFwic3VibWl0QnViYmxlc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0Ly8gcmV0dXJuIHVuZGVmaW5lZCBzaW5jZSB3ZSBkb24ndCBuZWVkIGFuIGV2ZW50IGxpc3RlbmVyXG5cdFx0fSxcblxuXHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0Ly8gSWYgZm9ybSB3YXMgc3VibWl0dGVkIGJ5IHRoZSB1c2VyLCBidWJibGUgdGhlIGV2ZW50IHVwIHRoZSB0cmVlXG5cdFx0XHRpZiAoIGV2ZW50Ll9zdWJtaXRfYnViYmxlICkge1xuXHRcdFx0XHRkZWxldGUgZXZlbnQuX3N1Ym1pdF9idWJibGU7XG5cdFx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICYmICFldmVudC5pc1RyaWdnZXIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBcInN1Ym1pdFwiLCB0aGlzLnBhcmVudE5vZGUsIGV2ZW50LCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gT25seSBuZWVkIHRoaXMgZm9yIGRlbGVnYXRlZCBmb3JtIHN1Ym1pdCBldmVudHNcblx0XHRcdGlmICggalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCBcImZvcm1cIiApICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBkZWxlZ2F0ZWQgaGFuZGxlcnM7IGNsZWFuRGF0YSBldmVudHVhbGx5IHJlYXBzIHN1Ym1pdCBoYW5kbGVycyBhdHRhY2hlZCBhYm92ZVxuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgXCIuX3N1Ym1pdFwiICk7XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBJRSBjaGFuZ2UgZGVsZWdhdGlvbiBhbmQgY2hlY2tib3gvcmFkaW8gZml4XG5pZiAoICFzdXBwb3J0LmNoYW5nZUJ1YmJsZXMgKSB7XG5cblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWwuY2hhbmdlID0ge1xuXG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRpZiAoIHJmb3JtRWxlbXMudGVzdCggdGhpcy5ub2RlTmFtZSApICkge1xuXHRcdFx0XHQvLyBJRSBkb2Vzbid0IGZpcmUgY2hhbmdlIG9uIGEgY2hlY2svcmFkaW8gdW50aWwgYmx1cjsgdHJpZ2dlciBpdCBvbiBjbGlja1xuXHRcdFx0XHQvLyBhZnRlciBhIHByb3BlcnR5Y2hhbmdlLiBFYXQgdGhlIGJsdXItY2hhbmdlIGluIHNwZWNpYWwuY2hhbmdlLmhhbmRsZS5cblx0XHRcdFx0Ly8gVGhpcyBzdGlsbCBmaXJlcyBvbmNoYW5nZSBhIHNlY29uZCB0aW1lIGZvciBjaGVjay9yYWRpbyBhZnRlciBibHVyLlxuXHRcdFx0XHRpZiAoIHRoaXMudHlwZSA9PT0gXCJjaGVja2JveFwiIHx8IHRoaXMudHlwZSA9PT0gXCJyYWRpb1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIFwicHJvcGVydHljaGFuZ2UuX2NoYW5nZVwiLCBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGV2ZW50Lm9yaWdpbmFsRXZlbnQucHJvcGVydHlOYW1lID09PSBcImNoZWNrZWRcIiApIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5fanVzdF9jaGFuZ2VkID0gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCBcImNsaWNrLl9jaGFuZ2VcIiwgZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRcdFx0aWYgKCB0aGlzLl9qdXN0X2NoYW5nZWQgJiYgIWV2ZW50LmlzVHJpZ2dlciApIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5fanVzdF9jaGFuZ2VkID0gZmFsc2U7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHQvLyBBbGxvdyB0cmlnZ2VyZWQsIHNpbXVsYXRlZCBjaGFuZ2UgZXZlbnRzICgjMTE1MDApXG5cdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIFwiY2hhbmdlXCIsIHRoaXMsIGV2ZW50LCB0cnVlICk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0Ly8gRGVsZWdhdGVkIGV2ZW50OyBsYXp5LWFkZCBhIGNoYW5nZSBoYW5kbGVyIG9uIGRlc2NlbmRhbnQgaW5wdXRzXG5cdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCBcImJlZm9yZWFjdGl2YXRlLl9jaGFuZ2VcIiwgZnVuY3Rpb24oIGUgKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gZS50YXJnZXQ7XG5cblx0XHRcdFx0aWYgKCByZm9ybUVsZW1zLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJiAhalF1ZXJ5Ll9kYXRhKCBlbGVtLCBcImNoYW5nZUJ1YmJsZXNcIiApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGVsZW0sIFwiY2hhbmdlLl9jaGFuZ2VcIiwgZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgJiYgIWV2ZW50LmlzU2ltdWxhdGVkICYmICFldmVudC5pc1RyaWdnZXIgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggXCJjaGFuZ2VcIiwgdGhpcy5wYXJlbnROb2RlLCBldmVudCwgdHJ1ZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdGpRdWVyeS5fZGF0YSggZWxlbSwgXCJjaGFuZ2VCdWJibGVzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIGVsZW0gPSBldmVudC50YXJnZXQ7XG5cblx0XHRcdC8vIFN3YWxsb3cgbmF0aXZlIGNoYW5nZSBldmVudHMgZnJvbSBjaGVja2JveC9yYWRpbywgd2UgYWxyZWFkeSB0cmlnZ2VyZWQgdGhlbSBhYm92ZVxuXHRcdFx0aWYgKCB0aGlzICE9PSBlbGVtIHx8IGV2ZW50LmlzU2ltdWxhdGVkIHx8IGV2ZW50LmlzVHJpZ2dlciB8fCAoZWxlbS50eXBlICE9PSBcInJhZGlvXCIgJiYgZWxlbS50eXBlICE9PSBcImNoZWNrYm94XCIpICkge1xuXHRcdFx0XHRyZXR1cm4gZXZlbnQuaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCBcIi5fY2hhbmdlXCIgKTtcblxuXHRcdFx0cmV0dXJuICFyZm9ybUVsZW1zLnRlc3QoIHRoaXMubm9kZU5hbWUgKTtcblx0XHR9XG5cdH07XG59XG5cbi8vIENyZWF0ZSBcImJ1YmJsaW5nXCIgZm9jdXMgYW5kIGJsdXIgZXZlbnRzXG5pZiAoICFzdXBwb3J0LmZvY3VzaW5CdWJibGVzICkge1xuXHRqUXVlcnkuZWFjaCh7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApLCB0cnVlICk7XG5cdFx0XHR9O1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBqUXVlcnkuX2RhdGEoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRqUXVlcnkuX2RhdGEoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGpRdWVyeS5fZGF0YSggZG9jLCBmaXggKSAtIDE7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0XHRqUXVlcnkuX3JlbW92ZURhdGEoIGRvYywgZml4ICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0alF1ZXJ5Ll9kYXRhKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0pO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIC8qSU5URVJOQUwqLyBvbmUgKSB7XG5cdFx0dmFyIHR5cGUsIG9yaWdGbjtcblxuXHRcdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub24oIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cdFx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRcdG9yaWdGbiA9IGZuO1xuXHRcdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0fTtcblx0XHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdFx0fSk7XG5cdH0sXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/IGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6IGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xuXHRcdH0pO1xuXHR9LFxuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0pO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWzBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSk7XG5cblxuZnVuY3Rpb24gY3JlYXRlU2FmZUZyYWdtZW50KCBkb2N1bWVudCApIHtcblx0dmFyIGxpc3QgPSBub2RlTmFtZXMuc3BsaXQoIFwifFwiICksXG5cdFx0c2FmZUZyYWcgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG5cblx0aWYgKCBzYWZlRnJhZy5jcmVhdGVFbGVtZW50ICkge1xuXHRcdHdoaWxlICggbGlzdC5sZW5ndGggKSB7XG5cdFx0XHRzYWZlRnJhZy5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHRsaXN0LnBvcCgpXG5cdFx0XHQpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gc2FmZUZyYWc7XG59XG5cbnZhciBub2RlTmFtZXMgPSBcImFiYnJ8YXJ0aWNsZXxhc2lkZXxhdWRpb3xiZGl8Y2FudmFzfGRhdGF8ZGF0YWxpc3R8ZGV0YWlsc3xmaWdjYXB0aW9ufGZpZ3VyZXxmb290ZXJ8XCIgK1xuXHRcdFwiaGVhZGVyfGhncm91cHxtYXJrfG1ldGVyfG5hdnxvdXRwdXR8cHJvZ3Jlc3N8c2VjdGlvbnxzdW1tYXJ5fHRpbWV8dmlkZW9cIixcblx0cmlubGluZWpRdWVyeSA9IC8galF1ZXJ5XFxkKz1cIig/Om51bGx8XFxkKylcIi9nLFxuXHRybm9zaGltY2FjaGUgPSBuZXcgUmVnRXhwKFwiPCg/OlwiICsgbm9kZU5hbWVzICsgXCIpW1xcXFxzLz5dXCIsIFwiaVwiKSxcblx0cmxlYWRpbmdXaGl0ZXNwYWNlID0gL15cXHMrLyxcblx0cnhodG1sVGFnID0gLzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW1xcdzpdKylbXj5dKilcXC8+L2dpLFxuXHRydGFnTmFtZSA9IC88KFtcXHc6XSspLyxcblx0cnRib2R5ID0gLzx0Ym9keS9pLFxuXHRyaHRtbCA9IC88fCYjP1xcdys7Lyxcblx0cm5vSW5uZXJodG1sID0gLzwoPzpzY3JpcHR8c3R5bGV8bGluaykvaSxcblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0cnNjcmlwdFR5cGUgPSAvXiR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pLFxuXHRyc2NyaXB0VHlwZU1hc2tlZCA9IC9edHJ1ZVxcLyguKikvLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2csXG5cblx0Ly8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcblx0d3JhcE1hcCA9IHtcblx0XHRvcHRpb246IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXSxcblx0XHRsZWdlbmQ6IFsgMSwgXCI8ZmllbGRzZXQ+XCIsIFwiPC9maWVsZHNldD5cIiBdLFxuXHRcdGFyZWE6IFsgMSwgXCI8bWFwPlwiLCBcIjwvbWFwPlwiIF0sXG5cdFx0cGFyYW06IFsgMSwgXCI8b2JqZWN0PlwiLCBcIjwvb2JqZWN0PlwiIF0sXG5cdFx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRcdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0XHRjb2w6IFsgMiwgXCI8dGFibGU+PHRib2R5PjwvdGJvZHk+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHRcdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRcdC8vIElFNi04IGNhbid0IHNlcmlhbGl6ZSBsaW5rLCBzY3JpcHQsIHN0eWxlLCBvciBhbnkgaHRtbDUgKE5vU2NvcGUpIHRhZ3MsXG5cdFx0Ly8gdW5sZXNzIHdyYXBwZWQgaW4gYSBkaXYgd2l0aCBub24tYnJlYWtpbmcgY2hhcmFjdGVycyBpbiBmcm9udCBvZiBpdC5cblx0XHRfZGVmYXVsdDogc3VwcG9ydC5odG1sU2VyaWFsaXplID8gWyAwLCBcIlwiLCBcIlwiIF0gOiBbIDEsIFwiWDxkaXY+XCIsIFwiPC9kaXY+XCIgIF1cblx0fSxcblx0c2FmZUZyYWdtZW50ID0gY3JlYXRlU2FmZUZyYWdtZW50KCBkb2N1bWVudCApLFxuXHRmcmFnbWVudERpdiA9IHNhZmVGcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSApO1xuXG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXHR2YXIgZWxlbXMsIGVsZW0sXG5cdFx0aSA9IDAsXG5cdFx0Zm91bmQgPSB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gc3RydW5kZWZpbmVkID8gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICkgOlxuXHRcdFx0dHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gc3RydW5kZWZpbmVkID8gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0aWYgKCAhZm91bmQgKSB7XG5cdFx0Zm9yICggZm91bmQgPSBbXSwgZWxlbXMgPSBjb250ZXh0LmNoaWxkTm9kZXMgfHwgY29udGV4dDsgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCAhdGFnIHx8IGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgdGFnICkgKSB7XG5cdFx0XHRcdGZvdW5kLnB1c2goIGVsZW0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggZm91bmQsIGdldEFsbCggZWxlbSwgdGFnICkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIGpRdWVyeS5ub2RlTmFtZSggY29udGV4dCwgdGFnICkgP1xuXHRcdGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIGZvdW5kICkgOlxuXHRcdGZvdW5kO1xufVxuXG4vLyBVc2VkIGluIGJ1aWxkRnJhZ21lbnQsIGZpeGVzIHRoZSBkZWZhdWx0Q2hlY2tlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gZml4RGVmYXVsdENoZWNrZWQoIGVsZW0gKSB7XG5cdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWxlbS50eXBlICkgKSB7XG5cdFx0ZWxlbS5kZWZhdWx0Q2hlY2tlZCA9IGVsZW0uY2hlY2tlZDtcblx0fVxufVxuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBNYW5pcHVsYXRpbmcgdGFibGVzIHJlcXVpcmVzIGEgdGJvZHlcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0cmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcblx0XHRqUXVlcnkubm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgP1xuXG5cdFx0ZWxlbS5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRib2R5XCIpWzBdIHx8XG5cdFx0XHRlbGVtLmFwcGVuZENoaWxkKCBlbGVtLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRib2R5XCIpICkgOlxuXHRcdGVsZW07XG59XG5cbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cbmZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XG5cdGVsZW0udHlwZSA9IChqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInR5cGVcIiApICE9PSBudWxsKSArIFwiL1wiICsgZWxlbS50eXBlO1xuXHRyZXR1cm4gZWxlbTtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XG5cdHZhciBtYXRjaCA9IHJzY3JpcHRUeXBlTWFza2VkLmV4ZWMoIGVsZW0udHlwZSApO1xuXHRpZiAoIG1hdGNoICkge1xuXHRcdGVsZW0udHlwZSA9IG1hdGNoWzFdO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKFwidHlwZVwiKTtcblx0fVxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGkgPSAwO1xuXHRmb3IgKCA7IChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRqUXVlcnkuX2RhdGEoIGVsZW0sIFwiZ2xvYmFsRXZhbFwiLCAhcmVmRWxlbWVudHMgfHwgalF1ZXJ5Ll9kYXRhKCByZWZFbGVtZW50c1tpXSwgXCJnbG9iYWxFdmFsXCIgKSApO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxIHx8ICFqUXVlcnkuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0dmFyIHR5cGUsIGksIGwsXG5cdFx0b2xkRGF0YSA9IGpRdWVyeS5fZGF0YSggc3JjICksXG5cdFx0Y3VyRGF0YSA9IGpRdWVyeS5fZGF0YSggZGVzdCwgb2xkRGF0YSApLFxuXHRcdGV2ZW50cyA9IG9sZERhdGEuZXZlbnRzO1xuXG5cdGlmICggZXZlbnRzICkge1xuXHRcdGRlbGV0ZSBjdXJEYXRhLmhhbmRsZTtcblx0XHRjdXJEYXRhLmV2ZW50cyA9IHt9O1xuXG5cdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIG1ha2UgdGhlIGNsb25lZCBwdWJsaWMgZGF0YSBvYmplY3QgYSBjb3B5IGZyb20gdGhlIG9yaWdpbmFsXG5cdGlmICggY3VyRGF0YS5kYXRhICkge1xuXHRcdGN1ckRhdGEuZGF0YSA9IGpRdWVyeS5leHRlbmQoIHt9LCBjdXJEYXRhLmRhdGEgKTtcblx0fVxufVxuXG5mdW5jdGlvbiBmaXhDbG9uZU5vZGVJc3N1ZXMoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lLCBlLCBkYXRhO1xuXG5cdC8vIFdlIGRvIG5vdCBuZWVkIHRvIGRvIGFueXRoaW5nIGZvciBub24tRWxlbWVudHNcblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIElFNi04IGNvcGllcyBldmVudHMgYm91bmQgdmlhIGF0dGFjaEV2ZW50IHdoZW4gdXNpbmcgY2xvbmVOb2RlLlxuXHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVFdmVudCAmJiBkZXN0WyBqUXVlcnkuZXhwYW5kbyBdICkge1xuXHRcdGRhdGEgPSBqUXVlcnkuX2RhdGEoIGRlc3QgKTtcblxuXHRcdGZvciAoIGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGRlc3QsIGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0fVxuXG5cdFx0Ly8gRXZlbnQgZGF0YSBnZXRzIHJlZmVyZW5jZWQgaW5zdGVhZCBvZiBjb3BpZWQgaWYgdGhlIGV4cGFuZG8gZ2V0cyBjb3BpZWQgdG9vXG5cdFx0ZGVzdC5yZW1vdmVBdHRyaWJ1dGUoIGpRdWVyeS5leHBhbmRvICk7XG5cdH1cblxuXHQvLyBJRSBibGFua3MgY29udGVudHMgd2hlbiBjbG9uaW5nIHNjcmlwdHMsIGFuZCB0cmllcyB0byBldmFsdWF0ZSBuZXdseS1zZXQgdGV4dFxuXHRpZiAoIG5vZGVOYW1lID09PSBcInNjcmlwdFwiICYmIGRlc3QudGV4dCAhPT0gc3JjLnRleHQgKSB7XG5cdFx0ZGlzYWJsZVNjcmlwdCggZGVzdCApLnRleHQgPSBzcmMudGV4dDtcblx0XHRyZXN0b3JlU2NyaXB0KCBkZXN0ICk7XG5cblx0Ly8gSUU2LTEwIGltcHJvcGVybHkgY2xvbmVzIGNoaWxkcmVuIG9mIG9iamVjdCBlbGVtZW50cyB1c2luZyBjbGFzc2lkLlxuXHQvLyBJRTEwIHRocm93cyBOb01vZGlmaWNhdGlvbkFsbG93ZWRFcnJvciBpZiBwYXJlbnQgaXMgbnVsbCwgIzEyMTMyLlxuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRpZiAoIGRlc3QucGFyZW50Tm9kZSApIHtcblx0XHRcdGRlc3Qub3V0ZXJIVE1MID0gc3JjLm91dGVySFRNTDtcblx0XHR9XG5cblx0XHQvLyBUaGlzIHBhdGggYXBwZWFycyB1bmF2b2lkYWJsZSBmb3IgSUU5LiBXaGVuIGNsb25pbmcgYW4gb2JqZWN0XG5cdFx0Ly8gZWxlbWVudCBpbiBJRTksIHRoZSBvdXRlckhUTUwgc3RyYXRlZ3kgYWJvdmUgaXMgbm90IHN1ZmZpY2llbnQuXG5cdFx0Ly8gSWYgdGhlIHNyYyBoYXMgaW5uZXJIVE1MIGFuZCB0aGUgZGVzdGluYXRpb24gZG9lcyBub3QsXG5cdFx0Ly8gY29weSB0aGUgc3JjLmlubmVySFRNTCBpbnRvIHRoZSBkZXN0LmlubmVySFRNTC4gIzEwMzI0XG5cdFx0aWYgKCBzdXBwb3J0Lmh0bWw1Q2xvbmUgJiYgKCBzcmMuaW5uZXJIVE1MICYmICFqUXVlcnkudHJpbShkZXN0LmlubmVySFRNTCkgKSApIHtcblx0XHRcdGRlc3QuaW5uZXJIVE1MID0gc3JjLmlubmVySFRNTDtcblx0XHR9XG5cblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdC8vIElFNi04IGZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3hcblx0XHQvLyBvciByYWRpbyBidXR0b24uIFdvcnNlLCBJRTYtNyBmYWlsIHRvIGdpdmUgdGhlIGNsb25lZCBlbGVtZW50XG5cdFx0Ly8gYSBjaGVja2VkIGFwcGVhcmFuY2UgaWYgdGhlIGRlZmF1bHRDaGVja2VkIHZhbHVlIGlzbid0IGFsc28gc2V0XG5cblx0XHRkZXN0LmRlZmF1bHRDaGVja2VkID0gZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0XHQvLyBJRTYtNyBnZXQgY29uZnVzZWQgYW5kIGVuZCB1cCBzZXR0aW5nIHRoZSB2YWx1ZSBvZiBhIGNsb25lZFxuXHRcdC8vIGNoZWNrYm94L3JhZGlvIGJ1dHRvbiB0byBhbiBlbXB0eSBzdHJpbmcgaW5zdGVhZCBvZiBcIm9uXCJcblx0XHRpZiAoIGRlc3QudmFsdWUgIT09IHNyYy52YWx1ZSApIHtcblx0XHRcdGRlc3QudmFsdWUgPSBzcmMudmFsdWU7XG5cdFx0fVxuXG5cdC8vIElFNi04IGZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkXG5cdC8vIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcIm9wdGlvblwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFNlbGVjdGVkID0gZGVzdC5zZWxlY3RlZCA9IHNyYy5kZWZhdWx0U2VsZWN0ZWQ7XG5cblx0Ly8gSUU2LTggZmFpbHMgdG8gc2V0IHRoZSBkZWZhdWx0VmFsdWUgdG8gdGhlIGNvcnJlY3QgdmFsdWUgd2hlblxuXHQvLyBjbG9uaW5nIG90aGVyIHR5cGVzIG9mIGlucHV0IGZpZWxkc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoe1xuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBkZXN0RWxlbWVudHMsIG5vZGUsIGNsb25lLCBpLCBzcmNFbGVtZW50cyxcblx0XHRcdGluUGFnZSA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHRpZiAoIHN1cHBvcnQuaHRtbDVDbG9uZSB8fCBqUXVlcnkuaXNYTUxEb2MoZWxlbSkgfHwgIXJub3NoaW1jYWNoZS50ZXN0KCBcIjxcIiArIGVsZW0ubm9kZU5hbWUgKyBcIj5cIiApICkge1xuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApO1xuXG5cdFx0Ly8gSUU8PTggZG9lcyBub3QgcHJvcGVybHkgY2xvbmUgZGV0YWNoZWQsIHVua25vd24gZWxlbWVudCBub2Rlc1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRmcmFnbWVudERpdi5pbm5lckhUTUwgPSBlbGVtLm91dGVySFRNTDtcblx0XHRcdGZyYWdtZW50RGl2LnJlbW92ZUNoaWxkKCBjbG9uZSA9IGZyYWdtZW50RGl2LmZpcnN0Q2hpbGQgKTtcblx0XHR9XG5cblx0XHRpZiAoICghc3VwcG9ydC5ub0Nsb25lRXZlbnQgfHwgIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQpICYmXG5cdFx0XHRcdChlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExKSAmJiAhalF1ZXJ5LmlzWE1MRG9jKGVsZW0pICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHA6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Ly8gRml4IGFsbCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdFx0Zm9yICggaSA9IDA7IChub2RlID0gc3JjRWxlbWVudHNbaV0pICE9IG51bGw7ICsraSApIHtcblx0XHRcdFx0Ly8gRW5zdXJlIHRoYXQgdGhlIGRlc3RpbmF0aW9uIG5vZGUgaXMgbm90IG51bGw7IEZpeGVzICM5NTg3XG5cdFx0XHRcdGlmICggZGVzdEVsZW1lbnRzW2ldICkge1xuXHRcdFx0XHRcdGZpeENsb25lTm9kZUlzc3Vlcyggbm9kZSwgZGVzdEVsZW1lbnRzW2ldICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgKG5vZGUgPSBzcmNFbGVtZW50c1tpXSkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBub2RlLCBkZXN0RWxlbWVudHNbaV0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0ZGVzdEVsZW1lbnRzID0gc3JjRWxlbWVudHMgPSBub2RlID0gbnVsbDtcblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRidWlsZEZyYWdtZW50OiBmdW5jdGlvbiggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiApIHtcblx0XHR2YXIgaiwgZWxlbSwgY29udGFpbnMsXG5cdFx0XHR0bXAsIHRhZywgdGJvZHksIHdyYXAsXG5cdFx0XHRsID0gZWxlbXMubGVuZ3RoLFxuXG5cdFx0XHQvLyBFbnN1cmUgYSBzYWZlIGZyYWdtZW50XG5cdFx0XHRzYWZlID0gY3JlYXRlU2FmZUZyYWdtZW50KCBjb250ZXh0ICksXG5cblx0XHRcdG5vZGVzID0gW10sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdFx0aWYgKCBqUXVlcnkudHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAgfHwgc2FmZS5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpICk7XG5cblx0XHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdFx0dGFnID0gKHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSlbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXG5cdFx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbMV0gKyBlbGVtLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApICsgd3JhcFsyXTtcblxuXHRcdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRcdGogPSB3cmFwWzBdO1xuXHRcdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBNYW51YWxseSBhZGQgbGVhZGluZyB3aGl0ZXNwYWNlIHJlbW92ZWQgYnkgSUVcblx0XHRcdFx0XHRpZiAoICFzdXBwb3J0LmxlYWRpbmdXaGl0ZXNwYWNlICYmIHJsZWFkaW5nV2hpdGVzcGFjZS50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBybGVhZGluZ1doaXRlc3BhY2UuZXhlYyggZWxlbSApWzBdICkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBSZW1vdmUgSUUncyBhdXRvaW5zZXJ0ZWQgPHRib2R5PiBmcm9tIHRhYmxlIGZyYWdtZW50c1xuXHRcdFx0XHRcdGlmICggIXN1cHBvcnQudGJvZHkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN0cmluZyB3YXMgYSA8dGFibGU+LCAqbWF5KiBoYXZlIHNwdXJpb3VzIDx0Ym9keT5cblx0XHRcdFx0XHRcdGVsZW0gPSB0YWcgPT09IFwidGFibGVcIiAmJiAhcnRib2R5LnRlc3QoIGVsZW0gKSA/XG5cdFx0XHRcdFx0XHRcdHRtcC5maXJzdENoaWxkIDpcblxuXHRcdFx0XHRcdFx0XHQvLyBTdHJpbmcgd2FzIGEgYmFyZSA8dGhlYWQ+IG9yIDx0Zm9vdD5cblx0XHRcdFx0XHRcdFx0d3JhcFsxXSA9PT0gXCI8dGFibGU+XCIgJiYgIXJ0Ym9keS50ZXN0KCBlbGVtICkgP1xuXHRcdFx0XHRcdFx0XHRcdHRtcCA6XG5cdFx0XHRcdFx0XHRcdFx0MDtcblxuXHRcdFx0XHRcdFx0aiA9IGVsZW0gJiYgZWxlbS5jaGlsZE5vZGVzLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5ub2RlTmFtZSggKHRib2R5ID0gZWxlbS5jaGlsZE5vZGVzW2pdKSwgXCJ0Ym9keVwiICkgJiYgIXRib2R5LmNoaWxkTm9kZXMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0XHRcdGVsZW0ucmVtb3ZlQ2hpbGQoIHRib2R5ICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdFx0Ly8gRml4ICMxMjM5MiBmb3IgV2ViS2l0IGFuZCBJRSA+IDlcblx0XHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdFx0XHRcdFx0Ly8gRml4ICMxMjM5MiBmb3Igb2xkSUVcblx0XHRcdFx0XHR3aGlsZSAoIHRtcC5maXJzdENoaWxkICkge1xuXHRcdFx0XHRcdFx0dG1wLnJlbW92ZUNoaWxkKCB0bXAuZmlyc3RDaGlsZCApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyIGZvciBwcm9wZXIgY2xlYW51cFxuXHRcdFx0XHRcdHRtcCA9IHNhZmUubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRml4ICMxMTM1NjogQ2xlYXIgZWxlbWVudHMgZnJvbSBmcmFnbWVudFxuXHRcdGlmICggdG1wICkge1xuXHRcdFx0c2FmZS5yZW1vdmVDaGlsZCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmVzZXQgZGVmYXVsdENoZWNrZWQgZm9yIGFueSByYWRpb3MgYW5kIGNoZWNrYm94ZXNcblx0XHQvLyBhYm91dCB0byBiZSBhcHBlbmRlZCB0byB0aGUgRE9NIGluIElFIDYvNyAoIzgwNjApXG5cdFx0aWYgKCAhc3VwcG9ydC5hcHBlbmRDaGVja2VkICkge1xuXHRcdFx0alF1ZXJ5LmdyZXAoIGdldEFsbCggbm9kZXMsIFwiaW5wdXRcIiApLCBmaXhEZWZhdWx0Q2hlY2tlZCApO1xuXHRcdH1cblxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKGVsZW0gPSBub2Rlc1sgaSsrIF0pICkge1xuXG5cdFx0XHQvLyAjNDA4NyAtIElmIG9yaWdpbiBhbmQgZGVzdGluYXRpb24gZWxlbWVudHMgYXJlIHRoZSBzYW1lLCBhbmQgdGhpcyBpc1xuXHRcdFx0Ly8gdGhhdCBlbGVtZW50LCBkbyBub3QgZG8gYW55dGhpbmdcblx0XHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSAhPT0gLTEgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRjb250YWlucyA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdFx0dG1wID0gZ2V0QWxsKCBzYWZlLmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdFx0aWYgKCBjb250YWlucyApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSB0bXBbIGorKyBdKSApIHtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHR0bXAgPSBudWxsO1xuXG5cdFx0cmV0dXJuIHNhZmU7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMsIC8qIGludGVybmFsICovIGFjY2VwdERhdGEgKSB7XG5cdFx0dmFyIGVsZW0sIHR5cGUsIGlkLCBkYXRhLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRpbnRlcm5hbEtleSA9IGpRdWVyeS5leHBhbmRvLFxuXHRcdFx0Y2FjaGUgPSBqUXVlcnkuY2FjaGUsXG5cdFx0XHRkZWxldGVFeHBhbmRvID0gc3VwcG9ydC5kZWxldGVFeHBhbmRvLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsO1xuXG5cdFx0Zm9yICggOyAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEgfHwgalF1ZXJ5LmFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHRpZCA9IGVsZW1bIGludGVybmFsS2V5IF07XG5cdFx0XHRcdGRhdGEgPSBpZCAmJiBjYWNoZVsgaWQgXTtcblxuXHRcdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUmVtb3ZlIGNhY2hlIG9ubHkgaWYgaXQgd2FzIG5vdCBhbHJlYWR5IHJlbW92ZWQgYnkgalF1ZXJ5LmV2ZW50LnJlbW92ZVxuXHRcdFx0XHRcdGlmICggY2FjaGVbIGlkIF0gKSB7XG5cblx0XHRcdFx0XHRcdGRlbGV0ZSBjYWNoZVsgaWQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gSUUgZG9lcyBub3QgYWxsb3cgdXMgdG8gZGVsZXRlIGV4cGFuZG8gcHJvcGVydGllcyBmcm9tIG5vZGVzLFxuXHRcdFx0XHRcdFx0Ly8gbm9yIGRvZXMgaXQgaGF2ZSBhIHJlbW92ZUF0dHJpYnV0ZSBmdW5jdGlvbiBvbiBEb2N1bWVudCBub2Rlcztcblx0XHRcdFx0XHRcdC8vIHdlIG11c3QgaGFuZGxlIGFsbCBvZiB0aGVzZSBjYXNlc1xuXHRcdFx0XHRcdFx0aWYgKCBkZWxldGVFeHBhbmRvICkge1xuXHRcdFx0XHRcdFx0XHRkZWxldGUgZWxlbVsgaW50ZXJuYWxLZXkgXTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIGVsZW0ucmVtb3ZlQXR0cmlidXRlICE9PSBzdHJ1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBpbnRlcm5hbEtleSApO1xuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRlbGVtWyBpbnRlcm5hbEtleSBdID0gbnVsbDtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0ZGVsZXRlZElkcy5wdXNoKCBpZCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSk7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggKCB0aGlzWzBdICYmIHRoaXNbMF0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApLmNyZWF0ZVRleHROb2RlKCB2YWx1ZSApICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZG9tTWFuaXAoIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZG9tTWFuaXAoIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5kb21NYW5pcCggYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IsIGtlZXBEYXRhIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0ZWxlbXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCB0aGlzICkgOiB0aGlzLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblxuXHRcdFx0aWYgKCAha2VlcERhdGEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtICkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGlmICgga2VlcERhdGEgJiYgalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHtcblx0XHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoZWxlbSA9IHRoaXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdHdoaWxlICggZWxlbS5maXJzdENoaWxkICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUNoaWxkKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHNlbGVjdCwgZW5zdXJlIHRoYXQgaXQgZGlzcGxheXMgZW1wdHkgKCMxMjMzNilcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHRcdGlmICggZWxlbS5vcHRpb25zICYmIGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJzZWxlY3RcIiApICkge1xuXHRcdFx0XHRlbGVtLm9wdGlvbnMubGVuZ3RoID0gMDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9KTtcblx0fSxcblxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDEgP1xuXHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MLnJlcGxhY2UoIHJpbmxpbmVqUXVlcnksIFwiXCIgKSA6XG5cdFx0XHRcdFx0dW5kZWZpbmVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0KCBzdXBwb3J0Lmh0bWxTZXJpYWxpemUgfHwgIXJub3NoaW1jYWNoZS50ZXN0KCB2YWx1ZSApICApICYmXG5cdFx0XHRcdCggc3VwcG9ydC5sZWFkaW5nV2hpdGVzcGFjZSB8fCAhcmxlYWRpbmdXaGl0ZXNwYWNlLnRlc3QoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQhd3JhcE1hcFsgKHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0pWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0gdmFsdWUucmVwbGFjZSggcnhodG1sVGFnLCBcIjwkMT48LyQyPlwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbaV0gfHwge307XG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoKGUpIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgYXJnID0gYXJndW1lbnRzWyAwIF07XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHR0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0YXJnID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXG5cdFx0XHRpZiAoIGFyZyApIHtcblx0XHRcdFx0YXJnLnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ly8gRm9yY2UgcmVtb3ZhbCBpZiB0aGVyZSB3YXMgbm8gbmV3IGNvbnRlbnQgKGUuZy4sIGZyb20gZW1wdHkgYXJndW1lbnRzKVxuXHRcdHJldHVybiBhcmcgJiYgKGFyZy5sZW5ndGggfHwgYXJnLm5vZGVUeXBlKSA/IHRoaXMgOiB0aGlzLnJlbW92ZSgpO1xuXHR9LFxuXG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnJlbW92ZSggc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRkb21NYW5pcDogZnVuY3Rpb24oIGFyZ3MsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdGFyZ3MgPSBjb25jYXQuYXBwbHkoIFtdLCBhcmdzICk7XG5cblx0XHR2YXIgZmlyc3QsIG5vZGUsIGhhc1NjcmlwdHMsXG5cdFx0XHRzY3JpcHRzLCBkb2MsIGZyYWdtZW50LFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZXQgPSB0aGlzLFxuXHRcdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHRcdHZhbHVlID0gYXJnc1swXSxcblx0XHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRcdGlmICggaXNGdW5jdGlvbiB8fFxuXHRcdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHRcdHZhciBzZWxmID0gc2V0LmVxKCBpbmRleCApO1xuXHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdFx0YXJnc1swXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHNlbGYuZG9tTWFuaXAoIGFyZ3MsIGNhbGxiYWNrICk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAoIGwgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGpRdWVyeS5idWlsZEZyYWdtZW50KCBhcmdzLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIHRoaXMgKTtcblx0XHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBmaXJzdCApIHtcblx0XHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbSBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGNhbGxiYWNrLmNhbGwoIHRoaXNbaV0sIG5vZGUsIGkgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdFx0IWpRdWVyeS5fZGF0YSggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJiBqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoICggbm9kZS50ZXh0IHx8IG5vZGUudGV4dENvbnRlbnQgfHwgbm9kZS5pbm5lckhUTUwgfHwgXCJcIiApLnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGaXggIzExODA5OiBBdm9pZCBsZWFraW5nIG1lbW9yeVxuXHRcdFx0XHRmcmFnbWVudCA9IGZpcnN0ID0gbnVsbDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSk7XG5cbmpRdWVyeS5lYWNoKHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdGkgPSAwLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXG5cdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDE7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUodHJ1ZSk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFtpXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xuXG5cdFx0XHQvLyBNb2Rlcm4gYnJvd3NlcnMgY2FuIGFwcGx5IGpRdWVyeSBjb2xsZWN0aW9ucyBhcyBhcnJheXMsIGJ1dCBvbGRJRSBuZWVkcyBhIC5nZXQoKVxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59KTtcblxuXG52YXIgaWZyYW1lLFxuXHRlbGVtZGlzcGxheSA9IHt9O1xuXG4vKipcbiAqIFJldHJpZXZlIHRoZSBhY3R1YWwgZGlzcGxheSBvZiBhIGVsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG5vZGVOYW1lIG9mIHRoZSBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gZG9jIERvY3VtZW50IG9iamVjdFxuICovXG4vLyBDYWxsZWQgb25seSBmcm9tIHdpdGhpbiBkZWZhdWx0RGlzcGxheVxuZnVuY3Rpb24gYWN0dWFsRGlzcGxheSggbmFtZSwgZG9jICkge1xuXHR2YXIgc3R5bGUsXG5cdFx0ZWxlbSA9IGpRdWVyeSggZG9jLmNyZWF0ZUVsZW1lbnQoIG5hbWUgKSApLmFwcGVuZFRvKCBkb2MuYm9keSApLFxuXG5cdFx0Ly8gZ2V0RGVmYXVsdENvbXB1dGVkU3R5bGUgbWlnaHQgYmUgcmVsaWFibHkgdXNlZCBvbmx5IG9uIGF0dGFjaGVkIGVsZW1lbnRcblx0XHRkaXNwbGF5ID0gd2luZG93LmdldERlZmF1bHRDb21wdXRlZFN0eWxlICYmICggc3R5bGUgPSB3aW5kb3cuZ2V0RGVmYXVsdENvbXB1dGVkU3R5bGUoIGVsZW1bIDAgXSApICkgP1xuXG5cdFx0XHQvLyBVc2Ugb2YgdGhpcyBtZXRob2QgaXMgYSB0ZW1wb3JhcnkgZml4IChtb3JlIGxpa2Ugb3B0bWl6YXRpb24pIHVudGlsIHNvbWV0aGluZyBiZXR0ZXIgY29tZXMgYWxvbmcsXG5cdFx0XHQvLyBzaW5jZSBpdCB3YXMgcmVtb3ZlZCBmcm9tIHNwZWNpZmljYXRpb24gYW5kIHN1cHBvcnRlZCBvbmx5IGluIEZGXG5cdFx0XHRzdHlsZS5kaXNwbGF5IDogalF1ZXJ5LmNzcyggZWxlbVsgMCBdLCBcImRpc3BsYXlcIiApO1xuXG5cdC8vIFdlIGRvbid0IGhhdmUgYW55IGRhdGEgc3RvcmVkIG9uIHRoZSBlbGVtZW50LFxuXHQvLyBzbyB1c2UgXCJkZXRhY2hcIiBtZXRob2QgYXMgZmFzdCB3YXkgdG8gZ2V0IHJpZCBvZiB0aGUgZWxlbWVudFxuXHRlbGVtLmRldGFjaCgpO1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG4vKipcbiAqIFRyeSB0byBkZXRlcm1pbmUgdGhlIGRlZmF1bHQgZGlzcGxheSB2YWx1ZSBvZiBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gbm9kZU5hbWVcbiAqL1xuZnVuY3Rpb24gZGVmYXVsdERpc3BsYXkoIG5vZGVOYW1lICkge1xuXHR2YXIgZG9jID0gZG9jdW1lbnQsXG5cdFx0ZGlzcGxheSA9IGVsZW1kaXNwbGF5WyBub2RlTmFtZSBdO1xuXG5cdGlmICggIWRpc3BsYXkgKSB7XG5cdFx0ZGlzcGxheSA9IGFjdHVhbERpc3BsYXkoIG5vZGVOYW1lLCBkb2MgKTtcblxuXHRcdC8vIElmIHRoZSBzaW1wbGUgd2F5IGZhaWxzLCByZWFkIGZyb20gaW5zaWRlIGFuIGlmcmFtZVxuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgfHwgIWRpc3BsYXkgKSB7XG5cblx0XHRcdC8vIFVzZSB0aGUgYWxyZWFkeS1jcmVhdGVkIGlmcmFtZSBpZiBwb3NzaWJsZVxuXHRcdFx0aWZyYW1lID0gKGlmcmFtZSB8fCBqUXVlcnkoIFwiPGlmcmFtZSBmcmFtZWJvcmRlcj0nMCcgd2lkdGg9JzAnIGhlaWdodD0nMCcvPlwiICkpLmFwcGVuZFRvKCBkb2MuZG9jdW1lbnRFbGVtZW50ICk7XG5cblx0XHRcdC8vIEFsd2F5cyB3cml0ZSBhIG5ldyBIVE1MIHNrZWxldG9uIHNvIFdlYmtpdCBhbmQgRmlyZWZveCBkb24ndCBjaG9rZSBvbiByZXVzZVxuXHRcdFx0ZG9jID0gKCBpZnJhbWVbIDAgXS5jb250ZW50V2luZG93IHx8IGlmcmFtZVsgMCBdLmNvbnRlbnREb2N1bWVudCApLmRvY3VtZW50O1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRVxuXHRcdFx0ZG9jLndyaXRlKCk7XG5cdFx0XHRkb2MuY2xvc2UoKTtcblxuXHRcdFx0ZGlzcGxheSA9IGFjdHVhbERpc3BsYXkoIG5vZGVOYW1lLCBkb2MgKTtcblx0XHRcdGlmcmFtZS5kZXRhY2goKTtcblx0XHR9XG5cblx0XHQvLyBTdG9yZSB0aGUgY29ycmVjdCBkZWZhdWx0IGRpc3BsYXlcblx0XHRlbGVtZGlzcGxheVsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cdH1cblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuXG4oZnVuY3Rpb24oKSB7XG5cdHZhciBzaHJpbmtXcmFwQmxvY2tzVmFsO1xuXG5cdHN1cHBvcnQuc2hyaW5rV3JhcEJsb2NrcyA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggc2hyaW5rV3JhcEJsb2Nrc1ZhbCAhPSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHNocmlua1dyYXBCbG9ja3NWYWw7XG5cdFx0fVxuXG5cdFx0Ly8gV2lsbCBiZSBjaGFuZ2VkIGxhdGVyIGlmIG5lZWRlZC5cblx0XHRzaHJpbmtXcmFwQmxvY2tzVmFsID0gZmFsc2U7XG5cblx0XHQvLyBNaW5pZmllZDogdmFyIGIsYyxkXG5cdFx0dmFyIGRpdiwgYm9keSwgY29udGFpbmVyO1xuXG5cdFx0Ym9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcImJvZHlcIiApWyAwIF07XG5cdFx0aWYgKCAhYm9keSB8fCAhYm9keS5zdHlsZSApIHtcblx0XHRcdC8vIFRlc3QgZmlyZWQgdG9vIGVhcmx5IG9yIGluIGFuIHVuc3VwcG9ydGVkIGVudmlyb25tZW50LCBleGl0LlxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFNldHVwXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7Ym9yZGVyOjA7d2lkdGg6MDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHhcIjtcblx0XHRib2R5LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRTZcblx0XHQvLyBDaGVjayBpZiBlbGVtZW50cyB3aXRoIGxheW91dCBzaHJpbmstd3JhcCB0aGVpciBjaGlsZHJlblxuXHRcdGlmICggdHlwZW9mIGRpdi5zdHlsZS56b29tICE9PSBzdHJ1bmRlZmluZWQgKSB7XG5cdFx0XHQvLyBSZXNldCBDU1M6IGJveC1zaXppbmc7IGRpc3BsYXk7IG1hcmdpbjsgYm9yZGVyXG5cdFx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjksIEFuZHJvaWQgMi4zXG5cdFx0XHRcdC8vIFZlbmRvci1wcmVmaXggYm94LXNpemluZ1xuXHRcdFx0XHRcIi13ZWJraXQtYm94LXNpemluZzpjb250ZW50LWJveDstbW96LWJveC1zaXppbmc6Y29udGVudC1ib3g7XCIgK1xuXHRcdFx0XHRcImJveC1zaXppbmc6Y29udGVudC1ib3g7ZGlzcGxheTpibG9jazttYXJnaW46MDtib3JkZXI6MDtcIiArXG5cdFx0XHRcdFwicGFkZGluZzoxcHg7d2lkdGg6MXB4O3pvb206MVwiO1xuXHRcdFx0ZGl2LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKS5zdHlsZS53aWR0aCA9IFwiNXB4XCI7XG5cdFx0XHRzaHJpbmtXcmFwQmxvY2tzVmFsID0gZGl2Lm9mZnNldFdpZHRoICE9PSAzO1xuXHRcdH1cblxuXHRcdGJvZHkucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0cmV0dXJuIHNocmlua1dyYXBCbG9ja3NWYWw7XG5cdH07XG5cbn0pKCk7XG52YXIgcm1hcmdpbiA9ICgvXm1hcmdpbi8pO1xuXG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cblxuXG52YXIgZ2V0U3R5bGVzLCBjdXJDU1MsXG5cdHJwb3NpdGlvbiA9IC9eKHRvcHxyaWdodHxib3R0b218bGVmdCkkLztcblxuaWYgKCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSApIHtcblx0Z2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0Ly8gU3VwcG9ydDogSUU8PTExKywgRmlyZWZveDw9MzArICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHRpZiAoIGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5vcGVuZXIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0sIG51bGwgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGVsZW0sIG51bGwgKTtcblx0fTtcblxuXHRjdXJDU1MgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdFx0dmFyIHdpZHRoLCBtaW5XaWR0aCwgbWF4V2lkdGgsIHJldCxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0XHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG9ubHkgbmVlZGVkIGZvciAuY3NzKCdmaWx0ZXInKSBpbiBJRTksIHNlZSAjMTI1Mzdcblx0XHRyZXQgPSBjb21wdXRlZCA/IGNvbXB1dGVkLmdldFByb3BlcnR5VmFsdWUoIG5hbWUgKSB8fCBjb21wdXRlZFsgbmFtZSBdIDogdW5kZWZpbmVkO1xuXG5cdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0aWYgKCByZXQgPT09IFwiXCIgJiYgIWpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgKSB7XG5cdFx0XHRcdHJldCA9IGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0XHQvLyBDaHJvbWUgPCAxNyBhbmQgU2FmYXJpIDUuMCB1c2VzIFwiY29tcHV0ZWQgdmFsdWVcIiBpbnN0ZWFkIG9mIFwidXNlZCB2YWx1ZVwiIGZvciBtYXJnaW4tcmlnaHRcblx0XHRcdC8vIFNhZmFyaSA1LjEuNyAoYXQgbGVhc3QpIHJldHVybnMgcGVyY2VudGFnZSBmb3IgYSBsYXJnZXIgc2V0IG9mIHZhbHVlcywgYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVsc1xuXHRcdFx0Ly8gdGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOiBodHRwOi8vZGV2LnczLm9yZy9jc3N3Zy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0XHRpZiAoIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiBybWFyZ2luLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRcdG1pbldpZHRoID0gc3R5bGUubWluV2lkdGg7XG5cdFx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0XHRzdHlsZS5taW5XaWR0aCA9IHN0eWxlLm1heFdpZHRoID0gc3R5bGUud2lkdGggPSByZXQ7XG5cdFx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdFx0c3R5bGUud2lkdGggPSB3aWR0aDtcblx0XHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0dXJuIHJldCA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHJldCA6XG5cdFx0XHRyZXQgKyBcIlwiO1xuXHR9O1xufSBlbHNlIGlmICggZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmN1cnJlbnRTdHlsZSApIHtcblx0Z2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0uY3VycmVudFN0eWxlO1xuXHR9O1xuXG5cdGN1ckNTUyA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBjb21wdXRlZCApIHtcblx0XHR2YXIgbGVmdCwgcnMsIHJzTGVmdCwgcmV0LFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRyZXQgPSBjb21wdXRlZCA/IGNvbXB1dGVkWyBuYW1lIF0gOiB1bmRlZmluZWQ7XG5cblx0XHQvLyBBdm9pZCBzZXR0aW5nIHJldCB0byBlbXB0eSBzdHJpbmcgaGVyZVxuXHRcdC8vIHNvIHdlIGRvbid0IGRlZmF1bHQgdG8gYXV0b1xuXHRcdGlmICggcmV0ID09IG51bGwgJiYgc3R5bGUgJiYgc3R5bGVbIG5hbWUgXSApIHtcblx0XHRcdHJldCA9IHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gRnJvbSB0aGUgYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1xuXHRcdC8vIGh0dHA6Ly9lcmlrLmVhZS5uZXQvYXJjaGl2ZXMvMjAwNy8wNy8yNy8xOC41NC4xNS8jY29tbWVudC0xMDIyOTFcblxuXHRcdC8vIElmIHdlJ3JlIG5vdCBkZWFsaW5nIHdpdGggYSByZWd1bGFyIHBpeGVsIG51bWJlclxuXHRcdC8vIGJ1dCBhIG51bWJlciB0aGF0IGhhcyBhIHdlaXJkIGVuZGluZywgd2UgbmVlZCB0byBjb252ZXJ0IGl0IHRvIHBpeGVsc1xuXHRcdC8vIGJ1dCBub3QgcG9zaXRpb24gY3NzIGF0dHJpYnV0ZXMsIGFzIHRob3NlIGFyZSBwcm9wb3J0aW9uYWwgdG8gdGhlIHBhcmVudCBlbGVtZW50IGluc3RlYWRcblx0XHQvLyBhbmQgd2UgY2FuJ3QgbWVhc3VyZSB0aGUgcGFyZW50IGluc3RlYWQgYmVjYXVzZSBpdCBtaWdodCB0cmlnZ2VyIGEgXCJzdGFja2luZyBkb2xsc1wiIHByb2JsZW1cblx0XHRpZiAoIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiAhcnBvc2l0aW9uLnRlc3QoIG5hbWUgKSApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0bGVmdCA9IHN0eWxlLmxlZnQ7XG5cdFx0XHRycyA9IGVsZW0ucnVudGltZVN0eWxlO1xuXHRcdFx0cnNMZWZ0ID0gcnMgJiYgcnMubGVmdDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0aWYgKCByc0xlZnQgKSB7XG5cdFx0XHRcdHJzLmxlZnQgPSBlbGVtLmN1cnJlbnRTdHlsZS5sZWZ0O1xuXHRcdFx0fVxuXHRcdFx0c3R5bGUubGVmdCA9IG5hbWUgPT09IFwiZm9udFNpemVcIiA/IFwiMWVtXCIgOiByZXQ7XG5cdFx0XHRyZXQgPSBzdHlsZS5waXhlbExlZnQgKyBcInB4XCI7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLmxlZnQgPSBsZWZ0O1xuXHRcdFx0aWYgKCByc0xlZnQgKSB7XG5cdFx0XHRcdHJzLmxlZnQgPSByc0xlZnQ7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUVcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldHVybiByZXQgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRyZXQgOlxuXHRcdFx0cmV0ICsgXCJcIiB8fCBcImF1dG9cIjtcblx0fTtcbn1cblxuXG5cblxuZnVuY3Rpb24gYWRkR2V0SG9va0lmKCBjb25kaXRpb25GbiwgaG9va0ZuICkge1xuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY29uZGl0aW9uID0gY29uZGl0aW9uRm4oKTtcblxuXHRcdFx0aWYgKCBjb25kaXRpb24gPT0gbnVsbCApIHtcblx0XHRcdFx0Ly8gVGhlIHRlc3Qgd2FzIG5vdCByZWFkeSBhdCB0aGlzIHBvaW50OyBzY3JldyB0aGUgaG9vayB0aGlzIHRpbWVcblx0XHRcdFx0Ly8gYnV0IGNoZWNrIGFnYWluIHdoZW4gbmVlZGVkIG5leHQgdGltZS5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGNvbmRpdGlvbiApIHtcblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksXG5cdFx0XHRcdC8vIHJlbW92ZSBpdC5cblx0XHRcdFx0Ly8gU2luY2UgdGhlcmUgYXJlIG5vIG90aGVyIGhvb2tzIGZvciBtYXJnaW5SaWdodCwgcmVtb3ZlIHRoZSB3aG9sZSBvYmplY3QuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblxuXHRcdFx0cmV0dXJuICh0aGlzLmdldCA9IGhvb2tGbikuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG4oZnVuY3Rpb24oKSB7XG5cdC8vIE1pbmlmaWVkOiB2YXIgYixjLGQsZSxmLGcsIGgsaVxuXHR2YXIgZGl2LCBzdHlsZSwgYSwgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsXG5cdFx0cmVsaWFibGVIaWRkZW5PZmZzZXRzVmFsLCByZWxpYWJsZU1hcmdpblJpZ2h0VmFsO1xuXG5cdC8vIFNldHVwXG5cdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblx0ZGl2LmlubmVySFRNTCA9IFwiICA8bGluay8+PHRhYmxlPjwvdGFibGU+PGEgaHJlZj0nL2EnPmE8L2E+PGlucHV0IHR5cGU9J2NoZWNrYm94Jy8+XCI7XG5cdGEgPSBkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwiYVwiIClbIDAgXTtcblx0c3R5bGUgPSBhICYmIGEuc3R5bGU7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0c3R5bGUuY3NzVGV4dCA9IFwiZmxvYXQ6bGVmdDtvcGFjaXR5Oi41XCI7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHQvLyBNYWtlIHN1cmUgdGhhdCBlbGVtZW50IG9wYWNpdHkgZXhpc3RzIChhcyBvcHBvc2VkIHRvIGZpbHRlcilcblx0c3VwcG9ydC5vcGFjaXR5ID0gc3R5bGUub3BhY2l0eSA9PT0gXCIwLjVcIjtcblxuXHQvLyBWZXJpZnkgc3R5bGUgZmxvYXQgZXhpc3RlbmNlXG5cdC8vIChJRSB1c2VzIHN0eWxlRmxvYXQgaW5zdGVhZCBvZiBjc3NGbG9hdClcblx0c3VwcG9ydC5jc3NGbG9hdCA9ICEhc3R5bGUuY3NzRmxvYXQ7XG5cblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjksIEFuZHJvaWQgMi4zXG5cdC8vIFZlbmRvci1wcmVmaXggYm94LXNpemluZ1xuXHRzdXBwb3J0LmJveFNpemluZyA9IHN0eWxlLmJveFNpemluZyA9PT0gXCJcIiB8fCBzdHlsZS5Nb3pCb3hTaXppbmcgPT09IFwiXCIgfHxcblx0XHRzdHlsZS5XZWJraXRCb3hTaXppbmcgPT09IFwiXCI7XG5cblx0alF1ZXJ5LmV4dGVuZChzdXBwb3J0LCB7XG5cdFx0cmVsaWFibGVIaWRkZW5PZmZzZXRzOiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggcmVsaWFibGVIaWRkZW5PZmZzZXRzVmFsID09IG51bGwgKSB7XG5cdFx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVIaWRkZW5PZmZzZXRzVmFsO1xuXHRcdH0sXG5cblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGJveFNpemluZ1JlbGlhYmxlVmFsID09IG51bGwgKSB7XG5cdFx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblxuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBwaXhlbFBvc2l0aW9uVmFsID09IG51bGwgKSB7XG5cdFx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcblx0XHR9LFxuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjNcblx0XHRyZWxpYWJsZU1hcmdpblJpZ2h0OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggcmVsaWFibGVNYXJnaW5SaWdodFZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luUmlnaHRWYWw7XG5cdFx0fVxuXHR9KTtcblxuXHRmdW5jdGlvbiBjb21wdXRlU3R5bGVUZXN0cygpIHtcblx0XHQvLyBNaW5pZmllZDogdmFyIGIsYyxkLGpcblx0XHR2YXIgZGl2LCBib2R5LCBjb250YWluZXIsIGNvbnRlbnRzO1xuXG5cdFx0Ym9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcImJvZHlcIiApWyAwIF07XG5cdFx0aWYgKCAhYm9keSB8fCAhYm9keS5zdHlsZSApIHtcblx0XHRcdC8vIFRlc3QgZmlyZWQgdG9vIGVhcmx5IG9yIGluIGFuIHVuc3VwcG9ydGVkIGVudmlyb25tZW50LCBleGl0LlxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFNldHVwXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7Ym9yZGVyOjA7d2lkdGg6MDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHhcIjtcblx0XHRib2R5LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI5LCBBbmRyb2lkIDIuM1xuXHRcdFx0Ly8gVmVuZG9yLXByZWZpeCBib3gtc2l6aW5nXG5cdFx0XHRcIi13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94Oy1tb3otYm94LXNpemluZzpib3JkZXItYm94O1wiICtcblx0XHRcdFwiYm94LXNpemluZzpib3JkZXItYm94O2Rpc3BsYXk6YmxvY2s7bWFyZ2luLXRvcDoxJTt0b3A6MSU7XCIgK1xuXHRcdFx0XCJib3JkZXI6MXB4O3BhZGRpbmc6MXB4O3dpZHRoOjRweDtwb3NpdGlvbjphYnNvbHV0ZVwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIEFzc3VtZSByZWFzb25hYmxlIHZhbHVlcyBpbiB0aGUgYWJzZW5jZSBvZiBnZXRDb21wdXRlZFN0eWxlXG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGJveFNpemluZ1JlbGlhYmxlVmFsID0gZmFsc2U7XG5cdFx0cmVsaWFibGVNYXJnaW5SaWdodFZhbCA9IHRydWU7XG5cblx0XHQvLyBDaGVjayBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSBzbyB0aGF0IHRoaXMgY29kZSBpcyBub3QgcnVuIGluIElFPDkuXG5cdFx0aWYgKCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSApIHtcblx0XHRcdHBpeGVsUG9zaXRpb25WYWwgPSAoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYsIG51bGwgKSB8fCB7fSApLnRvcCAhPT0gXCIxJVwiO1xuXHRcdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPVxuXHRcdFx0XHQoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYsIG51bGwgKSB8fCB7IHdpZHRoOiBcIjRweFwiIH0gKS53aWR0aCA9PT0gXCI0cHhcIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjNcblx0XHRcdC8vIERpdiB3aXRoIGV4cGxpY2l0IHdpZHRoIGFuZCBubyBtYXJnaW4tcmlnaHQgaW5jb3JyZWN0bHlcblx0XHRcdC8vIGdldHMgY29tcHV0ZWQgbWFyZ2luLXJpZ2h0IGJhc2VkIG9uIHdpZHRoIG9mIGNvbnRhaW5lciAoIzMzMzMpXG5cdFx0XHQvLyBXZWJLaXQgQnVnIDEzMzQzIC0gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHdyb25nIHZhbHVlIGZvciBtYXJnaW4tcmlnaHRcblx0XHRcdGNvbnRlbnRzID0gZGl2LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0Ly8gUmVzZXQgQ1NTOiBib3gtc2l6aW5nOyBkaXNwbGF5OyBtYXJnaW47IGJvcmRlcjsgcGFkZGluZ1xuXHRcdFx0Y29udGVudHMuc3R5bGUuY3NzVGV4dCA9IGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyOSwgQW5kcm9pZCAyLjNcblx0XHRcdFx0Ly8gVmVuZG9yLXByZWZpeCBib3gtc2l6aW5nXG5cdFx0XHRcdFwiLXdlYmtpdC1ib3gtc2l6aW5nOmNvbnRlbnQtYm94Oy1tb3otYm94LXNpemluZzpjb250ZW50LWJveDtcIiArXG5cdFx0XHRcdFwiYm94LXNpemluZzpjb250ZW50LWJveDtkaXNwbGF5OmJsb2NrO21hcmdpbjowO2JvcmRlcjowO3BhZGRpbmc6MFwiO1xuXHRcdFx0Y29udGVudHMuc3R5bGUubWFyZ2luUmlnaHQgPSBjb250ZW50cy5zdHlsZS53aWR0aCA9IFwiMFwiO1xuXHRcdFx0ZGl2LnN0eWxlLndpZHRoID0gXCIxcHhcIjtcblxuXHRcdFx0cmVsaWFibGVNYXJnaW5SaWdodFZhbCA9XG5cdFx0XHRcdCFwYXJzZUZsb2F0KCAoIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBjb250ZW50cywgbnVsbCApIHx8IHt9ICkubWFyZ2luUmlnaHQgKTtcblxuXHRcdFx0ZGl2LnJlbW92ZUNoaWxkKCBjb250ZW50cyApO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdC8vIENoZWNrIGlmIHRhYmxlIGNlbGxzIHN0aWxsIGhhdmUgb2Zmc2V0V2lkdGgvSGVpZ2h0IHdoZW4gdGhleSBhcmUgc2V0XG5cdFx0Ly8gdG8gZGlzcGxheTpub25lIGFuZCB0aGVyZSBhcmUgc3RpbGwgb3RoZXIgdmlzaWJsZSB0YWJsZSBjZWxscyBpbiBhXG5cdFx0Ly8gdGFibGUgcm93OyBpZiBzbywgb2Zmc2V0V2lkdGgvSGVpZ2h0IGFyZSBub3QgcmVsaWFibGUgZm9yIHVzZSB3aGVuXG5cdFx0Ly8gZGV0ZXJtaW5pbmcgaWYgYW4gZWxlbWVudCBoYXMgYmVlbiBoaWRkZW4gZGlyZWN0bHkgdXNpbmdcblx0XHQvLyBkaXNwbGF5Om5vbmUgKGl0IGlzIHN0aWxsIHNhZmUgdG8gdXNlIG9mZnNldHMgaWYgYSBwYXJlbnQgZWxlbWVudCBpc1xuXHRcdC8vIGhpZGRlbjsgZG9uIHNhZmV0eSBnb2dnbGVzIGFuZCBzZWUgYnVnICM0NTEyIGZvciBtb3JlIGluZm9ybWF0aW9uKS5cblx0XHRkaXYuaW5uZXJIVE1MID0gXCI8dGFibGU+PHRyPjx0ZD48L3RkPjx0ZD50PC90ZD48L3RyPjwvdGFibGU+XCI7XG5cdFx0Y29udGVudHMgPSBkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwidGRcIiApO1xuXHRcdGNvbnRlbnRzWyAwIF0uc3R5bGUuY3NzVGV4dCA9IFwibWFyZ2luOjA7Ym9yZGVyOjA7cGFkZGluZzowO2Rpc3BsYXk6bm9uZVwiO1xuXHRcdHJlbGlhYmxlSGlkZGVuT2Zmc2V0c1ZhbCA9IGNvbnRlbnRzWyAwIF0ub2Zmc2V0SGVpZ2h0ID09PSAwO1xuXHRcdGlmICggcmVsaWFibGVIaWRkZW5PZmZzZXRzVmFsICkge1xuXHRcdFx0Y29udGVudHNbIDAgXS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdGNvbnRlbnRzWyAxIF0uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuXHRcdFx0cmVsaWFibGVIaWRkZW5PZmZzZXRzVmFsID0gY29udGVudHNbIDAgXS5vZmZzZXRIZWlnaHQgPT09IDA7XG5cdFx0fVxuXG5cdFx0Ym9keS5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cdH1cblxufSkoKTtcblxuXG4vLyBBIG1ldGhvZCBmb3IgcXVpY2tseSBzd2FwcGluZyBpbi9vdXQgQ1NTIHByb3BlcnRpZXMgdG8gZ2V0IGNvcnJlY3QgY2FsY3VsYXRpb25zLlxualF1ZXJ5LnN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG52YXJcblx0XHRyYWxwaGEgPSAvYWxwaGFcXChbXildKlxcKS9pLFxuXHRyb3BhY2l0eSA9IC9vcGFjaXR5XFxzKj1cXHMqKFteKV0qKS8sXG5cblx0Ly8gc3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZSBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gc2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0cm51bXNwbGl0ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSguKikkXCIsIFwiaVwiICksXG5cdHJyZWxOdW0gPSBuZXcgUmVnRXhwKCBcIl4oWystXSk9KFwiICsgcG51bSArIFwiKVwiLCBcImlcIiApLFxuXG5cdGNzc1Nob3cgPSB7IHBvc2l0aW9uOiBcImFic29sdXRlXCIsIHZpc2liaWxpdHk6IFwiaGlkZGVuXCIsIGRpc3BsYXk6IFwiYmxvY2tcIiB9LFxuXHRjc3NOb3JtYWxUcmFuc2Zvcm0gPSB7XG5cdFx0bGV0dGVyU3BhY2luZzogXCIwXCIsXG5cdFx0Zm9udFdlaWdodDogXCI0MDBcIlxuXHR9LFxuXG5cdGNzc1ByZWZpeGVzID0gWyBcIldlYmtpdFwiLCBcIk9cIiwgXCJNb3pcIiwgXCJtc1wiIF07XG5cblxuLy8gcmV0dXJuIGEgY3NzIHByb3BlcnR5IG1hcHBlZCB0byBhIHBvdGVudGlhbGx5IHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUoIHN0eWxlLCBuYW1lICkge1xuXG5cdC8vIHNob3J0Y3V0IGZvciBuYW1lcyB0aGF0IGFyZSBub3QgdmVuZG9yIHByZWZpeGVkXG5cdGlmICggbmFtZSBpbiBzdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXG5cdC8vIGNoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSgxKSxcblx0XHRvcmlnTmFtZSA9IG5hbWUsXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIHN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG9yaWdOYW1lO1xufVxuXG5mdW5jdGlvbiBzaG93SGlkZSggZWxlbWVudHMsIHNob3cgKSB7XG5cdHZhciBkaXNwbGF5LCBlbGVtLCBoaWRkZW4sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0dmFsdWVzWyBpbmRleCBdID0galF1ZXJ5Ll9kYXRhKCBlbGVtLCBcIm9sZGRpc3BsYXlcIiApO1xuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXHRcdFx0Ly8gUmVzZXQgdGhlIGlubGluZSBkaXNwbGF5IG9mIHRoaXMgZWxlbWVudCB0byBsZWFybiBpZiBpdCBpc1xuXHRcdFx0Ly8gYmVpbmcgaGlkZGVuIGJ5IGNhc2NhZGVkIHJ1bGVzIG9yIG5vdFxuXHRcdFx0aWYgKCAhdmFsdWVzWyBpbmRleCBdICYmIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZWxlbWVudHMgd2hpY2ggaGF2ZSBiZWVuIG92ZXJyaWRkZW4gd2l0aCBkaXNwbGF5OiBub25lXG5cdFx0XHQvLyBpbiBhIHN0eWxlc2hlZXQgdG8gd2hhdGV2ZXIgdGhlIGRlZmF1bHQgYnJvd3NlciBzdHlsZSBpc1xuXHRcdFx0Ly8gZm9yIHN1Y2ggYW4gZWxlbWVudFxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW4oIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0galF1ZXJ5Ll9kYXRhKCBlbGVtLCBcIm9sZGRpc3BsYXlcIiwgZGVmYXVsdERpc3BsYXkoZWxlbS5ub2RlTmFtZSkgKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aGlkZGVuID0gaXNIaWRkZW4oIGVsZW0gKTtcblxuXHRcdFx0aWYgKCBkaXNwbGF5ICYmIGRpc3BsYXkgIT09IFwibm9uZVwiIHx8ICFoaWRkZW4gKSB7XG5cdFx0XHRcdGpRdWVyeS5fZGF0YSggZWxlbSwgXCJvbGRkaXNwbGF5XCIsIGhpZGRlbiA/IGRpc3BsYXkgOiBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIG1vc3Qgb2YgdGhlIGVsZW1lbnRzIGluIGEgc2Vjb25kIGxvb3Bcblx0Ly8gdG8gYXZvaWQgdGhlIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXHRcdGlmICggIXNob3cgfHwgZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBzaG93ID8gdmFsdWVzWyBpbmRleCBdIHx8IFwiXCIgOiBcIm5vbmVcIjtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cdHZhciBtYXRjaGVzID0gcm51bXNwbGl0LmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAxIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAyIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBhdWdtZW50V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEsIGlzQm9yZGVyQm94LCBzdHlsZXMgKSB7XG5cdHZhciBpID0gZXh0cmEgPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSA/XG5cdFx0Ly8gSWYgd2UgYWxyZWFkeSBoYXZlIHRoZSByaWdodCBtZWFzdXJlbWVudCwgYXZvaWQgYXVnbWVudGF0aW9uXG5cdFx0NCA6XG5cdFx0Ly8gT3RoZXJ3aXNlIGluaXRpYWxpemUgZm9yIGhvcml6b250YWwgb3IgdmVydGljYWwgcHJvcGVydGllc1xuXHRcdG5hbWUgPT09IFwid2lkdGhcIiA/IDEgOiAwLFxuXG5cdFx0dmFsID0gMDtcblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cdFx0Ly8gYm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luLCBzbyBhZGQgaXQgaWYgd2Ugd2FudCBpdFxuXHRcdGlmICggZXh0cmEgPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgZXh0cmEgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0JvcmRlckJveCApIHtcblx0XHRcdC8vIGJvcmRlci1ib3ggaW5jbHVkZXMgcGFkZGluZywgc28gcmVtb3ZlIGl0IGlmIHdlIHdhbnQgY29udGVudFxuXHRcdFx0aWYgKCBleHRyYSA9PT0gXCJjb250ZW50XCIgKSB7XG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgYm9yZGVyIG5vciBtYXJnaW4sIHNvIHJlbW92ZSBib3JkZXJcblx0XHRcdGlmICggZXh0cmEgIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRcdHZhbCAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBhdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50LCBzbyBhZGQgcGFkZGluZ1xuXHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBhdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBjb250ZW50IG5vciBwYWRkaW5nLCBzbyBhZGQgYm9yZGVyXG5cdFx0XHRpZiAoIGV4dHJhICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0dmFsICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHZhbDtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBvZmZzZXQgcHJvcGVydHksIHdoaWNoIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGJvcmRlci1ib3ggdmFsdWVcblx0dmFyIHZhbHVlSXNCb3JkZXJCb3ggPSB0cnVlLFxuXHRcdHZhbCA9IG5hbWUgPT09IFwid2lkdGhcIiA/IGVsZW0ub2Zmc2V0V2lkdGggOiBlbGVtLm9mZnNldEhlaWdodCxcblx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHRpc0JvcmRlckJveCA9IHN1cHBvcnQuYm94U2l6aW5nICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0Ly8gc29tZSBub24taHRtbCBlbGVtZW50cyByZXR1cm4gdW5kZWZpbmVkIGZvciBvZmZzZXRXaWR0aCwgc28gY2hlY2sgZm9yIG51bGwvdW5kZWZpbmVkXG5cdC8vIHN2ZyAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY0OTI4NVxuXHQvLyBNYXRoTUwgLSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD00OTE2Njhcblx0aWYgKCB2YWwgPD0gMCB8fCB2YWwgPT0gbnVsbCApIHtcblx0XHQvLyBGYWxsIGJhY2sgdG8gY29tcHV0ZWQgdGhlbiB1bmNvbXB1dGVkIGNzcyBpZiBuZWNlc3Nhcnlcblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdGlmICggdmFsIDwgMCB8fCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdHZhbCA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBDb21wdXRlZCB1bml0IGlzIG5vdCBwaXhlbHMuIFN0b3AgaGVyZSBhbmQgcmV0dXJuLlxuXHRcdGlmICggcm51bW5vbnB4LnRlc3QodmFsKSApIHtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXG5cdFx0Ly8gd2UgbmVlZCB0aGUgY2hlY2sgZm9yIHN0eWxlIGluIGNhc2UgYSBicm93c2VyIHdoaWNoIHJldHVybnMgdW5yZWxpYWJsZSB2YWx1ZXNcblx0XHQvLyBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSBzaWxlbnRseSBmYWxscyBiYWNrIHRvIHRoZSByZWxpYWJsZSBlbGVtLnN0eWxlXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94ICYmICggc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IHZhbCA9PT0gZWxlbS5zdHlsZVsgbmFtZSBdICk7XG5cblx0XHQvLyBOb3JtYWxpemUgXCJcIiwgYXV0bywgYW5kIHByZXBhcmUgZm9yIGV4dHJhXG5cdFx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcblx0fVxuXG5cdC8vIHVzZSB0aGUgYWN0aXZlIGJveC1zaXppbmcgbW9kZWwgdG8gYWRkL3N1YnRyYWN0IGlycmVsZXZhbnQgc3R5bGVzXG5cdHJldHVybiAoIHZhbCArXG5cdFx0YXVnbWVudFdpZHRoT3JIZWlnaHQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0bmFtZSxcblx0XHRcdGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0XHRzdHlsZXNcblx0XHQpXG5cdCkgKyBcInB4XCI7XG59XG5cbmpRdWVyeS5leHRlbmQoe1xuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XG5cdGNzc0hvb2tzOiB7XG5cdFx0b3BhY2l0eToge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdFx0Ly8gV2Ugc2hvdWxkIGFsd2F5cyBnZXQgYSBudW1iZXIgYmFjayBmcm9tIG9wYWNpdHlcblx0XHRcdFx0XHR2YXIgcmV0ID0gY3VyQ1NTKCBlbGVtLCBcIm9wYWNpdHlcIiApO1xuXHRcdFx0XHRcdHJldHVybiByZXQgPT09IFwiXCIgPyBcIjFcIiA6IHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBEb24ndCBhdXRvbWF0aWNhbGx5IGFkZCBcInB4XCIgdG8gdGhlc2UgcG9zc2libHktdW5pdGxlc3MgcHJvcGVydGllc1xuXHRjc3NOdW1iZXI6IHtcblx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXG5cdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcblx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcblx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcblx0XHRcImxpbmVIZWlnaHRcIjogdHJ1ZSxcblx0XHRcIm9wYWNpdHlcIjogdHJ1ZSxcblx0XHRcIm9yZGVyXCI6IHRydWUsXG5cdFx0XCJvcnBoYW5zXCI6IHRydWUsXG5cdFx0XCJ3aWRvd3NcIjogdHJ1ZSxcblx0XHRcInpJbmRleFwiOiB0cnVlLFxuXHRcdFwiem9vbVwiOiB0cnVlXG5cdH0sXG5cblx0Ly8gQWRkIGluIHByb3BlcnRpZXMgd2hvc2UgbmFtZXMgeW91IHdpc2ggdG8gZml4IGJlZm9yZVxuXHQvLyBzZXR0aW5nIG9yIGdldHRpbmcgdGhlIHZhbHVlXG5cdGNzc1Byb3BzOiB7XG5cdFx0Ly8gbm9ybWFsaXplIGZsb2F0IGNzcyBwcm9wZXJ0eVxuXHRcdFwiZmxvYXRcIjogc3VwcG9ydC5jc3NGbG9hdCA/IFwiY3NzRmxvYXRcIiA6IFwic3R5bGVGbG9hdFwiXG5cdH0sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdG5hbWUgPSBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gfHwgKCBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggc3R5bGUsIG9yaWdOYW1lICkgKTtcblxuXHRcdC8vIGdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb25cblx0XHQvLyBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBjb252ZXJ0IHJlbGF0aXZlIG51bWJlciBzdHJpbmdzICgrPSBvciAtPSkgdG8gcmVsYXRpdmUgbnVtYmVycy4gIzczNDVcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAocmV0ID0gcnJlbE51bS5leGVjKCB2YWx1ZSApKSApIHtcblx0XHRcdFx0dmFsdWUgPSAoIHJldFsxXSArIDEgKSAqIHJldFsyXSArIHBhcnNlRmxvYXQoIGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKSApO1xuXHRcdFx0XHQvLyBGaXhlcyBidWcgIzkyMzdcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldC4gU2VlOiAjNzExNlxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgJ3B4JyB0byB0aGUgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiAhalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSApIHtcblx0XHRcdFx0dmFsdWUgKz0gXCJweFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGaXhlcyAjODkwOCwgaXQgY2FuIGJlIGRvbmUgbW9yZSBjb3JyZWN0bHkgYnkgc3BlY2lmaW5nIHNldHRlcnMgaW4gY3NzSG9va3MsXG5cdFx0XHQvLyBidXQgaXQgd291bGQgbWVhbiB0byBkZWZpbmUgZWlnaHQgKGZvciBldmVyeSBwcm9ibGVtYXRpYyBwcm9wZXJ0eSkgaWRlbnRpY2FsIGZ1bmN0aW9uc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKFwiYmFja2dyb3VuZFwiKSA9PT0gMCApIHtcblx0XHRcdFx0c3R5bGVbIG5hbWUgXSA9IFwiaW5oZXJpdFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkLCB1c2UgdGhhdCB2YWx1ZSwgb3RoZXJ3aXNlIGp1c3Qgc2V0IHRoZSBzcGVjaWZpZWQgdmFsdWVcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoXCJzZXRcIiBpbiBob29rcykgfHwgKHZhbHVlID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgZXh0cmEgKSkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRVxuXHRcdFx0XHQvLyBTd2FsbG93IGVycm9ycyBmcm9tICdpbnZhbGlkJyBDU1MgdmFsdWVzICgjNTUwOSlcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdH0gY2F0Y2goZSkge31cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgbm9uLWNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciBudW0sIHZhbCwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZVxuXHRcdG5hbWUgPSBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gfHwgKCBqUXVlcnkuY3NzUHJvcHNbIG9yaWdOYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggZWxlbS5zdHlsZSwgb3JpZ05hbWUgKSApO1xuXG5cdFx0Ly8gZ2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvblxuXHRcdC8vIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly9jb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiwgY29udmVydGluZyB0byBudW1iZXIgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgalF1ZXJ5LmlzTnVtZXJpYyggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSk7XG5cbmpRdWVyeS5lYWNoKFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHQvLyBjZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gaG93ZXZlciwgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdCBmcm9tIHRoaXNcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiYgZWxlbS5vZmZzZXRXaWR0aCA9PT0gMCA/XG5cdFx0XHRcdFx0alF1ZXJ5LnN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBzdHlsZXMgPSBleHRyYSAmJiBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIGV4dHJhID9cblx0XHRcdFx0YXVnbWVudFdpZHRoT3JIZWlnaHQoXG5cdFx0XHRcdFx0ZWxlbSxcblx0XHRcdFx0XHRuYW1lLFxuXHRcdFx0XHRcdGV4dHJhLFxuXHRcdFx0XHRcdHN1cHBvcnQuYm94U2l6aW5nICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdCkgOiAwXG5cdFx0XHQpO1xuXHRcdH1cblx0fTtcbn0pO1xuXG5pZiAoICFzdXBwb3J0Lm9wYWNpdHkgKSB7XG5cdGpRdWVyeS5jc3NIb29rcy5vcGFjaXR5ID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0Ly8gSUUgdXNlcyBmaWx0ZXJzIGZvciBvcGFjaXR5XG5cdFx0XHRyZXR1cm4gcm9wYWNpdHkudGVzdCggKGNvbXB1dGVkICYmIGVsZW0uY3VycmVudFN0eWxlID8gZWxlbS5jdXJyZW50U3R5bGUuZmlsdGVyIDogZWxlbS5zdHlsZS5maWx0ZXIpIHx8IFwiXCIgKSA/XG5cdFx0XHRcdCggMC4wMSAqIHBhcnNlRmxvYXQoIFJlZ0V4cC4kMSApICkgKyBcIlwiIDpcblx0XHRcdFx0Y29tcHV0ZWQgPyBcIjFcIiA6IFwiXCI7XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0dmFyIHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRcdFx0Y3VycmVudFN0eWxlID0gZWxlbS5jdXJyZW50U3R5bGUsXG5cdFx0XHRcdG9wYWNpdHkgPSBqUXVlcnkuaXNOdW1lcmljKCB2YWx1ZSApID8gXCJhbHBoYShvcGFjaXR5PVwiICsgdmFsdWUgKiAxMDAgKyBcIilcIiA6IFwiXCIsXG5cdFx0XHRcdGZpbHRlciA9IGN1cnJlbnRTdHlsZSAmJiBjdXJyZW50U3R5bGUuZmlsdGVyIHx8IHN0eWxlLmZpbHRlciB8fCBcIlwiO1xuXG5cdFx0XHQvLyBJRSBoYXMgdHJvdWJsZSB3aXRoIG9wYWNpdHkgaWYgaXQgZG9lcyBub3QgaGF2ZSBsYXlvdXRcblx0XHRcdC8vIEZvcmNlIGl0IGJ5IHNldHRpbmcgdGhlIHpvb20gbGV2ZWxcblx0XHRcdHN0eWxlLnpvb20gPSAxO1xuXG5cdFx0XHQvLyBpZiBzZXR0aW5nIG9wYWNpdHkgdG8gMSwgYW5kIG5vIG90aGVyIGZpbHRlcnMgZXhpc3QgLSBhdHRlbXB0IHRvIHJlbW92ZSBmaWx0ZXIgYXR0cmlidXRlICM2NjUyXG5cdFx0XHQvLyBpZiB2YWx1ZSA9PT0gXCJcIiwgdGhlbiByZW1vdmUgaW5saW5lIG9wYWNpdHkgIzEyNjg1XG5cdFx0XHRpZiAoICggdmFsdWUgPj0gMSB8fCB2YWx1ZSA9PT0gXCJcIiApICYmXG5cdFx0XHRcdFx0alF1ZXJ5LnRyaW0oIGZpbHRlci5yZXBsYWNlKCByYWxwaGEsIFwiXCIgKSApID09PSBcIlwiICYmXG5cdFx0XHRcdFx0c3R5bGUucmVtb3ZlQXR0cmlidXRlICkge1xuXG5cdFx0XHRcdC8vIFNldHRpbmcgc3R5bGUuZmlsdGVyIHRvIG51bGwsIFwiXCIgJiBcIiBcIiBzdGlsbCBsZWF2ZSBcImZpbHRlcjpcIiBpbiB0aGUgY3NzVGV4dFxuXHRcdFx0XHQvLyBpZiBcImZpbHRlcjpcIiBpcyBwcmVzZW50IGF0IGFsbCwgY2xlYXJUeXBlIGlzIGRpc2FibGVkLCB3ZSB3YW50IHRvIGF2b2lkIHRoaXNcblx0XHRcdFx0Ly8gc3R5bGUucmVtb3ZlQXR0cmlidXRlIGlzIElFIE9ubHksIGJ1dCBzbyBhcHBhcmVudGx5IGlzIHRoaXMgY29kZSBwYXRoLi4uXG5cdFx0XHRcdHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSggXCJmaWx0ZXJcIiApO1xuXG5cdFx0XHRcdC8vIGlmIHRoZXJlIGlzIG5vIGZpbHRlciBzdHlsZSBhcHBsaWVkIGluIGEgY3NzIHJ1bGUgb3IgdW5zZXQgaW5saW5lIG9wYWNpdHksIHdlIGFyZSBkb25lXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwiXCIgfHwgY3VycmVudFN0eWxlICYmICFjdXJyZW50U3R5bGUuZmlsdGVyICkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBvdGhlcndpc2UsIHNldCBuZXcgZmlsdGVyIHZhbHVlc1xuXHRcdFx0c3R5bGUuZmlsdGVyID0gcmFscGhhLnRlc3QoIGZpbHRlciApID9cblx0XHRcdFx0ZmlsdGVyLnJlcGxhY2UoIHJhbHBoYSwgb3BhY2l0eSApIDpcblx0XHRcdFx0ZmlsdGVyICsgXCIgXCIgKyBvcGFjaXR5O1xuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmNzc0hvb2tzLm1hcmdpblJpZ2h0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luUmlnaHQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0Ly8gV2ViS2l0IEJ1ZyAxMzM0MyAtIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyB3cm9uZyB2YWx1ZSBmb3IgbWFyZ2luLXJpZ2h0XG5cdFx0XHQvLyBXb3JrIGFyb3VuZCBieSB0ZW1wb3JhcmlseSBzZXR0aW5nIGVsZW1lbnQgZGlzcGxheSB0byBpbmxpbmUtYmxvY2tcblx0XHRcdHJldHVybiBqUXVlcnkuc3dhcCggZWxlbSwgeyBcImRpc3BsYXlcIjogXCJpbmxpbmUtYmxvY2tcIiB9LFxuXHRcdFx0XHRjdXJDU1MsIFsgZWxlbSwgXCJtYXJnaW5SaWdodFwiIF0gKTtcblx0XHR9XG5cdH1cbik7XG5cbi8vIFRoZXNlIGhvb2tzIGFyZSB1c2VkIGJ5IGFuaW1hdGUgdG8gZXhwYW5kIHByb3BlcnRpZXNcbmpRdWVyeS5lYWNoKHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIGFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KFwiIFwiKSA6IFsgdmFsdWUgXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgNDsgaSsrICkge1xuXHRcdFx0XHRleHBhbmRlZFsgcHJlZml4ICsgY3NzRXhwYW5kWyBpIF0gKyBzdWZmaXggXSA9XG5cdFx0XHRcdFx0cGFydHNbIGkgXSB8fCBwYXJ0c1sgaSAtIDIgXSB8fCBwYXJ0c1sgMCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZXhwYW5kZWQ7XG5cdFx0fVxuXHR9O1xuXG5cdGlmICggIXJtYXJnaW4udGVzdCggcHJlZml4ICkgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSk7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRjc3M6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGVzLCBsZW4sXG5cdFx0XHRcdG1hcCA9IHt9LFxuXHRcdFx0XHRpID0gMDtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cdHNob3c6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcywgdHJ1ZSApO1xuXHR9LFxuXHRoaWRlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMgKTtcblx0fSxcblx0dG9nZ2xlOiBmdW5jdGlvbiggc3RhdGUgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlID8gdGhpcy5zaG93KCkgOiB0aGlzLmhpZGUoKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbiggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cbn0pO1xuXG5cbmZ1bmN0aW9uIFR3ZWVuKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApIHtcblx0cmV0dXJuIG5ldyBUd2Vlbi5wcm90b3R5cGUuaW5pdCggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKTtcbn1cbmpRdWVyeS5Ud2VlbiA9IFR3ZWVuO1xuXG5Ud2Vlbi5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBUd2Vlbixcblx0aW5pdDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nLCB1bml0ICkge1xuXHRcdHRoaXMuZWxlbSA9IGVsZW07XG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcblx0XHR0aGlzLmVhc2luZyA9IGVhc2luZyB8fCBcInN3aW5nXCI7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHRpZiAoIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmXG5cdFx0XHRcdCghdHdlZW4uZWxlbS5zdHlsZSB8fCB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCkgKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF07XG5cdFx0XHR9XG5cblx0XHRcdC8vIHBhc3NpbmcgYW4gZW1wdHkgc3RyaW5nIGFzIGEgM3JkIHBhcmFtZXRlciB0byAuY3NzIHdpbGwgYXV0b21hdGljYWxseVxuXHRcdFx0Ly8gYXR0ZW1wdCBhIHBhcnNlRmxvYXQgYW5kIGZhbGxiYWNrIHRvIGEgc3RyaW5nIGlmIHRoZSBwYXJzZSBmYWlsc1xuXHRcdFx0Ly8gc28sIHNpbXBsZSB2YWx1ZXMgc3VjaCBhcyBcIjEwcHhcIiBhcmUgcGFyc2VkIHRvIEZsb2F0LlxuXHRcdFx0Ly8gY29tcGxleCB2YWx1ZXMgc3VjaCBhcyBcInJvdGF0ZSgxcmFkKVwiIGFyZSByZXR1cm5lZCBhcyBpcy5cblx0XHRcdHJlc3VsdCA9IGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIFwiXCIgKTtcblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdC8vIHVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0IC0gdXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlIC0gdXNlIC5zdHlsZSBpZiBpdHNcblx0XHRcdC8vIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlXG5cdFx0XHRpZiAoIGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS5meC5zdGVwWyB0d2Vlbi5wcm9wIF0oIHR3ZWVuICk7XG5cdFx0XHR9IGVsc2UgaWYgKCB0d2Vlbi5lbGVtLnN0eWxlICYmICggdHdlZW4uZWxlbS5zdHlsZVsgalF1ZXJ5LmNzc1Byb3BzWyB0d2Vlbi5wcm9wIF0gXSAhPSBudWxsIHx8IGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblxuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH1cbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIENvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCB0aW1lcklkLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cmZ4bnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKSxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC8sXG5cdGFuaW1hdGlvblByZWZpbHRlcnMgPSBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblx0dHdlZW5lcnMgPSB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKSxcblx0XHRcdFx0dGFyZ2V0ID0gdHdlZW4uY3VyKCksXG5cdFx0XHRcdHBhcnRzID0gcmZ4bnVtLmV4ZWMoIHZhbHVlICksXG5cdFx0XHRcdHVuaXQgPSBwYXJ0cyAmJiBwYXJ0c1sgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdID8gXCJcIiA6IFwicHhcIiApLFxuXG5cdFx0XHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0XHRcdHN0YXJ0ID0gKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gfHwgdW5pdCAhPT0gXCJweFwiICYmICt0YXJnZXQgKSAmJlxuXHRcdFx0XHRcdHJmeG51bS5leGVjKCBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCBwcm9wICkgKSxcblx0XHRcdFx0c2NhbGUgPSAxLFxuXHRcdFx0XHRtYXhJdGVyYXRpb25zID0gMjA7XG5cblx0XHRcdGlmICggc3RhcnQgJiYgc3RhcnRbIDMgXSAhPT0gdW5pdCApIHtcblx0XHRcdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdFx0XHR1bml0ID0gdW5pdCB8fCBzdGFydFsgMyBdO1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHRcdFx0cGFydHMgPSBwYXJ0cyB8fCBbXTtcblxuXHRcdFx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdFx0XHRzdGFydCA9ICt0YXJnZXQgfHwgMTtcblxuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0Ly8gSWYgcHJldmlvdXMgaXRlcmF0aW9uIHplcm9lZCBvdXQsIGRvdWJsZSB1bnRpbCB3ZSBnZXQgKnNvbWV0aGluZypcblx0XHRcdFx0XHQvLyBVc2UgYSBzdHJpbmcgZm9yIGRvdWJsaW5nIGZhY3RvciBzbyB3ZSBkb24ndCBhY2NpZGVudGFsbHkgc2VlIHNjYWxlIGFzIHVuY2hhbmdlZCBiZWxvd1xuXHRcdFx0XHRcdHNjYWxlID0gc2NhbGUgfHwgXCIuNVwiO1xuXG5cdFx0XHRcdFx0Ly8gQWRqdXN0IGFuZCBhcHBseVxuXHRcdFx0XHRcdHN0YXJ0ID0gc3RhcnQgLyBzY2FsZTtcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHByb3AsIHN0YXJ0ICsgdW5pdCApO1xuXG5cdFx0XHRcdC8vIFVwZGF0ZSBzY2FsZSwgdG9sZXJhdGluZyB6ZXJvIG9yIE5hTiBmcm9tIHR3ZWVuLmN1cigpXG5cdFx0XHRcdC8vIEFuZCBicmVha2luZyB0aGUgbG9vcCBpZiBzY2FsZSBpcyB1bmNoYW5nZWQgb3IgcGVyZmVjdCwgb3IgaWYgd2UndmUganVzdCBoYWQgZW5vdWdoXG5cdFx0XHRcdH0gd2hpbGUgKCBzY2FsZSAhPT0gKHNjYWxlID0gdHdlZW4uY3VyKCkgLyB0YXJnZXQpICYmIHNjYWxlICE9PSAxICYmIC0tbWF4SXRlcmF0aW9ucyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBVcGRhdGUgdHdlZW4gcHJvcGVydGllc1xuXHRcdFx0aWYgKCBwYXJ0cyApIHtcblx0XHRcdFx0c3RhcnQgPSB0d2Vlbi5zdGFydCA9ICtzdGFydCB8fCArdGFyZ2V0IHx8IDA7XG5cdFx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0XHQvLyBJZiBhICs9Ly09IHRva2VuIHdhcyBwcm92aWRlZCwgd2UncmUgZG9pbmcgYSByZWxhdGl2ZSBhbmltYXRpb25cblx0XHRcdFx0dHdlZW4uZW5kID0gcGFydHNbIDEgXSA/XG5cdFx0XHRcdFx0c3RhcnQgKyAoIHBhcnRzWyAxIF0gKyAxICkgKiBwYXJ0c1sgMiBdIDpcblx0XHRcdFx0XHQrcGFydHNbIDIgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9O1xuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0c2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSk7XG5cdHJldHVybiAoIGZ4Tm93ID0galF1ZXJ5Lm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9LFxuXHRcdGkgPSAwO1xuXG5cdC8vIGlmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gaWYgd2UgZG9uJ3QgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcblx0Zm9yICggOyBpIDwgNCA7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCB0d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCB0d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICh0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApKSApIHtcblxuXHRcdFx0Ly8gd2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XG5cdC8qIGpzaGludCB2YWxpZHRoaXM6IHRydWUgKi9cblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIHR3ZWVuLCBob29rcywgb2xkZmlyZSwgZGlzcGxheSwgY2hlY2tEaXNwbGF5LFxuXHRcdGFuaW0gPSB0aGlzLFxuXHRcdG9yaWcgPSB7fSxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbiggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0galF1ZXJ5Ll9kYXRhKCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gaGFuZGxlIHF1ZXVlOiBmYWxzZSBwcm9taXNlc1xuXHRpZiAoICFvcHRzLnF1ZXVlICkge1xuXHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcblx0XHRpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XG5cdFx0XHRob29rcy51bnF1ZXVlZCA9IDA7XG5cdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7XG5cdFx0XHRcdFx0b2xkZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRob29rcy51bnF1ZXVlZCsrO1xuXG5cdFx0YW5pbS5hbHdheXMoZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBkb2luZyB0aGlzIG1ha2VzIHN1cmUgdGhhdCB0aGUgY29tcGxldGUgaGFuZGxlciB3aWxsIGJlIGNhbGxlZFxuXHRcdFx0Ly8gYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyhmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fVxuXG5cdC8vIGhlaWdodC93aWR0aCBvdmVyZmxvdyBwYXNzXG5cdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiaGVpZ2h0XCIgaW4gcHJvcHMgfHwgXCJ3aWR0aFwiIGluIHByb3BzICkgKSB7XG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbm90aGluZyBzbmVha3Mgb3V0XG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRSBkb2VzIG5vdFxuXHRcdC8vIGNoYW5nZSB0aGUgb3ZlcmZsb3cgYXR0cmlidXRlIHdoZW4gb3ZlcmZsb3dYIGFuZFxuXHRcdC8vIG92ZXJmbG93WSBhcmUgc2V0IHRvIHRoZSBzYW1lIHZhbHVlXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBTZXQgZGlzcGxheSBwcm9wZXJ0eSB0byBpbmxpbmUtYmxvY2sgZm9yIGhlaWdodC93aWR0aFxuXHRcdC8vIGFuaW1hdGlvbnMgb24gaW5saW5lIGVsZW1lbnRzIHRoYXQgYXJlIGhhdmluZyB3aWR0aC9oZWlnaHQgYW5pbWF0ZWRcblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblxuXHRcdC8vIFRlc3QgZGVmYXVsdCBkaXNwbGF5IGlmIGRpc3BsYXkgaXMgY3VycmVudGx5IFwibm9uZVwiXG5cdFx0Y2hlY2tEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgP1xuXHRcdFx0alF1ZXJ5Ll9kYXRhKCBlbGVtLCBcIm9sZGRpc3BsYXlcIiApIHx8IGRlZmF1bHREaXNwbGF5KCBlbGVtLm5vZGVOYW1lICkgOiBkaXNwbGF5O1xuXG5cdFx0aWYgKCBjaGVja0Rpc3BsYXkgPT09IFwiaW5saW5lXCIgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHQvLyBpbmxpbmUtbGV2ZWwgZWxlbWVudHMgYWNjZXB0IGlubGluZS1ibG9jaztcblx0XHRcdC8vIGJsb2NrLWxldmVsIGVsZW1lbnRzIG5lZWQgdG8gYmUgaW5saW5lIHdpdGggbGF5b3V0XG5cdFx0XHRpZiAoICFzdXBwb3J0LmlubGluZUJsb2NrTmVlZHNMYXlvdXQgfHwgZGVmYXVsdERpc3BsYXkoIGVsZW0ubm9kZU5hbWUgKSA9PT0gXCJpbmxpbmVcIiApIHtcblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzdHlsZS56b29tID0gMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XG5cdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHRcdGlmICggIXN1cHBvcnQuc2hyaW5rV3JhcEJsb2NrcygpICkge1xuXHRcdFx0YW5pbS5hbHdheXMoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xuXHRcdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdC8vIHNob3cvaGlkZSBwYXNzXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMuZXhlYyggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgZGF0YVNob3cgbGVmdCBvdmVyIGZyb20gYSBzdG9wcGVkIGhpZGUgb3Igc2hvdyBhbmQgd2UgYXJlIGdvaW5nIHRvIHByb2NlZWQgd2l0aCBzaG93LCB3ZSBzaG91bGQgcHJldGVuZCB0byBiZSBoaWRkZW5cblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cblx0XHQvLyBBbnkgbm9uLWZ4IHZhbHVlIHN0b3BzIHVzIGZyb20gcmVzdG9yaW5nIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlXG5cdFx0fSBlbHNlIHtcblx0XHRcdGRpc3BsYXkgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRpZiAoIGRhdGFTaG93ICkge1xuXHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGFTaG93ID0galF1ZXJ5Ll9kYXRhKCBlbGVtLCBcImZ4c2hvd1wiLCB7fSApO1xuXHRcdH1cblxuXHRcdC8vIHN0b3JlIHN0YXRlIGlmIGl0cyB0b2dnbGUgLSBlbmFibGVzIC5zdG9wKCkudG9nZ2xlKCkgdG8gXCJyZXZlcnNlXCJcblx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG5cdFx0fVxuXHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0alF1ZXJ5KCBlbGVtICkuc2hvdygpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRhbmltLmRvbmUoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeSggZWxlbSApLmhpZGUoKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRhbmltLmRvbmUoZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgcHJvcDtcblx0XHRcdGpRdWVyeS5fcmVtb3ZlRGF0YSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdHR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XG5cblx0XHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0XHRkYXRhU2hvd1sgcHJvcCBdID0gdHdlZW4uc3RhcnQ7XG5cdFx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRcdHR3ZWVuLmVuZCA9IHR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRcdHR3ZWVuLnN0YXJ0ID0gcHJvcCA9PT0gXCJ3aWR0aFwiIHx8IHByb3AgPT09IFwiaGVpZ2h0XCIgPyAxIDogMDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHQvLyBJZiB0aGlzIGlzIGEgbm9vcCBsaWtlIC5oaWRlKCkuaGlkZSgpLCByZXN0b3JlIGFuIG92ZXJ3cml0dGVuIGRpc3BsYXkgdmFsdWVcblx0fSBlbHNlIGlmICggKGRpc3BsYXkgPT09IFwibm9uZVwiID8gZGVmYXVsdERpc3BsYXkoIGVsZW0ubm9kZU5hbWUgKSA6IGRpc3BsYXkpID09PSBcImlubGluZVwiICkge1xuXHRcdHN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5O1xuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0ZWFzaW5nID0gdmFsdWVbIDEgXTtcblx0XHRcdHZhbHVlID0gcHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgMCBdO1xuXHRcdH1cblxuXHRcdGlmICggaW5kZXggIT09IG5hbWUgKSB7XG5cdFx0XHRwcm9wc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRkZWxldGUgcHJvcHNbIGluZGV4IF07XG5cdFx0fVxuXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXTtcblx0XHRpZiAoIGhvb2tzICYmIFwiZXhwYW5kXCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWx1ZSA9IGhvb2tzLmV4cGFuZCggdmFsdWUgKTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgbmFtZSBdO1xuXG5cdFx0XHQvLyBub3QgcXVpdGUgJC5leHRlbmQsIHRoaXMgd29udCBvdmVyd3JpdGUga2V5cyBhbHJlYWR5IHByZXNlbnQuXG5cdFx0XHQvLyBhbHNvIC0gcmV1c2luZyAnaW5kZXgnIGZyb20gYWJvdmUgYmVjYXVzZSB3ZSBoYXZlIHRoZSBjb3JyZWN0IFwibmFtZVwiXG5cdFx0XHRmb3IgKCBpbmRleCBpbiB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhKCBpbmRleCBpbiBwcm9wcyApICkge1xuXHRcdFx0XHRcdHByb3BzWyBpbmRleCBdID0gdmFsdWVbIGluZGV4IF07XG5cdFx0XHRcdFx0c3BlY2lhbEVhc2luZ1sgaW5kZXggXSA9IGVhc2luZztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzcGVjaWFsRWFzaW5nWyBuYW1lIF0gPSBlYXNpbmc7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIEFuaW1hdGlvbiggZWxlbSwgcHJvcGVydGllcywgb3B0aW9ucyApIHtcblx0dmFyIHJlc3VsdCxcblx0XHRzdG9wcGVkLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBhbmltYXRpb25QcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBkb24ndCBtYXRjaCBlbGVtIGluIHRoZSA6YW5pbWF0ZWQgc2VsZWN0b3Jcblx0XHRcdGRlbGV0ZSB0aWNrLmVsZW07XG5cdFx0fSksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cdFx0XHRcdC8vIGFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSAxIC0gKCAwLjUgfHwgMCApICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIHBlcmNlbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIHBlcmNlbnQsIHJlbWFpbmluZyBdKTtcblxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRwcm9wczogalF1ZXJ5LmV4dGVuZCgge30sIHByb3BlcnRpZXMgKSxcblx0XHRcdG9wdHM6IGpRdWVyeS5leHRlbmQoIHRydWUsIHsgc3BlY2lhbEVhc2luZzoge30gfSwgb3B0aW9ucyApLFxuXHRcdFx0b3JpZ2luYWxQcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLFxuXHRcdFx0b3JpZ2luYWxPcHRpb25zOiBvcHRpb25zLFxuXHRcdFx0c3RhcnRUaW1lOiBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0ZHVyYXRpb246IG9wdGlvbnMuZHVyYXRpb24sXG5cdFx0XHR0d2VlbnM6IFtdLFxuXHRcdFx0Y3JlYXRlVHdlZW46IGZ1bmN0aW9uKCBwcm9wLCBlbmQgKSB7XG5cdFx0XHRcdHZhciB0d2VlbiA9IGpRdWVyeS5Ud2VlbiggZWxlbSwgYW5pbWF0aW9uLm9wdHMsIHByb3AsIGVuZCxcblx0XHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cdFx0XHRcdFx0Ly8gaWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gcmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZVxuXHRcdFx0XHQvLyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoIDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBhbmltYXRpb25QcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSlcblx0KTtcblxuXHQvLyBhdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRyZXR1cm4gYW5pbWF0aW9uLnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG59XG5cbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLnNwbGl0KFwiIFwiKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0dHdlZW5lcnNbIHByb3AgXSA9IHR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHR0d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdGFuaW1hdGlvblByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0YW5pbWF0aW9uUHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRqUXVlcnkuaXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFqUXVlcnkuaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4Lm9mZiA/IDAgOiB0eXBlb2Ygb3B0LmR1cmF0aW9uID09PSBcIm51bWJlclwiID8gb3B0LmR1cmF0aW9uIDpcblx0XHRvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyA/IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdIDogalF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblxuXHQvLyBub3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHR9XG5cblx0Ly8gUXVldWVpbmdcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBzaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBhbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgalF1ZXJ5Ll9kYXRhKCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgJiYgdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBqUXVlcnkuX2RhdGEoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmICh0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlKSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gc3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZFxuXHRcdFx0Ly8gdGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaCB3aWxsIGRlcXVldWVcblx0XHRcdC8vIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGpRdWVyeS5fZGF0YSggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBlbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIGVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBsb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gbG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gdHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9KTtcblx0fVxufSk7XG5cbmpRdWVyeS5lYWNoKFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSk7XG5cbi8vIEdlbmVyYXRlIHNob3J0Y3V0cyBmb3IgY3VzdG9tIGFuaW1hdGlvbnNcbmpRdWVyeS5lYWNoKHtcblx0c2xpZGVEb3duOiBnZW5GeChcInNob3dcIiksXG5cdHNsaWRlVXA6IGdlbkZ4KFwiaGlkZVwiKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KFwidG9nZ2xlXCIpLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0pO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRpID0gMDtcblxuXHRmeE5vdyA9IGpRdWVyeS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblx0XHQvLyBDaGVja3MgdGhlIHRpbWVyIGhhcyBub3QgYWxyZWFkeSBiZWVuIHJlbW92ZWRcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRpZiAoIHRpbWVyKCkgKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG5cdH0gZWxzZSB7XG5cdFx0alF1ZXJ5LnRpbWVycy5wb3AoKTtcblx0fVxufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5cbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoICF0aW1lcklkICkge1xuXHRcdHRpbWVySWQgPSBzZXRJbnRlcnZhbCggalF1ZXJ5LmZ4LnRpY2ssIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHR9XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRjbGVhckludGVydmFsKCB0aW1lcklkICk7XG5cdHRpbWVySWQgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG4vLyBodHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSk7XG59O1xuXG5cbihmdW5jdGlvbigpIHtcblx0Ly8gTWluaWZpZWQ6IHZhciBhLGIsYyxkLGVcblx0dmFyIGlucHV0LCBkaXYsIHNlbGVjdCwgYSwgb3B0O1xuXG5cdC8vIFNldHVwXG5cdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblx0ZGl2LnNldEF0dHJpYnV0ZSggXCJjbGFzc05hbWVcIiwgXCJ0XCIgKTtcblx0ZGl2LmlubmVySFRNTCA9IFwiICA8bGluay8+PHRhYmxlPjwvdGFibGU+PGEgaHJlZj0nL2EnPmE8L2E+PGlucHV0IHR5cGU9J2NoZWNrYm94Jy8+XCI7XG5cdGEgPSBkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJhXCIpWyAwIF07XG5cblx0Ly8gRmlyc3QgYmF0Y2ggb2YgdGVzdHMuXG5cdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIik7XG5cdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKSApO1xuXHRpbnB1dCA9IGRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZShcImlucHV0XCIpWyAwIF07XG5cblx0YS5zdHlsZS5jc3NUZXh0ID0gXCJ0b3A6MXB4XCI7XG5cblx0Ly8gVGVzdCBzZXRBdHRyaWJ1dGUgb24gY2FtZWxDYXNlIGNsYXNzLiBJZiBpdCB3b3Jrcywgd2UgbmVlZCBhdHRyRml4ZXMgd2hlbiBkb2luZyBnZXQvc2V0QXR0cmlidXRlIChpZTYvNylcblx0c3VwcG9ydC5nZXRTZXRBdHRyaWJ1dGUgPSBkaXYuY2xhc3NOYW1lICE9PSBcInRcIjtcblxuXHQvLyBHZXQgdGhlIHN0eWxlIGluZm9ybWF0aW9uIGZyb20gZ2V0QXR0cmlidXRlXG5cdC8vIChJRSB1c2VzIC5jc3NUZXh0IGluc3RlYWQpXG5cdHN1cHBvcnQuc3R5bGUgPSAvdG9wLy50ZXN0KCBhLmdldEF0dHJpYnV0ZShcInN0eWxlXCIpICk7XG5cblx0Ly8gTWFrZSBzdXJlIHRoYXQgVVJMcyBhcmVuJ3QgbWFuaXB1bGF0ZWRcblx0Ly8gKElFIG5vcm1hbGl6ZXMgaXQgYnkgZGVmYXVsdClcblx0c3VwcG9ydC5ocmVmTm9ybWFsaXplZCA9IGEuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIvYVwiO1xuXG5cdC8vIENoZWNrIHRoZSBkZWZhdWx0IGNoZWNrYm94L3JhZGlvIHZhbHVlIChcIlwiIG9uIFdlYktpdDsgXCJvblwiIGVsc2V3aGVyZSlcblx0c3VwcG9ydC5jaGVja09uID0gISFpbnB1dC52YWx1ZTtcblxuXHQvLyBNYWtlIHN1cmUgdGhhdCBhIHNlbGVjdGVkLWJ5LWRlZmF1bHQgb3B0aW9uIGhhcyBhIHdvcmtpbmcgc2VsZWN0ZWQgcHJvcGVydHkuXG5cdC8vIChXZWJLaXQgZGVmYXVsdHMgdG8gZmFsc2UgaW5zdGVhZCBvZiB0cnVlLCBJRSB0b28sIGlmIGl0J3MgaW4gYW4gb3B0Z3JvdXApXG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gVGVzdHMgZm9yIGVuY3R5cGUgc3VwcG9ydCBvbiBhIGZvcm0gKCM2NzQzKVxuXHRzdXBwb3J0LmVuY3R5cGUgPSAhIWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIpLmVuY3R5cGU7XG5cblx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIG9wdGlvbnMgaW5zaWRlIGRpc2FibGVkIHNlbGVjdHMgYXJlbid0IG1hcmtlZCBhcyBkaXNhYmxlZFxuXHQvLyAoV2ViS2l0IG1hcmtzIHRoZW0gYXMgZGlzYWJsZWQpXG5cdHNlbGVjdC5kaXNhYmxlZCA9IHRydWU7XG5cdHN1cHBvcnQub3B0RGlzYWJsZWQgPSAhb3B0LmRpc2FibGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFOCBvbmx5XG5cdC8vIENoZWNrIGlmIHdlIGNhbiB0cnVzdCBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRzdXBwb3J0LmlucHV0ID0gaW5wdXQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcblxuXHQvLyBDaGVjayBpZiBhbiBpbnB1dCBtYWludGFpbnMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0pKCk7XG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgaXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWzBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHQvLyBoYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdFx0cmV0LnJlcGxhY2UocnJldHVybiwgXCJcIikgOlxuXHRcdFx0XHRcdC8vIGhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRcdHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblx0XHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKFwic2V0XCIgaW4gaG9va3MpIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG59KTtcblxualF1ZXJ5LmV4dGVuZCh7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTEwLTExK1xuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHRqUXVlcnkudHJpbSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIgfHwgaW5kZXggPCAwLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aCxcblx0XHRcdFx0XHRpID0gaW5kZXggPCAwID9cblx0XHRcdFx0XHRcdG1heCA6XG5cdFx0XHRcdFx0XHRvbmUgPyBpbmRleCA6IDA7XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBvbGRJRSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQoIHN1cHBvcnQub3B0RGlzYWJsZWQgPyAhb3B0aW9uLmRpc2FibGVkIDogb3B0aW9uLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpID09PSBudWxsICkgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHwgIWpRdWVyeS5ub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPj0gMCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUU2XG5cdFx0XHRcdFx0XHQvLyBXaGVuIG5ldyBvcHRpb24gZWxlbWVudCBpcyBhZGRlZCB0byBzZWxlY3QgYm94IHdlIG5lZWQgdG9cblx0XHRcdFx0XHRcdC8vIGZvcmNlIHJlZmxvdyBvZiBuZXdseSBhZGRlZCBub2RlIGluIG9yZGVyIHRvIHdvcmthcm91bmQgZGVsYXlcblx0XHRcdFx0XHRcdC8vIG9mIGluaXRpYWxpemF0aW9uIHByb3BlcnRpZXNcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdG9wdGlvbi5zZWxlY3RlZCA9IG9wdGlvblNldCA9IHRydWU7XG5cblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBfICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFdpbGwgYmUgZXhlY3V0ZWQgb25seSBpbiBJRTZcblx0XHRcdFx0XHRcdFx0b3B0aW9uLnNjcm9sbEhlaWdodDtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRvcHRpb24uc2VsZWN0ZWQgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gb3B0aW9ucztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0pO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KGVsZW0pLnZhbCgpLCB2YWx1ZSApID49IDAgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIFN1cHBvcnQ6IFdlYmtpdFxuXHRcdFx0Ly8gXCJcIiBpcyByZXR1cm5lZCBpbnN0ZWFkIG9mIFwib25cIiBpZiBhIHZhbHVlIGlzbid0IHNwZWNpZmllZFxuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKFwidmFsdWVcIikgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0pO1xuXG5cblxuXG52YXIgbm9kZUhvb2ssIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZSxcblx0cnVzZURlZmF1bHQgPSAvXig/OmNoZWNrZWR8c2VsZWN0ZWQpJC9pLFxuXHRnZXRTZXRBdHRyaWJ1dGUgPSBzdXBwb3J0LmdldFNldEF0dHJpYnV0ZSxcblx0Z2V0U2V0SW5wdXQgPSBzdXBwb3J0LmlucHV0O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9KTtcblx0fVxufSk7XG5cbmpRdWVyeS5leHRlbmQoe1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBkb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBzdHJ1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGF0dHJpYnV0ZXMgYXJlIGxvd2VyY2FzZVxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiBub2RlSG9vayApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0fSBlbHNlIGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdH0gZWxzZSBpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID9cblx0XHRcdFx0dW5kZWZpbmVkIDpcblx0XHRcdFx0cmV0O1xuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsIHByb3BOYW1lLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAobmFtZSA9IGF0dHJOYW1lc1tpKytdKSApIHtcblx0XHRcdFx0cHJvcE5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cblx0XHRcdFx0Ly8gQm9vbGVhbiBhdHRyaWJ1dGVzIGdldCBzcGVjaWFsIHRyZWF0bWVudCAoIzEwODcwKVxuXHRcdFx0XHRpZiAoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRcdC8vIFNldCBjb3JyZXNwb25kaW5nIHByb3BlcnR5IHRvIGZhbHNlXG5cdFx0XHRcdFx0aWYgKCBnZXRTZXRJbnB1dCAmJiBnZXRTZXRBdHRyaWJ1dGUgfHwgIXJ1c2VEZWZhdWx0LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0XHRcdGVsZW1bIHByb3BOYW1lIF0gPSBmYWxzZTtcblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0XHRcdFx0Ly8gQWxzbyBjbGVhciBkZWZhdWx0Q2hlY2tlZC9kZWZhdWx0U2VsZWN0ZWQgKGlmIGFwcHJvcHJpYXRlKVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBqUXVlcnkuY2FtZWxDYXNlKCBcImRlZmF1bHQtXCIgKyBuYW1lICkgXSA9XG5cdFx0XHRcdFx0XHRcdGVsZW1bIHByb3BOYW1lIF0gPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU2VlICM5Njk5IGZvciBleHBsYW5hdGlvbiBvZiB0aGlzIGFwcHJvYWNoIChzZXR0aW5nIGZpcnN0LCB0aGVuIHJlbW92YWwpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmF0dHIoIGVsZW0sIG5hbWUsIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBnZXRTZXRBdHRyaWJ1dGUgPyBuYW1lIDogcHJvcE5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmIGpRdWVyeS5ub2RlTmFtZShlbGVtLCBcImlucHV0XCIpICkge1xuXHRcdFx0XHRcdC8vIFNldHRpbmcgdGhlIHR5cGUgb24gYSByYWRpbyBidXR0b24gYWZ0ZXIgdGhlIHZhbHVlIHJlc2V0cyB0aGUgdmFsdWUgaW4gSUU2LTlcblx0XHRcdFx0XHQvLyBSZXNldCB2YWx1ZSB0byBkZWZhdWx0IGluIGNhc2UgdHlwZSBpcyBzZXQgYWZ0ZXIgdmFsdWUgZHVyaW5nIGNyZWF0aW9uXG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59KTtcblxuLy8gSG9vayBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIGdldFNldElucHV0ICYmIGdldFNldEF0dHJpYnV0ZSB8fCAhcnVzZURlZmF1bHQudGVzdCggbmFtZSApICkge1xuXHRcdFx0Ly8gSUU8OCBuZWVkcyB0aGUgKnByb3BlcnR5KiBuYW1lXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggIWdldFNldEF0dHJpYnV0ZSAmJiBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUsIG5hbWUgKTtcblxuXHRcdC8vIFVzZSBkZWZhdWx0Q2hlY2tlZCBhbmQgZGVmYXVsdFNlbGVjdGVkIGZvciBvbGRJRVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtWyBqUXVlcnkuY2FtZWxDYXNlKCBcImRlZmF1bHQtXCIgKyBuYW1lICkgXSA9IGVsZW1bIG5hbWUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5cbi8vIFJldHJpZXZlIGJvb2xlYW5zIHNwZWNpYWxseVxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBnZXRTZXRJbnB1dCAmJiBnZXRTZXRBdHRyaWJ1dGUgfHwgIXJ1c2VEZWZhdWx0LnRlc3QoIG5hbWUgKSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdFx0dmFyIHJldCwgaGFuZGxlO1xuXHRcdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRcdC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3AgYnkgdGVtcG9yYXJpbHkgcmVtb3ZpbmcgdGhpcyBmdW5jdGlvbiBmcm9tIHRoZSBnZXR0ZXJcblx0XHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbmFtZSBdO1xuXHRcdFx0XHRhdHRySGFuZGxlWyBuYW1lIF0gPSByZXQ7XG5cdFx0XHRcdHJldCA9IGdldHRlciggZWxlbSwgbmFtZSwgaXNYTUwgKSAhPSBudWxsID9cblx0XHRcdFx0XHRuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHRcdG51bGw7XG5cdFx0XHRcdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGhhbmRsZTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtWyBqUXVlcnkuY2FtZWxDYXNlKCBcImRlZmF1bHQtXCIgKyBuYW1lICkgXSA/XG5cdFx0XHRcdFx0bmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0XHRudWxsO1xuXHRcdFx0fVxuXHRcdH07XG59KTtcblxuLy8gZml4IG9sZElFIGF0dHJvcGVydGllc1xuaWYgKCAhZ2V0U2V0SW5wdXQgfHwgIWdldFNldEF0dHJpYnV0ZSApIHtcblx0alF1ZXJ5LmF0dHJIb29rcy52YWx1ZSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRcdGlmICggalF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0Ly8gRG9lcyBub3QgcmV0dXJuIHNvIHRoYXQgc2V0QXR0cmlidXRlIGlzIGFsc28gdXNlZFxuXHRcdFx0XHRlbGVtLmRlZmF1bHRWYWx1ZSA9IHZhbHVlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gVXNlIG5vZGVIb29rIGlmIGRlZmluZWQgKCMxOTU0KTsgb3RoZXJ3aXNlIHNldEF0dHJpYnV0ZSBpcyBmaW5lXG5cdFx0XHRcdHJldHVybiBub2RlSG9vayAmJiBub2RlSG9vay5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBJRTYvNyBkbyBub3Qgc3VwcG9ydCBnZXR0aW5nL3NldHRpbmcgc29tZSBhdHRyaWJ1dGVzIHdpdGggZ2V0L3NldEF0dHJpYnV0ZVxuaWYgKCAhZ2V0U2V0QXR0cmlidXRlICkge1xuXG5cdC8vIFVzZSB0aGlzIGZvciBhbnkgYXR0cmlidXRlIGluIElFNi83XG5cdC8vIFRoaXMgZml4ZXMgYWxtb3N0IGV2ZXJ5IElFNi83IGlzc3VlXG5cdG5vZGVIb29rID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdFx0Ly8gU2V0IHRoZSBleGlzdGluZyBvciBjcmVhdGUgYSBuZXcgYXR0cmlidXRlIG5vZGVcblx0XHRcdHZhciByZXQgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKTtcblx0XHRcdGlmICggIXJldCApIHtcblx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGVOb2RlKFxuXHRcdFx0XHRcdChyZXQgPSBlbGVtLm93bmVyRG9jdW1lbnQuY3JlYXRlQXR0cmlidXRlKCBuYW1lICkpXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdHJldC52YWx1ZSA9IHZhbHVlICs9IFwiXCI7XG5cblx0XHRcdC8vIEJyZWFrIGFzc29jaWF0aW9uIHdpdGggY2xvbmVkIGVsZW1lbnRzIGJ5IGFsc28gdXNpbmcgc2V0QXR0cmlidXRlICgjOTY0Nilcblx0XHRcdGlmICggbmFtZSA9PT0gXCJ2YWx1ZVwiIHx8IHZhbHVlID09PSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApICkge1xuXHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdC8vIFNvbWUgYXR0cmlidXRlcyBhcmUgY29uc3RydWN0ZWQgd2l0aCBlbXB0eS1zdHJpbmcgdmFsdWVzIHdoZW4gbm90IGRlZmluZWRcblx0YXR0ckhhbmRsZS5pZCA9IGF0dHJIYW5kbGUubmFtZSA9IGF0dHJIYW5kbGUuY29vcmRzID1cblx0XHRmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0XHR2YXIgcmV0O1xuXHRcdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRcdHJldHVybiAocmV0ID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHJldC52YWx1ZSAhPT0gXCJcIiA/XG5cdFx0XHRcdFx0cmV0LnZhbHVlIDpcblx0XHRcdFx0XHRudWxsO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0Ly8gRml4aW5nIHZhbHVlIHJldHJpZXZhbCBvbiBhIGJ1dHRvbiByZXF1aXJlcyB0aGlzIG1vZHVsZVxuXHRqUXVlcnkudmFsSG9va3MuYnV0dG9uID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0XHR2YXIgcmV0ID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICk7XG5cdFx0XHRpZiAoIHJldCAmJiByZXQuc3BlY2lmaWVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0LnZhbHVlO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2V0OiBub2RlSG9vay5zZXRcblx0fTtcblxuXHQvLyBTZXQgY29udGVudGVkaXRhYmxlIHRvIGZhbHNlIG9uIHJlbW92YWxzKCMxMDQyOSlcblx0Ly8gU2V0dGluZyB0byBlbXB0eSBzdHJpbmcgdGhyb3dzIGFuIGVycm9yIGFzIGFuIGludmFsaWQgdmFsdWVcblx0alF1ZXJ5LmF0dHJIb29rcy5jb250ZW50ZWRpdGFibGUgPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0XHRub2RlSG9vay5zZXQoIGVsZW0sIHZhbHVlID09PSBcIlwiID8gZmFsc2UgOiB2YWx1ZSwgbmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvLyBTZXQgd2lkdGggYW5kIGhlaWdodCB0byBhdXRvIGluc3RlYWQgb2YgMCBvbiBlbXB0eSBzdHJpbmcoIEJ1ZyAjODE1MCApXG5cdC8vIFRoaXMgaXMgZm9yIHJlbW92YWxzXG5cdGpRdWVyeS5lYWNoKFsgXCJ3aWR0aFwiLCBcImhlaWdodFwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRcdGpRdWVyeS5hdHRySG9va3NbIG5hbWUgXSA9IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcIlwiICkge1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBcImF1dG9cIiApO1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0pO1xufVxuXG5pZiAoICFzdXBwb3J0LnN0eWxlICkge1xuXHRqUXVlcnkuYXR0ckhvb2tzLnN0eWxlID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBSZXR1cm4gdW5kZWZpbmVkIGluIHRoZSBjYXNlIG9mIGVtcHR5IHN0cmluZ1xuXHRcdFx0Ly8gTm90ZTogSUUgdXBwZXJjYXNlcyBjc3MgcHJvcGVydHkgbmFtZXMsIGJ1dCBpZiB3ZSB3ZXJlIHRvIC50b0xvd2VyQ2FzZSgpXG5cdFx0XHQvLyAuY3NzVGV4dCwgdGhhdCB3b3VsZCBkZXN0cm95IGNhc2Ugc2Vuc3RpdGl2aXR5IGluIFVSTCdzLCBsaWtlIGluIFwiYmFja2dyb3VuZFwiXG5cdFx0XHRyZXR1cm4gZWxlbS5zdHlsZS5jc3NUZXh0IHx8IHVuZGVmaW5lZDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuICggZWxlbS5zdHlsZS5jc3NUZXh0ID0gdmFsdWUgKyBcIlwiICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbnxvYmplY3QpJC9pLFxuXHRyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyB0cnkvY2F0Y2ggaGFuZGxlcyBjYXNlcyB3aGVyZSBJRSBiYWxrcyAoc3VjaCBhcyByZW1vdmluZyBhIHByb3BlcnR5IG9uIHdpbmRvdylcblx0XHRcdHRyeSB7XG5cdFx0XHRcdHRoaXNbIG5hbWUgXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0ZGVsZXRlIHRoaXNbIG5hbWUgXTtcblx0XHRcdH0gY2F0Y2goIGUgKSB7fVxuXHRcdH0pO1xuXHR9XG59KTtcblxualF1ZXJ5LmV4dGVuZCh7XG5cdHByb3BGaXg6IHtcblx0XHRcImZvclwiOiBcImh0bWxGb3JcIixcblx0XHRcImNsYXNzXCI6IFwiY2xhc3NOYW1lXCJcblx0fSxcblxuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsIG5vdHhtbCxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIGRvbid0IGdldC9zZXQgcHJvcGVydGllcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdG5vdHhtbCA9IG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKTtcblxuXHRcdGlmICggbm90eG1sICkge1xuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybiBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkpICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyZXQgOlxuXHRcdFx0XHQoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApKSAhPT0gbnVsbCA/XG5cdFx0XHRcdHJldCA6XG5cdFx0XHRcdGVsZW1bIG5hbWUgXTtcblx0XHR9XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZSBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cDovL2ZsdWlkcHJvamVjdC5vcmcvYmxvZy8yMDA4LzAxLzA5L2dldHRpbmctc2V0dGluZy1hbmQtcmVtb3ZpbmctdGFiaW5kZXgtdmFsdWVzLXdpdGgtamF2YXNjcmlwdC9cblx0XHRcdFx0Ly8gVXNlIHByb3BlciBhdHRyaWJ1dGUgcmV0cmlldmFsKCMxMjA3Milcblx0XHRcdFx0dmFyIHRhYmluZGV4ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ0YWJpbmRleFwiICk7XG5cblx0XHRcdFx0cmV0dXJuIHRhYmluZGV4ID9cblx0XHRcdFx0XHRwYXJzZUludCggdGFiaW5kZXgsIDEwICkgOlxuXHRcdFx0XHRcdHJmb2N1c2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApIHx8IHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmIGVsZW0uaHJlZiA/XG5cdFx0XHRcdFx0XHQwIDpcblx0XHRcdFx0XHRcdC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSk7XG5cbi8vIFNvbWUgYXR0cmlidXRlcyByZXF1aXJlIGEgc3BlY2lhbCBjYWxsIG9uIElFXG4vLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFzdXBwb3J0LmhyZWZOb3JtYWxpemVkICkge1xuXHQvLyBocmVmL3NyYyBwcm9wZXJ0eSBzaG91bGQgZ2V0IHRoZSBmdWxsIG5vcm1hbGl6ZWQgVVJMICgjMTAyOTkvIzEyOTE1KVxuXHRqUXVlcnkuZWFjaChbIFwiaHJlZlwiLCBcInNyY1wiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRcdGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXSA9IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgNCApO1xuXHRcdFx0fVxuXHRcdH07XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBTYWZhcmksIElFOStcbi8vIG1pcy1yZXBvcnRzIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHByb3BlcnR5IG9mIGFuIG9wdGlvblxuLy8gQWNjZXNzaW5nIHRoZSBwYXJlbnQncyBzZWxlY3RlZEluZGV4IHByb3BlcnR5IGZpeGVzIGl0XG5pZiAoICFzdXBwb3J0Lm9wdFNlbGVjdGVkICkge1xuXHRqUXVlcnkucHJvcEhvb2tzLnNlbGVjdGVkID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0cGFyZW50LnNlbGVjdGVkSW5kZXg7XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgaXQgYWxzbyB3b3JrcyB3aXRoIG9wdGdyb3Vwcywgc2VlICM1NzAxXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuZWFjaChbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSk7XG5cbi8vIElFNi83IGNhbGwgZW5jdHlwZSBlbmNvZGluZ1xuaWYgKCAhc3VwcG9ydC5lbmN0eXBlICkge1xuXHRqUXVlcnkucHJvcEZpeC5lbmN0eXBlID0gXCJlbmNvZGluZ1wiO1xufVxuXG5cblxuXG52YXIgcmNsYXNzID0gL1tcXHRcXHJcXG5cXGZdL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHByb2NlZWQgPSB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWU7XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuYWRkQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIHRoaXMuY2xhc3NOYW1lICkgKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmICggcHJvY2VlZCApIHtcblx0XHRcdC8vIFRoZSBkaXNqdW5jdGlvbiBoZXJlIGlzIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgcmVtb3ZlQ2xhc3MpXG5cdFx0XHRjbGFzc2VzID0gKCB2YWx1ZSB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXTtcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIGVsZW0uY2xhc3NOYW1lID9cblx0XHRcdFx0XHQoIFwiIFwiICsgZWxlbS5jbGFzc05hbWUgKyBcIiBcIiApLnJlcGxhY2UoIHJjbGFzcywgXCIgXCIgKSA6XG5cdFx0XHRcdFx0XCIgXCJcblx0XHRcdFx0KTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoIChjbGF6eiA9IGNsYXNzZXNbaisrXSkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIG9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IGpRdWVyeS50cmltKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGVsZW0uY2xhc3NOYW1lICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5jbGFzc05hbWUgPSBmaW5hbFZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cHJvY2VlZCA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDAgfHwgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnJlbW92ZUNsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCB0aGlzLmNsYXNzTmFtZSApICk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0aWYgKCBwcm9jZWVkICkge1xuXHRcdFx0Y2xhc3NlcyA9ICggdmFsdWUgfHwgXCJcIiApLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGVsZW0gPSB0aGlzWyBpIF07XG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBlbGVtLmNsYXNzTmFtZSA/XG5cdFx0XHRcdFx0KCBcIiBcIiArIGVsZW0uY2xhc3NOYW1lICsgXCIgXCIgKS5yZXBsYWNlKCByY2xhc3MsIFwiIFwiICkgOlxuXHRcdFx0XHRcdFwiXCJcblx0XHRcdFx0KTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoIChjbGF6eiA9IGNsYXNzZXNbaisrXSkgKSB7XG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+PSAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIG9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHZhbHVlID8galF1ZXJ5LnRyaW0oIGN1ciApIDogXCJcIjtcblx0XHRcdFx0XHRpZiAoIGVsZW0uY2xhc3NOYW1lICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5jbGFzc05hbWUgPSBmaW5hbFZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xuXHRcdHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGVWYWwgPyB0aGlzLmFkZENsYXNzKCB2YWx1ZSApIDogdGhpcy5yZW1vdmVDbGFzcyggdmFsdWUgKTtcblx0XHR9XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkudG9nZ2xlQ2xhc3MoIHZhbHVlLmNhbGwodGhpcywgaSwgdGhpcy5jbGFzc05hbWUsIHN0YXRlVmFsKSwgc3RhdGVWYWwgKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdC8vIHRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdHZhciBjbGFzc05hbWUsXG5cdFx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRcdGNsYXNzTmFtZXMgPSB2YWx1ZS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107XG5cblx0XHRcdFx0d2hpbGUgKCAoY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0pICkge1xuXHRcdFx0XHRcdC8vIGNoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBzdHJ1bmRlZmluZWQgfHwgdHlwZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRcdGlmICggdGhpcy5jbGFzc05hbWUgKSB7XG5cdFx0XHRcdFx0Ly8gc3RvcmUgY2xhc3NOYW1lIGlmIHNldFxuXHRcdFx0XHRcdGpRdWVyeS5fZGF0YSggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIsIHRoaXMuY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBcImZhbHNlXCIsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0dGhpcy5jbGFzc05hbWUgPSB0aGlzLmNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgPyBcIlwiIDogalF1ZXJ5Ll9kYXRhKCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiApIHx8IFwiXCI7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lID0gXCIgXCIgKyBzZWxlY3RvciArIFwiIFwiLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0aWYgKCB0aGlzW2ldLm5vZGVUeXBlID09PSAxICYmIChcIiBcIiArIHRoaXNbaV0uY2xhc3NOYW1lICsgXCIgXCIpLnJlcGxhY2UocmNsYXNzLCBcIiBcIikuaW5kZXhPZiggY2xhc3NOYW1lICkgPj0gMCApIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59KTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbmpRdWVyeS5lYWNoKCAoXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgbG9hZCByZXNpemUgc2Nyb2xsIHVubG9hZCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgZXJyb3IgY29udGV4dG1lbnVcIikuc3BsaXQoXCIgXCIpLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblxuXHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0fTtcbn0pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9LFxuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gdGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6IHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9XG59KTtcblxuXG52YXIgbm9uY2UgPSBqUXVlcnkubm93KCk7XG5cbnZhciBycXVlcnkgPSAoL1xcPy8pO1xuXG5cblxudmFyIHJ2YWxpZHRva2VucyA9IC8oLCl8KFxcW3x7KXwofXxdKXxcIig/OlteXCJcXFxcXFxyXFxuXXxcXFxcW1wiXFxcXFxcL2JmbnJ0XXxcXFxcdVtcXGRhLWZBLUZdezR9KSpcIlxccyo6P3x0cnVlfGZhbHNlfG51bGx8LT8oPyEwXFxkKVxcZCsoPzpcXC5cXGQrfCkoPzpbZUVdWystXT9cXGQrfCkvZztcblxualF1ZXJ5LnBhcnNlSlNPTiA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHQvLyBBdHRlbXB0IHRvIHBhcnNlIHVzaW5nIHRoZSBuYXRpdmUgSlNPTiBwYXJzZXIgZmlyc3Rcblx0aWYgKCB3aW5kb3cuSlNPTiAmJiB3aW5kb3cuSlNPTi5wYXJzZSApIHtcblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuM1xuXHRcdC8vIFdvcmthcm91bmQgZmFpbHVyZSB0byBzdHJpbmctY2FzdCBudWxsIGlucHV0XG5cdFx0cmV0dXJuIHdpbmRvdy5KU09OLnBhcnNlKCBkYXRhICsgXCJcIiApO1xuXHR9XG5cblx0dmFyIHJlcXVpcmVOb25Db21tYSxcblx0XHRkZXB0aCA9IG51bGwsXG5cdFx0c3RyID0galF1ZXJ5LnRyaW0oIGRhdGEgKyBcIlwiICk7XG5cblx0Ly8gR3VhcmQgYWdhaW5zdCBpbnZhbGlkIChhbmQgcG9zc2libHkgZGFuZ2Vyb3VzKSBpbnB1dCBieSBlbnN1cmluZyB0aGF0IG5vdGhpbmcgcmVtYWluc1xuXHQvLyBhZnRlciByZW1vdmluZyB2YWxpZCB0b2tlbnNcblx0cmV0dXJuIHN0ciAmJiAhalF1ZXJ5LnRyaW0oIHN0ci5yZXBsYWNlKCBydmFsaWR0b2tlbnMsIGZ1bmN0aW9uKCB0b2tlbiwgY29tbWEsIG9wZW4sIGNsb3NlICkge1xuXG5cdFx0Ly8gRm9yY2UgdGVybWluYXRpb24gaWYgd2Ugc2VlIGEgbWlzcGxhY2VkIGNvbW1hXG5cdFx0aWYgKCByZXF1aXJlTm9uQ29tbWEgJiYgY29tbWEgKSB7XG5cdFx0XHRkZXB0aCA9IDA7XG5cdFx0fVxuXG5cdFx0Ly8gUGVyZm9ybSBubyBtb3JlIHJlcGxhY2VtZW50cyBhZnRlciByZXR1cm5pbmcgdG8gb3V0ZXJtb3N0IGRlcHRoXG5cdFx0aWYgKCBkZXB0aCA9PT0gMCApIHtcblx0XHRcdHJldHVybiB0b2tlbjtcblx0XHR9XG5cblx0XHQvLyBDb21tYXMgbXVzdCBub3QgZm9sbG93IFwiW1wiLCBcIntcIiwgb3IgXCIsXCJcblx0XHRyZXF1aXJlTm9uQ29tbWEgPSBvcGVuIHx8IGNvbW1hO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIG5ldyBkZXB0aFxuXHRcdC8vIGFycmF5L29iamVjdCBvcGVuIChcIltcIiBvciBcIntcIik6IGRlcHRoICs9IHRydWUgLSBmYWxzZSAoaW5jcmVtZW50KVxuXHRcdC8vIGFycmF5L29iamVjdCBjbG9zZSAoXCJdXCIgb3IgXCJ9XCIpOiBkZXB0aCArPSBmYWxzZSAtIHRydWUgKGRlY3JlbWVudClcblx0XHQvLyBvdGhlciBjYXNlcyAoXCIsXCIgb3IgcHJpbWl0aXZlKTogZGVwdGggKz0gdHJ1ZSAtIHRydWUgKG51bWVyaWMgY2FzdClcblx0XHRkZXB0aCArPSAhY2xvc2UgLSAhb3BlbjtcblxuXHRcdC8vIFJlbW92ZSB0aGlzIHRva2VuXG5cdFx0cmV0dXJuIFwiXCI7XG5cdH0pICkgP1xuXHRcdCggRnVuY3Rpb24oIFwicmV0dXJuIFwiICsgc3RyICkgKSgpIDpcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBKU09OOiBcIiArIGRhdGEgKTtcbn07XG5cblxuLy8gQ3Jvc3MtYnJvd3NlciB4bWwgcGFyc2luZ1xualF1ZXJ5LnBhcnNlWE1MID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdHZhciB4bWwsIHRtcDtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXHR0cnkge1xuXHRcdGlmICggd2luZG93LkRPTVBhcnNlciApIHsgLy8gU3RhbmRhcmRcblx0XHRcdHRtcCA9IG5ldyBET01QYXJzZXIoKTtcblx0XHRcdHhtbCA9IHRtcC5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHRcdH0gZWxzZSB7IC8vIElFXG5cdFx0XHR4bWwgPSBuZXcgQWN0aXZlWE9iamVjdCggXCJNaWNyb3NvZnQuWE1MRE9NXCIgKTtcblx0XHRcdHhtbC5hc3luYyA9IFwiZmFsc2VcIjtcblx0XHRcdHhtbC5sb2FkWE1MKCBkYXRhICk7XG5cdFx0fVxuXHR9IGNhdGNoKCBlICkge1xuXHRcdHhtbCA9IHVuZGVmaW5lZDtcblx0fVxuXHRpZiAoICF4bWwgfHwgIXhtbC5kb2N1bWVudEVsZW1lbnQgfHwgeG1sLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInBhcnNlcmVycm9yXCIgKS5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmVycm9yKCBcIkludmFsaWQgWE1MOiBcIiArIGRhdGEgKTtcblx0fVxuXHRyZXR1cm4geG1sO1xufTtcblxuXG52YXJcblx0Ly8gRG9jdW1lbnQgbG9jYXRpb25cblx0YWpheExvY1BhcnRzLFxuXHRhamF4TG9jYXRpb24sXG5cblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJ0cyA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKilcXHI/JC9tZywgLy8gSUUgbGVhdmVzIGFuIFxcciBjaGFyYWN0ZXIgYXQgRU9MXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXHRydXJsID0gL14oW1xcdy4rLV0rOikoPzpcXC9cXC8oPzpbXlxcLz8jXSpAfCkoW15cXC8/IzpdKikoPzo6KFxcZCspfCl8KS8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdChcIipcIik7XG5cbi8vICM4MTM4LCBJRSBtYXkgdGhyb3cgYW4gZXhjZXB0aW9uIHdoZW4gYWNjZXNzaW5nXG4vLyBhIGZpZWxkIGZyb20gd2luZG93LmxvY2F0aW9uIGlmIGRvY3VtZW50LmRvbWFpbiBoYXMgYmVlbiBzZXRcbnRyeSB7XG5cdGFqYXhMb2NhdGlvbiA9IGxvY2F0aW9uLmhyZWY7XG59IGNhdGNoKCBlICkge1xuXHQvLyBVc2UgdGhlIGhyZWYgYXR0cmlidXRlIG9mIGFuIEEgZWxlbWVudFxuXHQvLyBzaW5jZSBJRSB3aWxsIG1vZGlmeSBpdCBnaXZlbiBkb2N1bWVudC5sb2NhdGlvblxuXHRhamF4TG9jYXRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXHRhamF4TG9jYXRpb24uaHJlZiA9IFwiXCI7XG5cdGFqYXhMb2NhdGlvbiA9IGFqYXhMb2NhdGlvbi5ocmVmO1xufVxuXG4vLyBTZWdtZW50IGxvY2F0aW9uIGludG8gcGFydHNcbmFqYXhMb2NQYXJ0cyA9IHJ1cmwuZXhlYyggYWpheExvY2F0aW9uLnRvTG93ZXJDYXNlKCkgKSB8fCBbXTtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKGRhdGFUeXBlID0gZGF0YVR5cGVzW2krK10pICkge1xuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlLmNoYXJBdCggMCApID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmICFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIgZGVlcCwga2V5LFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKGRlZXAgPSB7fSkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG5cdFx0fVxuXHR9XG5cdGlmICggZGVlcCApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcblx0dmFyIGZpcnN0RGF0YVR5cGUsIGN0LCBmaW5hbERhdGFUeXBlLCB0eXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJDb250ZW50LVR5cGVcIik7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbMF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0d2hpbGUgKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdH1cblxuXHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdGlmICggY3VycmVudCApIHtcblxuXHRcdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHNbIFwidGhyb3dzXCIgXSApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7IHN0YXRlOiBcInBhcnNlcmVycm9yXCIsIGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudCB9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCh7XG5cblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXG5cdGFjdGl2ZTogMCxcblxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG5cdGxhc3RNb2RpZmllZDoge30sXG5cdGV0YWc6IHt9LFxuXG5cdGFqYXhTZXR0aW5nczoge1xuXHRcdHVybDogYWpheExvY2F0aW9uLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggYWpheExvY1BhcnRzWyAxIF0gKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cdFx0Lypcblx0XHR0aW1lb3V0OiAwLFxuXHRcdGRhdGE6IG51bGwsXG5cdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0cGFzc3dvcmQ6IG51bGwsXG5cdFx0Y2FjaGU6IG51bGwsXG5cdFx0dGhyb3dzOiBmYWxzZSxcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXG5cdFx0aGVhZGVyczoge30sXG5cdFx0Ki9cblxuXHRcdGFjY2VwdHM6IHtcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0fSxcblxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHR4bWw6IC94bWwvLFxuXHRcdFx0aHRtbDogL2h0bWwvLFxuXHRcdFx0anNvbjogL2pzb24vXG5cdFx0fSxcblxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXG5cdFx0fSxcblxuXHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRjb252ZXJ0ZXJzOiB7XG5cblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFwidGV4dCBqc29uXCI6IGpRdWVyeS5wYXJzZUpTT04sXG5cblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdH0sXG5cblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0fSxcblxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cblx0Ly8gTWFpbiBtZXRob2Rcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIC8vIENyb3NzLWRvbWFpbiBkZXRlY3Rpb24gdmFyc1xuXHRcdFx0cGFydHMsXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzIGFzIHN0cmluZ1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdHRpbWVvdXRUaW1lcixcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXG5cdFx0XHRmaXJlR2xvYmFscyxcblxuXHRcdFx0dHJhbnNwb3J0LFxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiYgKCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdGpRdWVyeS5ldmVudCxcblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXHRcdFx0Ly8gVGhlIGpxWEhSIHN0YXRlXG5cdFx0XHRzdGF0ZSA9IDAsXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggc3RhdGUgPT09IDIgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWzFdLnRvTG93ZXJDYXNlKCkgXSA9IG1hdGNoWyAyIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlID09PSAyID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0dmFyIGxuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdGlmICggIXN0YXRlICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIGxuYW1lIF0gPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBsbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggIXN0YXRlICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIHN0YXRlIDwgMiApIHtcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFjayBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApLmNvbXBsZXRlID0gY29tcGxldGVEZWZlcnJlZC5hZGQ7XG5cdFx0anFYSFIuc3VjY2VzcyA9IGpxWEhSLmRvbmU7XG5cdFx0anFYSFIuZXJyb3IgPSBqcVhIUi5mYWlsO1xuXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggY2hhcmFjdGVyICgjNzUzMTogYW5kIHN0cmluZyBwcm9tb3Rpb24pXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAoIzU4NjY6IElFNyBpc3N1ZSB3aXRoIHByb3RvY29sLWxlc3MgdXJscylcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBhamF4TG9jYXRpb24gKSArIFwiXCIgKS5yZXBsYWNlKCByaGFzaCwgXCJcIiApLnJlcGxhY2UoIHJwcm90b2NvbCwgYWpheExvY1BhcnRzWyAxIF0gKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSBqUXVlcnkudHJpbSggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHdlIGhhdmUgYSBwcm90b2NvbDpob3N0OnBvcnQgbWlzbWF0Y2hcblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHBhcnRzID0gcnVybC5leGVjKCBzLnVybC50b0xvd2VyQ2FzZSgpICk7XG5cdFx0XHRzLmNyb3NzRG9tYWluID0gISEoIHBhcnRzICYmXG5cdFx0XHRcdCggcGFydHNbIDEgXSAhPT0gYWpheExvY1BhcnRzWyAxIF0gfHwgcGFydHNbIDIgXSAhPT0gYWpheExvY1BhcnRzWyAyIF0gfHxcblx0XHRcdFx0XHQoIHBhcnRzWyAzIF0gfHwgKCBwYXJ0c1sgMSBdID09PSBcImh0dHA6XCIgPyBcIjgwXCIgOiBcIjQ0M1wiICkgKSAhPT1cblx0XHRcdFx0XHRcdCggYWpheExvY1BhcnRzWyAzIF0gfHwgKCBhamF4TG9jUGFydHNbIDEgXSA9PT0gXCJodHRwOlwiID8gXCI4MFwiIDogXCI0NDNcIiApICkgKVxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBzdGF0ZSA9PT0gMiApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcihcImFqYXhTdGFydFwiKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHRjYWNoZVVSTCA9IHMudXJsO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9ICggcy51cmwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YSApO1xuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBhbnRpLWNhY2hlIGluIHVybCBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdHMudXJsID0gcnRzLnRlc3QoIGNhY2hlVVJMICkgP1xuXG5cdFx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYWxyZWFkeSBhICdfJyBwYXJhbWV0ZXIsIHNldCBpdHMgdmFsdWVcblx0XHRcdFx0XHRjYWNoZVVSTC5yZXBsYWNlKCBydHMsIFwiJDFfPVwiICsgbm9uY2UrKyApIDpcblxuXHRcdFx0XHRcdC8vIE90aGVyd2lzZSBhZGQgb25lIHRvIHRoZSBlbmRcblx0XHRcdFx0XHRjYWNoZVVSTCArICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyBub25jZSsrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWzBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWzBdIF0gKyAoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJiAoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IHN0YXRlID09PSAyICkgKSB7XG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIGFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Zm9yICggaSBpbiB7IHN1Y2Nlc3M6IDEsIGVycm9yOiAxLCBjb21wbGV0ZTogMSB9ICkge1xuXHRcdFx0anFYSFJbIGkgXSggc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KFwidGltZW91dFwiKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHN0YXRlID0gMTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0Ly8gUHJvcGFnYXRlIGV4Y2VwdGlvbiBhcyBlcnJvciBpZiBub3QgZG9uZVxuXHRcdFx0XHRpZiAoIHN0YXRlIDwgMiApIHtcblx0XHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0XHQvLyBTaW1wbHkgcmV0aHJvdyBvdGhlcndpc2Vcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gQ2FsbGVkIG9uY2Vcblx0XHRcdGlmICggc3RhdGUgPT09IDIgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdGUgaXMgXCJkb25lXCIgbm93XG5cdFx0XHRzdGF0ZSA9IDI7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0Y2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJMYXN0LU1vZGlmaWVkXCIpO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJldGFnXCIpO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSA9IG1vZGlmaWVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIGlmIG5vIGNvbnRlbnRcblx0XHRcdFx0aWYgKCBzdGF0dXMgPT09IDIwNCB8fCBzLnR5cGUgPT09IFwiSEVBRFwiICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vY29udGVudFwiO1xuXG5cdFx0XHRcdC8vIGlmIG5vdCBtb2RpZmllZFxuXHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDMwNCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub3Rtb2RpZmllZFwiO1xuXG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgZGF0YSwgbGV0J3MgY29udmVydCBpdFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSByZXNwb25zZS5zdGF0ZTtcblx0XHRcdFx0XHRzdWNjZXNzID0gcmVzcG9uc2UuZGF0YTtcblx0XHRcdFx0XHRlcnJvciA9IHJlc3BvbnNlLmVycm9yO1xuXHRcdFx0XHRcdGlzU3VjY2VzcyA9ICFlcnJvcjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gV2UgZXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHRcblx0XHRcdFx0Ly8gdGhlbiBub3JtYWxpemUgc3RhdHVzVGV4dCBhbmQgc3RhdHVzIGZvciBub24tYWJvcnRzXG5cdFx0XHRcdGVycm9yID0gc3RhdHVzVGV4dDtcblx0XHRcdFx0aWYgKCBzdGF0dXMgfHwgIXN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiZXJyb3JcIjtcblx0XHRcdFx0XHRpZiAoIHN0YXR1cyA8IDAgKSB7XG5cdFx0XHRcdFx0XHRzdGF0dXMgPSAwO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgZGF0YSBmb3IgdGhlIGZha2UgeGhyIG9iamVjdFxuXHRcdFx0anFYSFIuc3RhdHVzID0gc3RhdHVzO1xuXHRcdFx0anFYSFIuc3RhdHVzVGV4dCA9ICggbmF0aXZlU3RhdHVzVGV4dCB8fCBzdGF0dXNUZXh0ICkgKyBcIlwiO1xuXG5cdFx0XHQvLyBTdWNjZXNzL0Vycm9yXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBzdWNjZXNzLCBzdGF0dXNUZXh0LCBqcVhIUiBdICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQsIGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdGpxWEhSLnN0YXR1c0NvZGUoIHN0YXR1c0NvZGUgKTtcblx0XHRcdHN0YXR1c0NvZGUgPSB1bmRlZmluZWQ7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBpc1N1Y2Nlc3MgPyBcImFqYXhTdWNjZXNzXCIgOiBcImFqYXhFcnJvclwiLFxuXHRcdFx0XHRcdFsganFYSFIsIHMsIGlzU3VjY2VzcyA/IHN1Y2Nlc3MgOiBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbXBsZXRlXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkLmZpcmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsganFYSFIsIHN0YXR1c1RleHQgXSApO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4Q29tcGxldGVcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKFwiYWpheFN0b3BcIik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cdFx0Ly8gc2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9KTtcblx0fTtcbn0pO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCh7XG5cdFx0dXJsOiB1cmwsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblx0XHRcInRocm93c1wiOiB0cnVlXG5cdH0pO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihpKSB7XG5cdFx0XHRcdGpRdWVyeSh0aGlzKS53cmFwQWxsKCBodG1sLmNhbGwodGhpcywgaSkgKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmICggdGhpc1swXSApIHtcblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR2YXIgd3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1swXS5vd25lckRvY3VtZW50ICkuZXEoMCkuY2xvbmUodHJ1ZSk7XG5cblx0XHRcdGlmICggdGhpc1swXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1swXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcChmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdENoaWxkICYmIGVsZW0uZmlyc3RDaGlsZC5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9KS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oaSkge1xuXHRcdFx0XHRqUXVlcnkodGhpcykud3JhcElubmVyKCBodG1sLmNhbGwodGhpcywgaSkgKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGkpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGlzRnVuY3Rpb24gPyBodG1sLmNhbGwodGhpcywgaSkgOiBodG1sICk7XG5cdFx0fSk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wYXJlbnQoKS5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCBcImJvZHlcIiApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0XHR9XG5cdFx0fSkuZW5kKCk7XG5cdH1cbn0pO1xuXG5cbmpRdWVyeS5leHByLmZpbHRlcnMuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdC8vIFN1cHBvcnQ6IE9wZXJhIDw9IDEyLjEyXG5cdC8vIE9wZXJhIHJlcG9ydHMgb2Zmc2V0V2lkdGhzIGFuZCBvZmZzZXRIZWlnaHRzIGxlc3MgdGhhbiB6ZXJvIG9uIHNvbWUgZWxlbWVudHNcblx0cmV0dXJuIGVsZW0ub2Zmc2V0V2lkdGggPD0gMCAmJiBlbGVtLm9mZnNldEhlaWdodCA8PSAwIHx8XG5cdFx0KCFzdXBwb3J0LnJlbGlhYmxlSGlkZGVuT2Zmc2V0cygpICYmXG5cdFx0XHQoKGVsZW0uc3R5bGUgJiYgZWxlbS5zdHlsZS5kaXNwbGF5KSB8fCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApKSA9PT0gXCJub25lXCIpO1xufTtcblxualF1ZXJ5LmV4cHIuZmlsdGVycy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIuZmlsdGVycy5oaWRkZW4oIGVsZW0gKTtcbn07XG5cblxuXG5cbnZhciByMjAgPSAvJTIwL2csXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggalF1ZXJ5LmlzQXJyYXkoIG9iaiApICkge1xuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cblx0XHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiA/IGkgOiBcIlwiICkgKyBcIl1cIiwgdiwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiBqUXVlcnkudHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgcmV0dXJuIGl0cyB2YWx1ZVxuXHRcdFx0dmFsdWUgPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSA/IHZhbHVlKCkgOiAoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlICk7XG5cdFx0fTtcblxuXHQvLyBTZXQgdHJhZGl0aW9uYWwgdG8gdHJ1ZSBmb3IgalF1ZXJ5IDw9IDEuMy4yIGJlaGF2aW9yLlxuXHRpZiAoIHRyYWRpdGlvbmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0dHJhZGl0aW9uYWwgPSBqUXVlcnkuYWpheFNldHRpbmdzICYmIGpRdWVyeS5hamF4U2V0dGluZ3MudHJhZGl0aW9uYWw7XG5cdH1cblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIGpRdWVyeS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSk7XG5cblx0fSBlbHNlIHtcblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICkucmVwbGFjZSggcjIwLCBcIitcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9KVxuXHRcdC5maWx0ZXIoZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblx0XHRcdC8vIFVzZSAuaXMoXCI6ZGlzYWJsZWRcIikgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSlcblx0XHQubWFwKGZ1bmN0aW9uKCBpLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRyZXR1cm4gdmFsID09IG51bGwgP1xuXHRcdFx0XHRudWxsIDpcblx0XHRcdFx0alF1ZXJ5LmlzQXJyYXkoIHZhbCApID9cblx0XHRcdFx0XHRqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHRcdH0pIDpcblx0XHRcdFx0XHR7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSkuZ2V0KCk7XG5cdH1cbn0pO1xuXG5cbi8vIENyZWF0ZSB0aGUgcmVxdWVzdCBvYmplY3Rcbi8vIChUaGlzIGlzIHN0aWxsIGF0dGFjaGVkIHRvIGFqYXhTZXR0aW5ncyBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSlcbmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gd2luZG93LkFjdGl2ZVhPYmplY3QgIT09IHVuZGVmaW5lZCA/XG5cdC8vIFN1cHBvcnQ6IElFNitcblx0ZnVuY3Rpb24oKSB7XG5cblx0XHQvLyBYSFIgY2Fubm90IGFjY2VzcyBsb2NhbCBmaWxlcywgYWx3YXlzIHVzZSBBY3RpdmVYIGZvciB0aGF0IGNhc2Vcblx0XHRyZXR1cm4gIXRoaXMuaXNMb2NhbCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTctOFxuXHRcdFx0Ly8gb2xkSUUgWEhSIGRvZXMgbm90IHN1cHBvcnQgbm9uLVJGQzI2MTYgbWV0aG9kcyAoIzEzMjQwKVxuXHRcdFx0Ly8gU2VlIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9tczUzNjY0OCh2PXZzLjg1KS5hc3B4XG5cdFx0XHQvLyBhbmQgaHR0cDovL3d3dy53My5vcmcvUHJvdG9jb2xzL3JmYzI2MTYvcmZjMjYxNi1zZWM5Lmh0bWwjc2VjOVxuXHRcdFx0Ly8gQWx0aG91Z2ggdGhpcyBjaGVjayBmb3Igc2l4IG1ldGhvZHMgaW5zdGVhZCBvZiBlaWdodFxuXHRcdFx0Ly8gc2luY2UgSUUgYWxzbyBkb2VzIG5vdCBzdXBwb3J0IFwidHJhY2VcIiBhbmQgXCJjb25uZWN0XCJcblx0XHRcdC9eKGdldHxwb3N0fGhlYWR8cHV0fGRlbGV0ZXxvcHRpb25zKSQvaS50ZXN0KCB0aGlzLnR5cGUgKSAmJlxuXG5cdFx0XHRjcmVhdGVTdGFuZGFyZFhIUigpIHx8IGNyZWF0ZUFjdGl2ZVhIUigpO1xuXHR9IDpcblx0Ly8gRm9yIGFsbCBvdGhlciBicm93c2VycywgdXNlIHRoZSBzdGFuZGFyZCBYTUxIdHRwUmVxdWVzdCBvYmplY3Rcblx0Y3JlYXRlU3RhbmRhcmRYSFI7XG5cbnZhciB4aHJJZCA9IDAsXG5cdHhockNhbGxiYWNrcyA9IHt9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG4vLyBTdXBwb3J0OiBJRTwxMFxuLy8gT3BlbiByZXF1ZXN0cyBtdXN0IGJlIG1hbnVhbGx5IGFib3J0ZWQgb24gdW5sb2FkICgjNTI4MClcbi8vIFNlZSBodHRwczovL3N1cHBvcnQubWljcm9zb2Z0LmNvbS9rYi8yODU2NzQ2IGZvciBtb3JlIGluZm9cbmlmICggd2luZG93LmF0dGFjaEV2ZW50ICkge1xuXHR3aW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgZnVuY3Rpb24oKSB7XG5cdFx0Zm9yICggdmFyIGtleSBpbiB4aHJDYWxsYmFja3MgKSB7XG5cdFx0XHR4aHJDYWxsYmFja3NbIGtleSBdKCB1bmRlZmluZWQsIHRydWUgKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBEZXRlcm1pbmUgc3VwcG9ydCBwcm9wZXJ0aWVzXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG54aHJTdXBwb3J0ZWQgPSBzdXBwb3J0LmFqYXggPSAhIXhoclN1cHBvcnRlZDtcblxuLy8gQ3JlYXRlIHRyYW5zcG9ydCBpZiB0aGUgYnJvd3NlciBjYW4gcHJvdmlkZSBhbiB4aHJcbmlmICggeGhyU3VwcG9ydGVkICkge1xuXG5cdGpRdWVyeS5hamF4VHJhbnNwb3J0KGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHRcdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluIHx8IHN1cHBvcnQuY29ycyApIHtcblxuXHRcdFx0dmFyIGNhbGxiYWNrO1xuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0XHR4aHIgPSBvcHRpb25zLnhocigpLFxuXHRcdFx0XHRcdFx0aWQgPSArK3hocklkO1xuXG5cdFx0XHRcdFx0Ly8gT3BlbiB0aGUgc29ja2V0XG5cdFx0XHRcdFx0eGhyLm9wZW4oIG9wdGlvbnMudHlwZSwgb3B0aW9ucy51cmwsIG9wdGlvbnMuYXN5bmMsIG9wdGlvbnMudXNlcm5hbWUsIG9wdGlvbnMucGFzc3dvcmQgKTtcblxuXHRcdFx0XHRcdC8vIEFwcGx5IGN1c3RvbSBmaWVsZHMgaWYgcHJvdmlkZWRcblx0XHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdFx0eGhyWyBpIF0gPSBvcHRpb25zLnhockZpZWxkc1sgaSBdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE92ZXJyaWRlIG1pbWUgdHlwZSBpZiBuZWVkZWRcblx0XHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHRcdC8vIGFraW4gdG8gYSBqaWdzYXcgcHV6emxlLCB3ZSBzaW1wbHkgbmV2ZXIgc2V0IGl0IHRvIGJlIHN1cmUuXG5cdFx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiAmJiAhaGVhZGVyc1tcIlgtUmVxdWVzdGVkLVdpdGhcIl0gKSB7XG5cdFx0XHRcdFx0XHRoZWFkZXJzW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHRcdFx0XHRcdC8vIElFJ3MgQWN0aXZlWE9iamVjdCB0aHJvd3MgYSAnVHlwZSBNaXNtYXRjaCcgZXhjZXB0aW9uIHdoZW4gc2V0dGluZ1xuXHRcdFx0XHRcdFx0Ly8gcmVxdWVzdCBoZWFkZXIgdG8gYSBudWxsLXZhbHVlLlxuXHRcdFx0XHRcdFx0Ly9cblx0XHRcdFx0XHRcdC8vIFRvIGtlZXAgY29uc2lzdGVudCB3aXRoIG90aGVyIFhIUiBpbXBsZW1lbnRhdGlvbnMsIGNhc3QgdGhlIHZhbHVlXG5cdFx0XHRcdFx0XHQvLyB0byBzdHJpbmcgYW5kIGlnbm9yZSBgdW5kZWZpbmVkYC5cblx0XHRcdFx0XHRcdGlmICggaGVhZGVyc1sgaSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBoZWFkZXJzWyBpIF0gKyBcIlwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRG8gc2VuZCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRcdC8vIFRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbiB3aGljaCBpcyBhY3R1YWxseVxuXHRcdFx0XHRcdC8vIGhhbmRsZWQgaW4galF1ZXJ5LmFqYXggKHNvIG5vIHRyeS9jYXRjaCBoZXJlKVxuXHRcdFx0XHRcdHhoci5zZW5kKCAoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgKSB8fCBudWxsICk7XG5cblx0XHRcdFx0XHQvLyBMaXN0ZW5lclxuXHRcdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIF8sIGlzQWJvcnQgKSB7XG5cdFx0XHRcdFx0XHR2YXIgc3RhdHVzLCBzdGF0dXNUZXh0LCByZXNwb25zZXM7XG5cblx0XHRcdFx0XHRcdC8vIFdhcyBuZXZlciBjYWxsZWQgYW5kIGlzIGFib3J0ZWQgb3IgY29tcGxldGVcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgJiYgKCBpc0Fib3J0IHx8IHhoci5yZWFkeVN0YXRlID09PSA0ICkgKSB7XG5cdFx0XHRcdFx0XHRcdC8vIENsZWFuIHVwXG5cdFx0XHRcdFx0XHRcdGRlbGV0ZSB4aHJDYWxsYmFja3NbIGlkIF07XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0galF1ZXJ5Lm5vb3A7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWJvcnQgbWFudWFsbHkgaWYgbmVlZGVkXG5cdFx0XHRcdFx0XHRcdGlmICggaXNBYm9ydCApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlICE9PSA0ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlcyA9IHt9O1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1cyA9IHhoci5zdGF0dXM7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTwxMFxuXHRcdFx0XHRcdFx0XHRcdC8vIEFjY2Vzc2luZyBiaW5hcnktZGF0YSByZXNwb25zZVRleHQgdGhyb3dzIGFuIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdC8vICgjMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlcy50ZXh0ID0geGhyLnJlc3BvbnNlVGV4dDtcblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGaXJlZm94IHRocm93cyBhbiBleGNlcHRpb24gd2hlbiBhY2Nlc3Npbmdcblx0XHRcdFx0XHRcdFx0XHQvLyBzdGF0dXNUZXh0IGZvciBmYXVsdHkgY3Jvc3MtZG9tYWluIHJlcXVlc3RzXG5cdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdHN0YXR1c1RleHQgPSB4aHIuc3RhdHVzVGV4dDtcblx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoKCBlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gV2Ugbm9ybWFsaXplIHdpdGggV2Via2l0IGdpdmluZyBhbiBlbXB0eSBzdGF0dXNUZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJcIjtcblx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGaWx0ZXIgc3RhdHVzIGZvciBub24gc3RhbmRhcmQgYmVoYXZpb3JzXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJZiB0aGUgcmVxdWVzdCBpcyBsb2NhbCBhbmQgd2UgaGF2ZSBkYXRhOiBhc3N1bWUgYSBzdWNjZXNzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gKHN1Y2Nlc3Mgd2l0aCBubyBkYXRhIHdvbid0IGdldCBub3RpZmllZCwgdGhhdCdzIHRoZSBiZXN0IHdlXG5cdFx0XHRcdFx0XHRcdFx0Ly8gY2FuIGRvIGdpdmVuIGN1cnJlbnQgaW1wbGVtZW50YXRpb25zKVxuXHRcdFx0XHRcdFx0XHRcdGlmICggIXN0YXR1cyAmJiBvcHRpb25zLmlzTG9jYWwgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRzdGF0dXMgPSByZXNwb25zZXMudGV4dCA/IDIwMCA6IDQwNDtcblx0XHRcdFx0XHRcdFx0XHQvLyBJRSAtICMxNDUwOiBzb21ldGltZXMgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMTIyMyApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHN0YXR1cyA9IDIwNDtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gQ2FsbCBjb21wbGV0ZSBpZiBuZWVkZWRcblx0XHRcdFx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggc3RhdHVzLCBzdGF0dXNUZXh0LCByZXNwb25zZXMsIHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRpZiAoICFvcHRpb25zLmFzeW5jICkge1xuXHRcdFx0XHRcdFx0Ly8gaWYgd2UncmUgaW4gc3luYyBtb2RlIHdlIGZpcmUgdGhlIGNhbGxiYWNrXG5cdFx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXHRcdFx0XHRcdFx0Ly8gKElFNiAmIElFNykgaWYgaXQncyBpbiBjYWNoZSBhbmQgaGFzIGJlZW5cblx0XHRcdFx0XHRcdC8vIHJldHJpZXZlZCBkaXJlY3RseSB3ZSBuZWVkIHRvIGZpcmUgdGhlIGNhbGxiYWNrXG5cdFx0XHRcdFx0XHRzZXRUaW1lb3V0KCBjYWxsYmFjayApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHQvLyBBZGQgdG8gdGhlIGxpc3Qgb2YgYWN0aXZlIHhociBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSB4aHJDYWxsYmFja3NbIGlkIF0gPSBjYWxsYmFjaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRjYWxsYmFjayggdW5kZWZpbmVkLCB0cnVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIEZ1bmN0aW9ucyB0byBjcmVhdGUgeGhyc1xuZnVuY3Rpb24gY3JlYXRlU3RhbmRhcmRYSFIoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3QoKTtcblx0fSBjYXRjaCggZSApIHt9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFjdGl2ZVhIUigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5BY3RpdmVYT2JqZWN0KCBcIk1pY3Jvc29mdC5YTUxIVFRQXCIgKTtcblx0fSBjYXRjaCggZSApIHt9XG59XG5cblxuXG5cbi8vIEluc3RhbGwgc2NyaXB0IGRhdGFUeXBlXG5qUXVlcnkuYWpheFNldHVwKHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdFwiXG5cdH0sXG5cdGNvbnRlbnRzOiB7XG5cdFx0c2NyaXB0OiAvKD86amF2YXxlY21hKXNjcmlwdC9cblx0fSxcblx0Y29udmVydGVyczoge1xuXHRcdFwidGV4dCBzY3JpcHRcIjogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggdGV4dCApO1xuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHR9XG59KTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBnbG9iYWxcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0cy5jYWNoZSA9IGZhbHNlO1xuXHR9XG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHRzLnR5cGUgPSBcIkdFVFwiO1xuXHRcdHMuZ2xvYmFsID0gZmFsc2U7XG5cdH1cbn0pO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbihzKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cblx0XHR2YXIgc2NyaXB0LFxuXHRcdFx0aGVhZCA9IGRvY3VtZW50LmhlYWQgfHwgalF1ZXJ5KFwiaGVhZFwiKVswXSB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRyZXR1cm4ge1xuXG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggXywgY2FsbGJhY2sgKSB7XG5cblx0XHRcdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcblxuXHRcdFx0XHRzY3JpcHQuYXN5bmMgPSB0cnVlO1xuXG5cdFx0XHRcdGlmICggcy5zY3JpcHRDaGFyc2V0ICkge1xuXHRcdFx0XHRcdHNjcmlwdC5jaGFyc2V0ID0gcy5zY3JpcHRDaGFyc2V0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0c2NyaXB0LnNyYyA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIEF0dGFjaCBoYW5kbGVycyBmb3IgYWxsIGJyb3dzZXJzXG5cdFx0XHRcdHNjcmlwdC5vbmxvYWQgPSBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oIF8sIGlzQWJvcnQgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGlzQWJvcnQgfHwgIXNjcmlwdC5yZWFkeVN0YXRlIHx8IC9sb2FkZWR8Y29tcGxldGUvLnRlc3QoIHNjcmlwdC5yZWFkeVN0YXRlICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBtZW1vcnkgbGVhayBpbiBJRVxuXHRcdFx0XHRcdFx0c2NyaXB0Lm9ubG9hZCA9IHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgdGhlIHNjcmlwdFxuXHRcdFx0XHRcdFx0aWYgKCBzY3JpcHQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdFx0c2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBEZXJlZmVyZW5jZSB0aGUgc2NyaXB0XG5cdFx0XHRcdFx0XHRzY3JpcHQgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHQvLyBDYWxsYmFjayBpZiBub3QgYWJvcnRcblx0XHRcdFx0XHRcdGlmICggIWlzQWJvcnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrKCAyMDAsIFwic3VjY2Vzc1wiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIENpcmN1bXZlbnQgSUU2IGJ1Z3Mgd2l0aCBiYXNlIGVsZW1lbnRzICgjMjcwOSBhbmQgIzQzNzgpIGJ5IHByZXBlbmRpbmdcblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGhlYWQuaW5zZXJ0QmVmb3JlKCBzY3JpcHQsIGhlYWQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fSxcblxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHNjcmlwdCApIHtcblx0XHRcdFx0XHRzY3JpcHQub25sb2FkKCB1bmRlZmluZWQsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0pO1xuXG5cblxuXG52YXIgb2xkQ2FsbGJhY2tzID0gW10sXG5cdHJqc29ucCA9IC8oPSlcXD8oPz0mfCQpfFxcP1xcPy87XG5cbi8vIERlZmF1bHQganNvbnAgc2V0dGluZ3NcbmpRdWVyeS5hamF4U2V0dXAoe1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZSsrICkgKTtcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdH1cbn0pO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmICEoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIikgJiYgcmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbXCJzY3JpcHQganNvblwiXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhcmVzcG9uc2VDb250YWluZXIgKSB7XG5cdFx0XHRcdGpRdWVyeS5lcnJvciggY2FsbGJhY2tOYW1lICsgXCIgd2FzIG5vdCBjYWxsZWRcIiApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyWyAwIF07XG5cdFx0fTtcblxuXHRcdC8vIGZvcmNlIGpzb24gZGF0YVR5cGVcblx0XHRzLmRhdGFUeXBlc1sgMCBdID0gXCJqc29uXCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrXG5cdFx0b3ZlcndyaXR0ZW4gPSB3aW5kb3dbIGNhbGxiYWNrTmFtZSBdO1xuXHRcdHdpbmRvd1sgY2FsbGJhY2tOYW1lIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gYXJndW1lbnRzO1xuXHRcdH07XG5cblx0XHQvLyBDbGVhbi11cCBmdW5jdGlvbiAoZmlyZXMgYWZ0ZXIgY29udmVydGVycylcblx0XHRqcVhIUi5hbHdheXMoZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBSZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXHRcdFx0XHQvLyBtYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIHNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIG92ZXJ3cml0dGVuICkgKSB7XG5cdFx0XHRcdG92ZXJ3cml0dGVuKCByZXNwb25zZUNvbnRhaW5lclsgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJlc3BvbnNlQ29udGFpbmVyID0gb3ZlcndyaXR0ZW4gPSB1bmRlZmluZWQ7XG5cdFx0fSk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSk7XG5cblxuXG5cbi8vIGRhdGE6IHN0cmluZyBvZiBodG1sXG4vLyBjb250ZXh0IChvcHRpb25hbCk6IElmIHNwZWNpZmllZCwgdGhlIGZyYWdtZW50IHdpbGwgYmUgY3JlYXRlZCBpbiB0aGlzIGNvbnRleHQsIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0dmFyIHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApLFxuXHRcdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsxXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBqUXVlcnkuYnVpbGRGcmFnbWVudCggWyBkYXRhIF0sIGNvbnRleHQsIHNjcmlwdHMgKTtcblxuXHRpZiAoIHNjcmlwdHMgJiYgc2NyaXB0cy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5KCBzY3JpcHRzICkucmVtb3ZlKCk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgcGFyc2VkLmNoaWxkTm9kZXMgKTtcbn07XG5cblxuLy8gS2VlcCBhIGNvcHkgb2YgdGhlIG9sZCBsb2FkIG1ldGhvZFxudmFyIF9sb2FkID0galF1ZXJ5LmZuLmxvYWQ7XG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdGlmICggdHlwZW9mIHVybCAhPT0gXCJzdHJpbmdcIiAmJiBfbG9hZCApIHtcblx0XHRyZXR1cm4gX2xvYWQuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHR9XG5cblx0dmFyIHNlbGVjdG9yLCByZXNwb25zZSwgdHlwZSxcblx0XHRzZWxmID0gdGhpcyxcblx0XHRvZmYgPSB1cmwuaW5kZXhPZihcIiBcIik7XG5cblx0aWYgKCBvZmYgPj0gMCApIHtcblx0XHRzZWxlY3RvciA9IGpRdWVyeS50cmltKCB1cmwuc2xpY2UoIG9mZiwgdXJsLmxlbmd0aCApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xuXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3Rcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG5cdFx0alF1ZXJ5LmFqYXgoe1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIGlmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWRcblx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9KS5kb25lKGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KFwiPGRpdj5cIikuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xuXG5cdFx0fSkuY29tcGxldGUoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBjYWxsYmFjaywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdH0pO1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5cblxuXG4vLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50c1xualF1ZXJ5LmVhY2goIFsgXCJhamF4U3RhcnRcIiwgXCJhamF4U3RvcFwiLCBcImFqYXhDb21wbGV0ZVwiLCBcImFqYXhFcnJvclwiLCBcImFqYXhTdWNjZXNzXCIsIFwiYWpheFNlbmRcIiBdLCBmdW5jdGlvbiggaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59KTtcblxuXG5cblxualF1ZXJ5LmV4cHIuZmlsdGVycy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9KS5sZW5ndGg7XG59O1xuXG5cblxuXG5cbnZhciBkb2NFbGVtID0gd2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuLyoqXG4gKiBHZXRzIGEgd2luZG93IGZyb20gYW4gZWxlbWVudFxuICovXG5mdW5jdGlvbiBnZXRXaW5kb3coIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSA/XG5cdFx0ZWxlbSA6XG5cdFx0ZWxlbS5ub2RlVHlwZSA9PT0gOSA/XG5cdFx0XHRlbGVtLmRlZmF1bHRWaWV3IHx8IGVsZW0ucGFyZW50V2luZG93IDpcblx0XHRcdGZhbHNlO1xufVxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIHNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdGpRdWVyeS5pbkFycmF5KFwiYXV0b1wiLCBbIGN1ckNTU1RvcCwgY3VyQ1NTTGVmdCBdICkgPiAtMTtcblxuXHRcdC8vIG5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGN1ck9mZnNldCApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHZhciBkb2NFbGVtLCB3aW4sXG5cdFx0XHRib3ggPSB7IHRvcDogMCwgbGVmdDogMCB9LFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGRvYyA9IGVsZW0gJiYgZWxlbS5vd25lckRvY3VtZW50O1xuXG5cdFx0aWYgKCAhZG9jICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0Ly8gTWFrZSBzdXJlIGl0J3Mgbm90IGEgZGlzY29ubmVjdGVkIERPTSBub2RlXG5cdFx0aWYgKCAhalF1ZXJ5LmNvbnRhaW5zKCBkb2NFbGVtLCBlbGVtICkgKSB7XG5cdFx0XHRyZXR1cm4gYm94O1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGRvbid0IGhhdmUgZ0JDUiwganVzdCB1c2UgMCwwIHJhdGhlciB0aGFuIGVycm9yXG5cdFx0Ly8gQmxhY2tCZXJyeSA1LCBpT1MgMyAob3JpZ2luYWwgaVBob25lKVxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICE9PSBzdHJ1bmRlZmluZWQgKSB7XG5cdFx0XHRib3ggPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdH1cblx0XHR3aW4gPSBnZXRXaW5kb3coIGRvYyApO1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IGJveC50b3AgICsgKCB3aW4ucGFnZVlPZmZzZXQgfHwgZG9jRWxlbS5zY3JvbGxUb3AgKSAgLSAoIGRvY0VsZW0uY2xpZW50VG9wICB8fCAwICksXG5cdFx0XHRsZWZ0OiBib3gubGVmdCArICggd2luLnBhZ2VYT2Zmc2V0IHx8IGRvY0VsZW0uc2Nyb2xsTGVmdCApIC0gKCBkb2NFbGVtLmNsaWVudExlZnQgfHwgMCApXG5cdFx0fTtcblx0fSxcblxuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH0sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0Ly8gZml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHdpbmRvdyAocGFyZW50T2Zmc2V0ID0ge3RvcDowLCBsZWZ0OiAwfSwgYmVjYXVzZSBpdCBpcyBpdHMgb25seSBvZmZzZXQgcGFyZW50XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXHRcdFx0Ly8gd2UgYXNzdW1lIHRoYXQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGlzIGF2YWlsYWJsZSB3aGVuIGNvbXB1dGVkIHBvc2l0aW9uIGlzIGZpeGVkXG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBHZXQgKnJlYWwqIG9mZnNldFBhcmVudFxuXHRcdFx0b2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQoKTtcblxuXHRcdFx0Ly8gR2V0IGNvcnJlY3Qgb2Zmc2V0c1xuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblx0XHRcdGlmICggIWpRdWVyeS5ub2RlTmFtZSggb2Zmc2V0UGFyZW50WyAwIF0sIFwiaHRtbFwiICkgKSB7XG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IG9mZnNldFBhcmVudC5vZmZzZXQoKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9mZnNldFBhcmVudCBib3JkZXJzXG5cdFx0XHRwYXJlbnRPZmZzZXQudG9wICArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApO1xuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHQvLyBub3RlOiB3aGVuIGFuIGVsZW1lbnQgaGFzIG1hcmdpbjogYXV0byB0aGUgb2Zmc2V0TGVmdCBhbmQgbWFyZ2luTGVmdFxuXHRcdC8vIGFyZSB0aGUgc2FtZSBpbiBTYWZhcmkgY2F1c2luZyBvZmZzZXQubGVmdCB0byBpbmNvcnJlY3RseSBiZSAwXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogIG9mZnNldC50b3AgIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSlcblx0XHR9O1xuXHR9LFxuXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50IHx8IGRvY0VsZW07XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmICggIWpRdWVyeS5ub2RlTmFtZSggb2Zmc2V0UGFyZW50LCBcImh0bWxcIiApICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jRWxlbTtcblx0XHR9KTtcblx0fVxufSk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gL1kvLnRlc3QoIHByb3AgKTtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cdFx0XHR2YXIgd2luID0gZ2V0V2luZG93KCBlbGVtICk7XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyAocHJvcCBpbiB3aW4pID8gd2luWyBwcm9wIF0gOlxuXHRcdFx0XHRcdHdpbi5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIG1ldGhvZCBdIDpcblx0XHRcdFx0XHRlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogalF1ZXJ5KCB3aW4gKS5zY3JvbGxMZWZ0KCksXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogalF1ZXJ5KCB3aW4gKS5zY3JvbGxUb3AoKVxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCwgbnVsbCApO1xuXHR9O1xufSk7XG5cbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHRcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCB3ZSBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXHRcdFx0XHQvLyBpZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0pO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLCBjb250ZW50OiB0eXBlLCBcIlwiOiBcIm91dGVyXCIgKyBuYW1lIH0sIGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXHRcdC8vIG1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0XHQvLyBBcyBvZiA1LzgvMjAxMiB0aGlzIHdpbGwgeWllbGQgaW5jb3JyZWN0IHJlc3VsdHMgZm9yIE1vYmlsZSBTYWZhcmksIGJ1dCB0aGVyZVxuXHRcdFx0XHRcdC8vIGlzbid0IGEgd2hvbGUgbG90IHdlIGNhbiBkby4gU2VlIHB1bGwgcmVxdWVzdCBhdCB0aGlzIFVSTCBmb3IgZGlzY3Vzc2lvbjpcblx0XHRcdFx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzc2NFxuXHRcdFx0XHRcdHJldHVybiBlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLCB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHQvLyB1bmZvcnR1bmF0ZWx5LCB0aGlzIGNhdXNlcyBidWcgIzM4MzggaW4gSUU2Lzggb25seSwgYnV0IHRoZXJlIGlzIGN1cnJlbnRseSBubyBnb29kLCBzbWFsbCB3YXkgdG8gZml4IGl0LlxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUsIG51bGwgKTtcblx0XHR9O1xuXHR9KTtcbn0pO1xuXG5cbi8vIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgY29udGFpbmVkIGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5qUXVlcnkuZm4uc2l6ZSA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcy5sZW5ndGg7XG59O1xuXG5qUXVlcnkuZm4uYW5kU2VsZiA9IGpRdWVyeS5mbi5hZGRCYWNrO1xuXG5cblxuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0pO1xufVxuXG5cblxuXG52YXJcblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF8kID0gd2luZG93LiQ7XG5cbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XG5cdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cuJCA9IF8kO1xuXHR9XG5cblx0aWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnk7XG59O1xuXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluXG4vLyBBTUQgKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAoIzEzNTY2KVxuaWYgKCB0eXBlb2Ygbm9HbG9iYWwgPT09IHN0cnVuZGVmaW5lZCApIHtcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5cblxuXG5yZXR1cm4galF1ZXJ5O1xuXG59KSk7XG4iLCIvKlxuICogU1ZHZWV6eS5qcyAxLjBcbiAqXG4gKiBDb3B5cmlnaHQgMjAxMiwgQmVuIEhvd2RsZSBodHRwOi8vdHdvc3RlcG1lZGlhLmNvLnVrXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgV1RGUEwgbGljZW5zZVxuICogaHR0cDovL3NhbS56b3kub3JnL3d0ZnBsL1xuICpcbiAqIERhdGU6IFN1biBBdWcgMjYgMjA6MzggMjAxMiBHTVRcbiAqL1xuXG4vKlxuXHQvL2NhbGwgbGlrZSBzbywgcGFzcyBpbiBhIGNsYXNzIG5hbWUgdGhhdCB5b3UgZG9uJ3Qgd2FudCBpdCB0byBjaGVjayBhbmQgYSBmaWxldHlwZSB0byByZXBsYWNlIC5zdmcgd2l0aFxuXHRzdmdlZXp5LmluaXQoJ25vY2hlY2snLCAncG5nJyk7XG4qL1xuXG52YXIgc3ZnZWV6eSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0cmV0dXJuIHtcblxuXHRcdFx0aW5pdDogZnVuY3Rpb24oYXZvaWQsIGZpbGV0eXBlKSB7XG5cdFx0XHRcdHRoaXMuYXZvaWQgPSBhdm9pZCB8fCBmYWxzZTtcblx0XHRcdFx0dGhpcy5maWxldHlwZSA9IGZpbGV0eXBlIHx8ICdwbmcnO1xuXHRcdFx0XHR0aGlzLnN2Z1N1cHBvcnQgPSB0aGlzLnN1cHBvcnRzU3ZnKCk7XG5cdFx0XHRcdGlmKCF0aGlzLnN2Z1N1cHBvcnQpIHtcblx0XHRcdFx0XHR0aGlzLmltYWdlcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpbWcnKTtcblx0XHRcdFx0XHR0aGlzLmltZ0wgPSB0aGlzLmltYWdlcy5sZW5ndGg7XG5cdFx0XHRcdFx0dGhpcy5mYWxsYmFja3MoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0ZmFsbGJhY2tzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0d2hpbGUodGhpcy5pbWdMLS0pIHtcblx0XHRcdFx0XHRpZighdGhpcy5oYXNDbGFzcyh0aGlzLmltYWdlc1t0aGlzLmltZ0xdLCB0aGlzLmF2b2lkKSB8fCAhdGhpcy5hdm9pZCkge1xuXHRcdFx0XHRcdFx0dmFyIHNyYyA9IHRoaXMuaW1hZ2VzW3RoaXMuaW1nTF0uZ2V0QXR0cmlidXRlKCdzcmMnKTtcblx0XHRcdFx0XHRcdGlmKHNyYyA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmKHRoaXMuZ2V0RmlsZUV4dChzcmMpID09ICdzdmcnKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBuZXdTcmMgPSBzcmMucmVwbGFjZSgnLnN2ZycsICcuJyArIHRoaXMuZmlsZXR5cGUpO1xuXHRcdFx0XHRcdFx0XHR0aGlzLmltYWdlc1t0aGlzLmltZ0xdLnNldEF0dHJpYnV0ZSgnc3JjJywgbmV3U3JjKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGdldEZpbGVFeHQ6IGZ1bmN0aW9uKHNyYykge1xuXHRcdFx0XHR2YXIgZXh0ID0gc3JjLnNwbGl0KCcuJykucG9wKCk7XG5cbiAgICAgICAgXHRcdFx0aWYoZXh0LmluZGV4T2YoXCI/XCIpICE9PSAtMSkge1xuICAgICAgICAgIFx0XHRcdFx0ZXh0ID0gZXh0LnNwbGl0KCc/JylbMF07XG4gICAgICAgIFx0XHRcdH1cblxuICAgICAgICBcdFx0XHRyZXR1cm4gZXh0O1xuXHRcdFx0fSxcblxuXHRcdFx0aGFzQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIGNscykge1xuXHRcdFx0XHRyZXR1cm4oJyAnICsgZWxlbWVudC5jbGFzc05hbWUgKyAnICcpLmluZGV4T2YoJyAnICsgY2xzICsgJyAnKSA+IC0xO1xuXHRcdFx0fSxcblxuXHRcdFx0c3VwcG9ydHNTdmc6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZShcImh0dHA6Ly93d3cudzMub3JnL1RSL1NWRzExL2ZlYXR1cmUjSW1hZ2VcIiwgXCIxLjFcIik7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHR9KCk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbi8vdmVuZG9yXG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IGZpdHZpZHMgZnJvbSAnZml0dmlkcyc7XG5pbXBvcnQgc3ZnZWV6eSBmcm9tICdzdmdlZXp5JztcbmltcG9ydCBqUGxheWVyIGZyb20gJ2pwbGF5ZXInO1xuXG4vL21vZHVsZXNcbmltcG9ydCBjb3VudGRvd24gZnJvbSAnLi9tb2R1bGVzL2NvdW50ZG93bic7XG5pbXBvcnQgdWlBY3Rpb25zIGZyb20gJy4vbW9kdWxlcy91aS1hY3Rpb25zJztcbmltcG9ydCBzY2hlZHVsZSBmcm9tICcuL21vZHVsZXMvc2NoZWR1bGUnO1xuaW1wb3J0IGF1ZGlvUGxheWVyIGZyb20gJy4vbW9kdWxlcy9hdWRpby1wbGF5ZXInO1xuXG5jb25zdCBBUFAgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uKCkge1xuICAgIC8vIHZlbmRvciBpbml0XG4gICAgJCgnLmJsb2ctY29udGVudC12aWRlbycpLmZpdFZpZHMoKTtcbiAgICBzdmdlZXp5LmluaXQoZmFsc2UsICdwbmcnKTtcblxuICAgIC8vTW9kdWxlIGluaXRcbiAgICB1aUFjdGlvbnMuaW5pdCgpO1xuICAgIGNvdW50ZG93bi5pbml0KCk7XG4gICAgc2NoZWR1bGUuaW5pdCgpO1xuICAgIGF1ZGlvUGxheWVyLmluaXQoKTtcbiAgfVxufTtcblxuQVBQLmluaXQoKTtcbiIsImNsYXNzIEF1ZGlvUGxheWVyIHtcbiAgaW5pdCgpIHtcbiAgICBjb25zb2xlLmxvZyhcInRlc3RcIilcbiAgICB0aGlzLnNldHVwUGxheWVyKClcbiAgfVxuXG4gIHNldHVwUGxheWVyKCkge1xuICAgICQoJy5qcy1hdWRpby1wbGF5ZXItd3JhcHBlcicpLmpQbGF5ZXIoe1xuICAgICAgcmVhZHk6IGZ1bmN0aW9uKCkge1xuICAgICAgICAkKHRoaXMpLmpQbGF5ZXIoJ3NldE1lZGlhJywge1xuICAgICAgICAgIG1wMzogJCgnLmpzLWF1ZGlvLXBsYXllci13cmFwcGVyJykuZGF0YSgnYXVkaW8nKVxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBwcmVsb2FkOiAnYXV0bycsXG4gICAgICB2b2x1bWU6IDEsXG4gICAgICBjc3NTZWxlY3RvckFuY2VzdG9yOiAnLnBsYXllcl9fY29udGFpbmVyJyxcbiAgICAgIGNzc1NlbGVjdG9yOiB7XG4gICAgICAgIHBsYXk6ICcucGxheS1idG4nLFxuICAgICAgICBwYXVzZTogJy5wYXVzZS1idG4nLFxuICAgICAgICBzZWVrQmFyOiAnLnBsYXllcl9fc2Vlay1iYXInLFxuICAgICAgICBwbGF5QmFyOiAnLnBsYXllcl9fcGxheS1iYXInLFxuICAgICAgICBjdXJyZW50VGltZTogJy5wbGF5ZXJfX2N1cnJlbnQtdGltZScsXG4gICAgICAgIGR1cmF0aW9uOiAnLnBsYXllcl9fZHVyYXRpb24nXG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IG5ldyBBdWRpb1BsYXllcigpOyIsInZhciBibG9nID0ge1xuICBmaWx0ZXJCeTogZnVuY3Rpb24oZmlsdGVyLGVsKXtcbiAgICBpZigkKGVsKS5oYXNDbGFzcygnYmxvZ19fbmF2X19saW5rLS1zZWxlY3RlZCcpICl7XG4gICAgICAkKCcuanMtZmlsdGVyLWJsb2cnKS5yZW1vdmVDbGFzcygnYmxvZ19fbmF2X19saW5rLS1zZWxlY3RlZCcpO1xuICAgICAgJCgnLmpzLXBvc3QtcHJldmlldycpLmZhZGVPdXQoMzAwKS5wcm9taXNlKCkuZG9uZSggZnVuY3Rpb24oKXtcbiAgICAgICAgJCgnLnBvc3QtcHJldmlldycpLnJlbW92ZUNsYXNzKCdwb3N0LXByZXZpZXctLWxhc3QnKTtcbiAgICAgICAgJCgnLmpzLXBvc3QtcHJldmlldycpLmZhZGVJbig0MDApO1xuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgJCgnLmpzLWZpbHRlci1ibG9nJykucmVtb3ZlQ2xhc3MoJ2Jsb2dfX25hdl9fbGluay0tc2VsZWN0ZWQnKTtcbiAgICAgICQoZWwpLmFkZENsYXNzKCdibG9nX19uYXZfX2xpbmstLXNlbGVjdGVkJyk7XG4gICAgICAkKCcuanMtcG9zdC1wcmV2aWV3JykuZmFkZU91dCgzMDApLnByb21pc2UoKS5kb25lKCBmdW5jdGlvbigpe1xuICAgICAgICAkKCcqW2RhdGEtY2F0ZWdvcnk9XCInK2ZpbHRlcisnXCJdJykuZmFkZUluKDQwMCk7XG4gICAgICAgICQoJy5wb3N0LXByZXZpZXc6dmlzaWJsZTpsYXN0JykuYWRkQ2xhc3MoJ3Bvc3QtcHJldmlldy0tbGFzdCcpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LFxuICBvcGVuU2hhcmVQb3B1cDogZnVuY3Rpb24ocGxhdGZvcm0sIG1lc3NhZ2UsIHVybCkge1xuICAgIHZhciBwb3BVcmwsXG4gICAgICAgIG5ld1dpbmRvdztcblxuICAgIGlmKCBwbGF0Zm9ybSA9PSAndHdpdHRlcicpe1xuICAgICAgICBwb3BVcmwgPSAnaHR0cDovL3R3aXR0ZXIuY29tL2hvbWU/c3RhdHVzPScgKyBlbmNvZGVVUkkobWVzc2FnZSkgKyAnKycgKyB1cmw7XG5cbiAgICB9IGVsc2UgaWYocGxhdGZvcm0gPT0gJ2ZhY2Vib29rJyl7XG4gICAgICAgIHBvcFVybCA9ICdodHRwOi8vd3d3LmZhY2Vib29rLmNvbS9zaGFyZS5waHA/dScgKyB1cmwgKyAnJmFtcDt0aXRsZT0nICsgZW5jb2RlVVJJKG1lc3NhZ2UpO1xuICAgIH1cbiAgICBuZXdXaW5kb3cgPSB3aW5kb3cub3Blbihwb3BVcmwsJ19ibGFuaycsJ2hlaWdodD01MDAsd2lkdGg9NjAwJyk7XG4gICAgaWYgKHdpbmRvdy5mb2N1cykgeyBuZXdXaW5kb3cuZm9jdXMoKTsgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgYmxvZzsiLCJjbGFzcyBDb3VudGRvd24ge1xuICBpbml0KCl7XG4gICAgdGhpcy5jYWxjQ291bnRkb3duKCk7XG4gIH1cbiAgdGltZVVudGlsRGF0ZSh0YXJnZXREYXRlLCBmb3JtYXQpe1xuICAgIHZhciB0b2RheSA9IG5ldyBEYXRlKCk7XG4gICAgdmFyIHRhcmdldCA9IG5ldyBEYXRlKHRhcmdldERhdGUpO1xuICAgIHZhciB0aW1lTGVmdEluTXMgPSB0YXJnZXQuZ2V0VGltZSgpIC0gdG9kYXkuZ2V0VGltZSgpO1xuICAgIHZhciBtc1Blck1pbnV0ZSA9IDYwICogMTAwMDtcbiAgICB2YXIgbXNQZXJIb3VyID0gNjAgKiA2MCAqIDEwMDA7XG4gICAgdmFyIG1zUGVyRGF5ID0gMjQgKiA2MCAqIDYwICogMTAwMDtcbiAgICB2YXIgbWludXRlc0xlZnQ7XG4gICAgdmFyIGRheXNMZWZ0O1xuICAgIHZhciBob3Vyc0xlZnQ7XG5cbiAgICBpZiAoZm9ybWF0ID09PSAnbWludXRlcycpe1xuICAgICAgbWludXRlc0xlZnQgPSBNYXRoLmZsb29yKHRpbWVMZWZ0SW5NcyAvIG1zUGVyTWludXRlKTtcbiAgICAgIHJldHVybiBtaW51dGVzTGVmdDtcbiAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gJ2hvdXJzJyl7XG4gICAgICBob3Vyc0xlZnQgPSBNYXRoLmZsb29yKHRpbWVMZWZ0SW5NcyAvIG1zUGVySG91cik7XG4gICAgICByZXR1cm4gaG91cnNMZWZ0O1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlzTGVmdCA9IE1hdGguZmxvb3IodGltZUxlZnRJbk1zIC8gbXNQZXJEYXkpO1xuICAgICAgcmV0dXJuIGRheXNMZWZ0O1xuICAgIH1cbiAgfVxuXG4gIGluVGhlRnV0dXJlKGRhdGUpe1xuICAgIGlmKCB0aGlzLnRpbWVVbnRpbERhdGUoZGF0ZSwgJ21pbnV0ZXMnKSA+IDAgKXtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGNhbGNDb3VudGRvd24oKXtcbiAgICB2YXIgc3VwZXJFYXJseUJpcmQgPSAnU2VwdGVtYmVyIDI2LCAyMDE1IDE4OjAwOjAwJztcbiAgICB2YXIgRWFybHlCaXJkID0gJ09jdG9iZXIgMjIsIDIwMTUgMTg6MDA6MDAnO1xuICAgIHZhciBuZXh0SW5jcmVhc2U7XG5cbiAgICBpZiggdGhpcy5pblRoZUZ1dHVyZShzdXBlckVhcmx5QmlyZCkgKXtcbiAgICAgIG5leHRJbmNyZWFzZSA9IHN1cGVyRWFybHlCaXJkO1xuICAgIH0gZWxzZSB7XG4gICAgICAkKCcudGlja2V0JykuZmlyc3QoKS5hZGRDbGFzcygndGlja2V0LS1zb2xkLW91dCcpLnVud3JhcCgnPGEgaHJlZj1cIlwiPjwvYT4nKTtcbiAgICAgICQoJy50aWNrZXQnKS5lcSgxKS5yZW1vdmVDbGFzcygndGlja2V0LS11bnJlbGVhc2VkJyk7XG4gICAgICAkKCcudGlja2V0JykuZXEoMSkud3JhcCgnPGEgaHJlZj1cImh0dHBzOi8vd3d3LmV2ZW50YnJpdGUuY28udWsvZS9iZXlvbmQtY29uZi0yMDE1LXRpY2tldHMtMTg1MTcxMTAxNzVcIj48L2E+Jyk7XG4gICAgICBuZXh0SW5jcmVhc2UgPSBFYXJseUJpcmQ7XG4gICAgfVxuXG4gICAgdmFyIG1pbnV0ZXMgPSB0aGlzLnRpbWVVbnRpbERhdGUobmV4dEluY3JlYXNlLCAnbWludXRlcycpO1xuICAgIHZhciBob3VycyA9IHRoaXMudGltZVVudGlsRGF0ZShuZXh0SW5jcmVhc2UsICdob3VycycpO1xuICAgIHZhciBkYXlzID0gdGhpcy50aW1lVW50aWxEYXRlKG5leHRJbmNyZWFzZSwgJ2RheXMnKTtcblxuICAgIGlmKG1pbnV0ZXMgPD0gNjApe1xuICAgICAgdGhpcy5kaXNwbGF5Q291bnRkb3duKCBtaW51dGVzLCAnbWludXRlcycpO1xuICAgIH0gZWxzZSBpZihob3VycyA8PSAyNCkge1xuICAgICAgdGhpcy5kaXNwbGF5Q291bnRkb3duKCBob3VycywgJ2hvdXJzJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGlzcGxheUNvdW50ZG93biggZGF5cywgJ2RheXMnKTtcbiAgICB9XG4gIH1cbiAgXG4gIGRpc3BsYXlDb3VudGRvd24oY291bnRkb3duQW1vdW50LCBmb3JtYXQpe1xuICAgIHZhciBjb3VudGRvd25Bc1RleHQgPSBjb3VudGRvd25BbW91bnQudG9TdHJpbmcoKTtcblxuICAgIGlmIChjb3VudGRvd25Bc1RleHQubGVuZ3RoID09PSAxKSB7XG4gICAgICBjb3VudGRvd25Bc1RleHQgPSAnMCcgKyBjb3VudGRvd25Bc1RleHQ7XG4gICAgfVxuICAgICQoJy50aW1lLWxlZnRfX251bScpLmZpcnN0KCkudGV4dChjb3VudGRvd25Bc1RleHRbMF0pO1xuICAgICQoJy50aW1lLWxlZnRfX251bScpLmxhc3QoKS50ZXh0KGNvdW50ZG93bkFzVGV4dFsxXSk7XG4gICAgJCgnLmpzLXRpY2tldC1jb250ZG93bl9fdW5pdCcpLnRleHQoZm9ybWF0KTtcbiAgfVxuXG59XG5leHBvcnQgZGVmYXVsdCBuZXcgQ291bnRkb3duKCk7IiwiY2xhc3MgTWFpbGNoaW1wRm9ybSB7XG4gIHJlZ2lzdGVyKGZvcm0pe1xuICAgICQuYWpheCh7XG4gICAgICB0eXBlOiBmb3JtLmF0dHIoJ21ldGhvZCcpLFxuICAgICAgdXJsOiBmb3JtLmF0dHIoJ2FjdGlvbicpLFxuICAgICAgZGF0YTogZm9ybS5zZXJpYWxpemUoKSxcbiAgICAgIGNhY2hlIDogZmFsc2UsXG4gICAgICBkYXRhVHlwZSA6ICdqc29uJyxcbiAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCcsXG4gICAgICBjb21wbGV0ZSA6IGZ1bmN0aW9uKGRhdGEpIHtcblxuICAgICAgICB2YXIgbWVzc2FnZSA9IGRhdGEucmVzcG9uc2VKU09OLm1zZztcblxuICAgICAgICBpZiAoZGF0YS5yZXN1bHQgIT09ICdzdWNjZXNzJykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xuICAgICAgICAgICQoJy5zaWduLXVwX19tZXNzYWdlJykuYWRkQ2xhc3MoJ3NpZ24tdXBfX21lc3NhZ2UtLWFjdGl2ZSBzaWduLXVwX19tZXNzYWdlLS1mYWlsJykuaHRtbChtZXNzYWdlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcbiAgICAgICAgICAkKCcuc2lnbi11cF9fbWVzc2FnZScpLmFkZENsYXNzKCdzaWduLXVwX19tZXNzYWdlLS1hY3RpdmUgc2lnbi11cF9fbWVzc2FnZS0tc3VjY2VzcycpLmh0bWwobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTsgLy8gZW5kIEFKQVhcbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgbmV3IE1haWxjaGltcEZvcm0oKTsiLCJjbGFzcyBTY2hlZHVsZSB7XG4gIGluaXQoKSB7XG4gICAgaWYoICQoJ3NlY3Rpb24nKS5oYXNDbGFzcygnc2NoZWR1bGUnKSl7XG4gICAgICB0aGlzLmNoZWNrSGFzaEFuZFRyaWdnZXJNb2RhbCgpO1xuICAgICAgdGhpcy5wcmVsb2FkSGlkZGVuU3BlYWtlckltYWdlcygpO1xuICAgICAgdGhpcy5jaGVja0hhc2hBbmRUcmlnZ2VyQ29ycmVjdFNjaGVkdWxlKCk7XG4gICAgfVxuICB9XG4gIHByZWxvYWRIaWRkZW5TcGVha2VySW1hZ2VzKCl7XG4gICAgJCgnKltkYXRhLWltYWdlXScpLmVhY2goZnVuY3Rpb24oaSwgZWwpe1xuICAgICAgaWYgKCQoZWwpLmRhdGEoJ2ltYWdlJykpe1xuICAgICAgICAkKFwiPGltZz5cIikuYXR0cihcInNyY1wiLCAnL2ltZy8nICsgJChlbCkuZGF0YSgnaW1hZ2UnKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBjaGVja0hhc2hBbmRUcmlnZ2VyTW9kYWwoKXtcbiAgICB2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuICAgIGlmKGhhc2ggIT09ICcjd29ya3Nob3BzJyAmJiBoYXNoICE9PSAnI3RhbGtzJyl7XG4gICAgICB0aGlzLnNjaGVkdWxlU1BlYWtlckluZm8oaGFzaCk7XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKGhhc2gpO1xuICAgIGlmKGhhc2ggPT09ICcjYW5jaG9yLWpzJyB8fCBoYXNoID09PSAnI2FuY2hvci1za2V0Y2gnKXtcbiAgICAgIHRoaXMudG9nZ2xlU2NoZWR1bGUoJ3dvcmtzaG9wcycpO1xuICAgIH1cbiAgfVxuXG4gIGNoZWNrSGFzaEFuZFRyaWdnZXJDb3JyZWN0U2NoZWR1bGUoKXtcbiAgICB2YXIgaGFzaCA9IHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuICAgIGlmKGhhc2ggPT09ICcjd29ya3Nob3BzJyl7XG4gICAgICB0aGlzLnRvZ2dsZVNjaGVkdWxlKCd3b3Jrc2hvcHMnKTtcbiAgICB9XG4gIH1cblxuICB0b2dnbGVTY2hlZHVsZShzY2hlZHVsZVR5cGUpe1xuICAgICQoJy5zY2hlZHVsZV9fbGluaycpLnJlbW92ZUNsYXNzKCdzY2hlZHVsZV9fbGluay0tc2VsZWN0ZWQnKTtcbiAgICAkKCcqW2RhdGEtc2NoZWR1bGUtdHlwZT1cIicrc2NoZWR1bGVUeXBlKydcIl0nKS5hZGRDbGFzcygnc2NoZWR1bGVfX2xpbmstLXNlbGVjdGVkJyk7XG4gICAgaWYoc2NoZWR1bGVUeXBlID09PSAndGFsa3MnKXtcbiAgICAgICQoJy5qcy1zY2hlZHVsZV9fc2Vzc2lvbnMtLXNwZWFrZXJzJykuc2hvdygpO1xuICAgICAgJCgnLmpzLXNjaGVkdWxlX19zZXNzaW9ucy0td29ya3Nob3BzJykuaGlkZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkKCcuanMtc2NoZWR1bGVfX3Nlc3Npb25zLS1zcGVha2VycycpLmhpZGUoKTtcbiAgICAgICQoJy5qcy1zY2hlZHVsZV9fc2Vzc2lvbnMtLXdvcmtzaG9wcycpLnNob3coKTtcbiAgICB9XG4gICAgJCgnLmpzLXNjaGVkdWxlX19pbmZvJykuaGlkZSgpO1xuICAgICQoJy5qcy1zY2hlZHVsZV9faW5mby0tJyArIHNjaGVkdWxlVHlwZSkuc2hvdygpO1xuICB9XG5cbiAgc2NoZWR1bGVTUGVha2VySW5mbyhzbG90KSB7XG4gICAgdmFyICRzbG90ID0gJChzbG90KTtcbiAgICB2YXIgcHhGcm9tVG9wID0gJHNsb3QucG9zaXRpb24oKS50b3A7XG4gICAgdmFyIGRhdGEgPSAkc2xvdC5kYXRhKCk7XG5cbiAgICAkKCcuanMtZGF0YS1pbWFnZScpLmF0dHIoJ3NyYycsICcvaW1nLycrIGRhdGEuaW1hZ2UpO1xuICAgICQoJy5qcy1kYXRhLW5hbWUnKS50ZXh0KGRhdGEubmFtZSk7XG4gICAgJCgnLmpzLWRhdGEtcG9zaXRpb24nKS50ZXh0KGRhdGEucG9zaXRpb24pO1xuICAgICQoJy5qcy1kYXRhLWNvbXBhbnknKS50ZXh0KGRhdGEuY29tcGFueSk7XG4gICAgJCgnLmpzLWRhdGEtdXJsJykuYXR0cignaHJlZicsIGRhdGEudXJsKTtcbiAgICAkKCcuanMtZGF0YS10d2l0dGVyJykuYXR0cignaHJlZicsICdodHRwczovL3R3aXR0ZXIuY29tLycrIGRhdGEudHdpdHRlcik7XG4gICAgaWYoZGF0YS5naXRodWIpe1xuICAgICAgJCgnLmpzLWRhdGEtZ2l0aHViJykuYXR0cignaHJlZicsICdodHRwczovL2dpdGh1Yi5jb20vJyArIGRhdGEuZ2l0aHViKTtcbiAgICAgICQoJy5qcy1kYXRhLWdpdGh1YicpLmZhZGVJbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkKCcuanMtZGF0YS1naXRodWInKS5mYWRlT3V0KCk7XG4gICAgfVxuICAgICQoJy5qcy1kYXRhLXRpdGxlJykudGV4dChkYXRhLnRpdGxlKTtcbiAgICAkKCcuanMtZGF0YS1kZXNjcmlwdGlvbicpLmh0bWwoZGF0YS5kZXNjcmlwdGlvbik7XG5cbiAgICBpZihNb2Rlcm5penIubXEoJ29ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA4NTBweCknKSkge1xuICAgICAgICAkKCdib2R5JykuYWRkQ2xhc3MoJ2xvY2stc2Nyb2xsJyk7XG4gICAgICAgICQoJy5qcy1zZWN0aW9uLWhlYWRlci1tb2RhbCcpLmh0bWwoJzxoMiBjbGFzcz1cInNlY3Rpb24taGVhZGVyX190aXRsZSBzZWN0aW9uLWhlYWRlcl9fdGl0bGUtLXdpdGhvdXRcIj5DbG9zZTwvaDI+Jyk7XG4gICAgICAgICQoJy5qcy1zZXNzaW9uLWRldGFpbHMsIC5qcy1zY2hlZHVsZV9fZnVsbC1kZXRhaWxzLCAuc2NoZWR1bGUtc2Vzc2lvbi1kZXRhaWxzLW92ZXJsYXknKS5mYWRlSW4oKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgICQoJy5qcy1zZXNzaW9uLWRldGFpbHMnKS5jc3MoJ21hcmdpbi10b3AnLCBweEZyb21Ub3ApLmZhZGVJbigpO1xuICAgIH1cbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgbmV3IFNjaGVkdWxlKCk7IiwiLy92ZW5kb3JcbmltcG9ydCBNb2Rlcm5penIgZnJvbSAnbW9kZXJuaXpyLW1xJztcblxuLy9Nb2R1bGVzXG5pbXBvcnQgc2NoZWR1bGUgZnJvbSAnLi9zY2hlZHVsZSc7XG5pbXBvcnQgbWFpbGNoaW1wRm9ybSBmcm9tICcuL21haWxjaGltcC1mb3JtJztcbmltcG9ydCBibG9nIGZyb20gJy4vYmxvZyc7XG5cbmNsYXNzIFVpQWN0aW9ucyB7XG4gIGluaXQoKSB7XG4gICAgdmFyIGZvcm0gPSAkKCcjbWMtZW1iZWRkZWQtc3Vic2NyaWJlLWZvcm0nKTtcblxuICAgICQoJy5zaWduLXVwX19zdWJtaXQnKS5vbignY2xpY2snLCBmdW5jdGlvbiAoIGV2ZW50ICkge1xuICAgICAgbWFpbGNoaW1wRm9ybS5yZWdpc3Rlcihmb3JtKTtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSk7XG5cbiAgICAkKCcuc2NoZWR1bGVfX3Nlc3Npb24sIC5qcy1zY2hlZHVsZV9fZGV0YWlscycpLm5vdCgnLnNjaGVkdWxlX19zZXNzaW9uLS1icmVhaywgLnNjaGVkdWxlX19zZXNzaW9uLS1jb21pbmctc29vbiwgLnNjaGVkdWxlX19zZXNzaW9uLS1nYXAgJykub24oJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHZhciBzbG90ID0gdGhpcztcbiAgICAgIHNjaGVkdWxlLnNjaGVkdWxlU1BlYWtlckluZm8oc2xvdCk7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xuXG4gICAgJCgnLmpzLXNlY3Rpb24taGVhZGVyLW1vZGFsJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKXtcbiAgICAgICQoJ2JvZHknKS5yZW1vdmVDbGFzcygnbG9jay1zY3JvbGwnKTtcbiAgICAgICQoJy5qcy1zY2hlZHVsZV9fZnVsbC1kZXRhaWxzLCAuc2NoZWR1bGUtc2Vzc2lvbi1kZXRhaWxzLW92ZXJsYXknKS5mYWRlT3V0KCk7XG4gICAgfSk7XG5cbiAgICAkKCcuanMtc2NoZWR1bGUtdG9nZ2xlJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKXtcbiAgICAgIHZhciBzY2hlZHVsZVR5cGUgPSAkKHRoaXMpLmRhdGEoJ3NjaGVkdWxlLXR5cGUnKTtcbiAgICAgICQoJy5qcy1zZXNzaW9uLWRldGFpbHMnKS5mYWRlT3V0KDIwMCk7XG4gICAgICBzY2hlZHVsZS50b2dnbGVTY2hlZHVsZShzY2hlZHVsZVR5cGUpO1xuICAgIH0pO1xuXG4gICAgJCgnLnNlc3Npb24tLXNwZWFrZXInKS5vbignY2xpY2snLCBmdW5jdGlvbigpe1xuICAgICAgY29uc29sZS5sb2coJ3lvJylcbiAgICAgIHZhciBtb2JpbGUgPSBNb2Rlcm5penIubXEoJ29ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA4NTBweCknKTtcblxuICAgICAgY29uc29sZS5sb2cobW9iaWxlKTtcbiAgICAgIGlmKG1vYmlsZSl7XG4gICAgICAgIHZhciBzbG90ID0gdGhpcztcbiAgICAgICAgc2NoZWR1bGUuc2NoZWR1bGVTUGVha2VySW5mbyhzbG90KTtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAkKCcuanMtc2hhcmUtYnRuJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIHBsYXRmb3JtID0gJCh0aGlzKS5kYXRhKCdwbGF0Zm9ybScpO1xuICAgICAgICB2YXIgbWVzc2FnZSA9ICQodGhpcykuZGF0YSgnbWVzc2FnZScpO1xuICAgICAgICB2YXIgdXJsID0gJCh0aGlzKS5kYXRhKCd1cmwnKTtcbiAgICAgICAgYmxvZy5vcGVuU2hhcmVQb3B1cChwbGF0Zm9ybSwgbWVzc2FnZSwgdXJsKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xuXG4gICAgJCgnLmpzLWZpbHRlci1ibG9nJykub24oJ2NsaWNrJywgZnVuY3Rpb24oKXtcbiAgICAgIHZhciBzZWxlY3RlZCA9ICQodGhpcykuZGF0YSgnZmlsdGVyJyk7XG4gICAgICB2YXIgZWwgPSB0aGlzO1xuICAgICAgYmxvZy5maWx0ZXJCeShzZWxlY3RlZCwgZWwpO1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSk7XG5cbiAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZScsIGZ1bmN0aW9uKCl7XG5cbiAgICAgIGlmKE1vZGVybml6ci5tcSgnKG1heC13aWR0aDogODUwcHgpJykpIHtcbiAgICAgICAgJCgnLmpzLXNsb3QtaW5mbycpLmNzcygnbWFyZ2luLXRvcCcsIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJCgnLmpzLXNlY3Rpb24taGVhZGVyLW1vZGFsJykuZW1wdHkoKTtcbiAgICAgIH1cblxuICAgIH0pO1xuICB9XG59XG5leHBvcnQgZGVmYXVsdCBuZXcgVWlBY3Rpb25zKCk7IiwiLyohIG1vZGVybml6ciAzLjEuMCAoQ3VzdG9tIEJ1aWxkKSB8IE1JVCAqXG4gKiBodHRwOi8vbW9kZXJuaXpyLmNvbS9kb3dubG9hZC8/LW1lZGlhcXVlcmllcy1tcS1zaGl2ICEqL1xuIWZ1bmN0aW9uKGUsdCxuKXtmdW5jdGlvbiByKGUsdCl7cmV0dXJuIHR5cGVvZiBlPT09dH1mdW5jdGlvbiBhKCl7dmFyIGUsdCxuLGEsbyxpLHM7Zm9yKHZhciBjIGluIGwpe2lmKGU9W10sdD1sW2NdLHQubmFtZSYmKGUucHVzaCh0Lm5hbWUudG9Mb3dlckNhc2UoKSksdC5vcHRpb25zJiZ0Lm9wdGlvbnMuYWxpYXNlcyYmdC5vcHRpb25zLmFsaWFzZXMubGVuZ3RoKSlmb3Iobj0wO248dC5vcHRpb25zLmFsaWFzZXMubGVuZ3RoO24rKyllLnB1c2godC5vcHRpb25zLmFsaWFzZXNbbl0udG9Mb3dlckNhc2UoKSk7Zm9yKGE9cih0LmZuLFwiZnVuY3Rpb25cIik/dC5mbigpOnQuZm4sbz0wO288ZS5sZW5ndGg7bysrKWk9ZVtvXSxzPWkuc3BsaXQoXCIuXCIpLDE9PT1zLmxlbmd0aD9Nb2Rlcm5penJbc1swXV09YTooIU1vZGVybml6cltzWzBdXXx8TW9kZXJuaXpyW3NbMF1daW5zdGFuY2VvZiBCb29sZWFufHwoTW9kZXJuaXpyW3NbMF1dPW5ldyBCb29sZWFuKE1vZGVybml6cltzWzBdXSkpLE1vZGVybml6cltzWzBdXVtzWzFdXT1hKSxkLnB1c2goKGE/XCJcIjpcIm5vLVwiKStzLmpvaW4oXCItXCIpKX19ZnVuY3Rpb24gbygpe3JldHVyblwiZnVuY3Rpb25cIiE9dHlwZW9mIHQuY3JlYXRlRWxlbWVudD90LmNyZWF0ZUVsZW1lbnQoYXJndW1lbnRzWzBdKTpmP3QuY3JlYXRlRWxlbWVudE5TLmNhbGwodCxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsYXJndW1lbnRzWzBdKTp0LmNyZWF0ZUVsZW1lbnQuYXBwbHkodCxhcmd1bWVudHMpfWZ1bmN0aW9uIGkoKXt2YXIgZT10LmJvZHk7cmV0dXJuIGV8fChlPW8oZj9cInN2Z1wiOlwiYm9keVwiKSxlLmZha2U9ITApLGV9ZnVuY3Rpb24gcyhlLG4scixhKXt2YXIgcyxsLGMsZCxmPVwibW9kZXJuaXpyXCIsbT1vKFwiZGl2XCIpLGg9aSgpO2lmKHBhcnNlSW50KHIsMTApKWZvcig7ci0tOyljPW8oXCJkaXZcIiksYy5pZD1hP2Fbcl06ZisocisxKSxtLmFwcGVuZENoaWxkKGMpO3JldHVybiBzPW8oXCJzdHlsZVwiKSxzLnR5cGU9XCJ0ZXh0L2Nzc1wiLHMuaWQ9XCJzXCIrZiwoaC5mYWtlP2g6bSkuYXBwZW5kQ2hpbGQocyksaC5hcHBlbmRDaGlsZChtKSxzLnN0eWxlU2hlZXQ/cy5zdHlsZVNoZWV0LmNzc1RleHQ9ZTpzLmFwcGVuZENoaWxkKHQuY3JlYXRlVGV4dE5vZGUoZSkpLG0uaWQ9ZixoLmZha2UmJihoLnN0eWxlLmJhY2tncm91bmQ9XCJcIixoLnN0eWxlLm92ZXJmbG93PVwiaGlkZGVuXCIsZD11LnN0eWxlLm92ZXJmbG93LHUuc3R5bGUub3ZlcmZsb3c9XCJoaWRkZW5cIix1LmFwcGVuZENoaWxkKGgpKSxsPW4obSxlKSxoLmZha2U/KGgucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChoKSx1LnN0eWxlLm92ZXJmbG93PWQsdS5vZmZzZXRIZWlnaHQpOm0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChtKSwhIWx9dmFyIGw9W10sYz17X3ZlcnNpb246XCIzLjEuMFwiLF9jb25maWc6e2NsYXNzUHJlZml4OlwiXCIsZW5hYmxlQ2xhc3NlczohMCxlbmFibGVKU0NsYXNzOiEwLHVzZVByZWZpeGVzOiEwfSxfcTpbXSxvbjpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXM7c2V0VGltZW91dChmdW5jdGlvbigpe3QobltlXSl9LDApfSxhZGRUZXN0OmZ1bmN0aW9uKGUsdCxuKXtsLnB1c2goe25hbWU6ZSxmbjp0LG9wdGlvbnM6bn0pfSxhZGRBc3luY1Rlc3Q6ZnVuY3Rpb24oZSl7bC5wdXNoKHtuYW1lOm51bGwsZm46ZX0pfX0sTW9kZXJuaXpyPWZ1bmN0aW9uKCl7fTtNb2Rlcm5penIucHJvdG90eXBlPWMsTW9kZXJuaXpyPW5ldyBNb2Rlcm5penI7dmFyIGQ9W10sdT10LmRvY3VtZW50RWxlbWVudCxmPVwic3ZnXCI9PT11Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7Znx8IWZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gbihlLHQpe3ZhciBuPWUuY3JlYXRlRWxlbWVudChcInBcIikscj1lLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXXx8ZS5kb2N1bWVudEVsZW1lbnQ7cmV0dXJuIG4uaW5uZXJIVE1MPVwieDxzdHlsZT5cIit0K1wiPC9zdHlsZT5cIixyLmluc2VydEJlZm9yZShuLmxhc3RDaGlsZCxyLmZpcnN0Q2hpbGQpfWZ1bmN0aW9uIHIoKXt2YXIgZT1FLmVsZW1lbnRzO3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiBlP2Uuc3BsaXQoXCIgXCIpOmV9ZnVuY3Rpb24gYShlLHQpe3ZhciBuPUUuZWxlbWVudHM7XCJzdHJpbmdcIiE9dHlwZW9mIG4mJihuPW4uam9pbihcIiBcIikpLFwic3RyaW5nXCIhPXR5cGVvZiBlJiYoZT1lLmpvaW4oXCIgXCIpKSxFLmVsZW1lbnRzPW4rXCIgXCIrZSxjKHQpfWZ1bmN0aW9uIG8oZSl7dmFyIHQ9eVtlW3ZdXTtyZXR1cm4gdHx8KHQ9e30sZysrLGVbdl09Zyx5W2ddPXQpLHR9ZnVuY3Rpb24gaShlLG4scil7aWYobnx8KG49dCksdSlyZXR1cm4gbi5jcmVhdGVFbGVtZW50KGUpO3J8fChyPW8obikpO3ZhciBhO3JldHVybiBhPXIuY2FjaGVbZV0/ci5jYWNoZVtlXS5jbG9uZU5vZGUoKTpwLnRlc3QoZSk/KHIuY2FjaGVbZV09ci5jcmVhdGVFbGVtKGUpKS5jbG9uZU5vZGUoKTpyLmNyZWF0ZUVsZW0oZSksIWEuY2FuSGF2ZUNoaWxkcmVufHxoLnRlc3QoZSl8fGEudGFnVXJuP2E6ci5mcmFnLmFwcGVuZENoaWxkKGEpfWZ1bmN0aW9uIHMoZSxuKXtpZihlfHwoZT10KSx1KXJldHVybiBlLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtuPW58fG8oZSk7Zm9yKHZhciBhPW4uZnJhZy5jbG9uZU5vZGUoKSxpPTAscz1yKCksbD1zLmxlbmd0aDtsPmk7aSsrKWEuY3JlYXRlRWxlbWVudChzW2ldKTtyZXR1cm4gYX1mdW5jdGlvbiBsKGUsdCl7dC5jYWNoZXx8KHQuY2FjaGU9e30sdC5jcmVhdGVFbGVtPWUuY3JlYXRlRWxlbWVudCx0LmNyZWF0ZUZyYWc9ZS5jcmVhdGVEb2N1bWVudEZyYWdtZW50LHQuZnJhZz10LmNyZWF0ZUZyYWcoKSksZS5jcmVhdGVFbGVtZW50PWZ1bmN0aW9uKG4pe3JldHVybiBFLnNoaXZNZXRob2RzP2kobixlLHQpOnQuY3JlYXRlRWxlbShuKX0sZS5jcmVhdGVEb2N1bWVudEZyYWdtZW50PUZ1bmN0aW9uKFwiaCxmXCIsXCJyZXR1cm4gZnVuY3Rpb24oKXt2YXIgbj1mLmNsb25lTm9kZSgpLGM9bi5jcmVhdGVFbGVtZW50O2guc2hpdk1ldGhvZHMmJihcIityKCkuam9pbigpLnJlcGxhY2UoL1tcXHdcXC06XSsvZyxmdW5jdGlvbihlKXtyZXR1cm4gdC5jcmVhdGVFbGVtKGUpLHQuZnJhZy5jcmVhdGVFbGVtZW50KGUpLCdjKFwiJytlKydcIiknfSkrXCIpO3JldHVybiBufVwiKShFLHQuZnJhZyl9ZnVuY3Rpb24gYyhlKXtlfHwoZT10KTt2YXIgcj1vKGUpO3JldHVybiFFLnNoaXZDU1N8fGR8fHIuaGFzQ1NTfHwoci5oYXNDU1M9ISFuKGUsXCJhcnRpY2xlLGFzaWRlLGRpYWxvZyxmaWdjYXB0aW9uLGZpZ3VyZSxmb290ZXIsaGVhZGVyLGhncm91cCxtYWluLG5hdixzZWN0aW9ue2Rpc3BsYXk6YmxvY2t9bWFya3tiYWNrZ3JvdW5kOiNGRjA7Y29sb3I6IzAwMH10ZW1wbGF0ZXtkaXNwbGF5Om5vbmV9XCIpKSx1fHxsKGUsciksZX12YXIgZCx1LGY9XCIzLjcuM1wiLG09ZS5odG1sNXx8e30saD0vXjx8Xig/OmJ1dHRvbnxtYXB8c2VsZWN0fHRleHRhcmVhfG9iamVjdHxpZnJhbWV8b3B0aW9ufG9wdGdyb3VwKSQvaSxwPS9eKD86YXxifGNvZGV8ZGl2fGZpZWxkc2V0fGgxfGgyfGgzfGg0fGg1fGg2fGl8bGFiZWx8bGl8b2x8cHxxfHNwYW58c3Ryb25nfHN0eWxlfHRhYmxlfHRib2R5fHRkfHRofHRyfHVsKSQvaSx2PVwiX2h0bWw1c2hpdlwiLGc9MCx5PXt9OyFmdW5jdGlvbigpe3RyeXt2YXIgZT10LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO2UuaW5uZXJIVE1MPVwiPHh5ej48L3h5ej5cIixkPVwiaGlkZGVuXCJpbiBlLHU9MT09ZS5jaGlsZE5vZGVzLmxlbmd0aHx8ZnVuY3Rpb24oKXt0LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO3ZhciBlPXQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO3JldHVyblwidW5kZWZpbmVkXCI9PXR5cGVvZiBlLmNsb25lTm9kZXx8XCJ1bmRlZmluZWRcIj09dHlwZW9mIGUuY3JlYXRlRG9jdW1lbnRGcmFnbWVudHx8XCJ1bmRlZmluZWRcIj09dHlwZW9mIGUuY3JlYXRlRWxlbWVudH0oKX1jYXRjaChuKXtkPSEwLHU9ITB9fSgpO3ZhciBFPXtlbGVtZW50czptLmVsZW1lbnRzfHxcImFiYnIgYXJ0aWNsZSBhc2lkZSBhdWRpbyBiZGkgY2FudmFzIGRhdGEgZGF0YWxpc3QgZGV0YWlscyBkaWFsb2cgZmlnY2FwdGlvbiBmaWd1cmUgZm9vdGVyIGhlYWRlciBoZ3JvdXAgbWFpbiBtYXJrIG1ldGVyIG5hdiBvdXRwdXQgcGljdHVyZSBwcm9ncmVzcyBzZWN0aW9uIHN1bW1hcnkgdGVtcGxhdGUgdGltZSB2aWRlb1wiLHZlcnNpb246ZixzaGl2Q1NTOm0uc2hpdkNTUyE9PSExLHN1cHBvcnRzVW5rbm93bkVsZW1lbnRzOnUsc2hpdk1ldGhvZHM6bS5zaGl2TWV0aG9kcyE9PSExLHR5cGU6XCJkZWZhdWx0XCIsc2hpdkRvY3VtZW50OmMsY3JlYXRlRWxlbWVudDppLGNyZWF0ZURvY3VtZW50RnJhZ21lbnQ6cyxhZGRFbGVtZW50czphfTtlLmh0bWw1PUUsYyh0KSxcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlJiZtb2R1bGUuZXhwb3J0cyYmKG1vZHVsZS5leHBvcnRzPUUpfShcInVuZGVmaW5lZFwiIT10eXBlb2YgZT9lOnRoaXMsdCk7dmFyIG09ZnVuY3Rpb24oKXt2YXIgdD1lLm1hdGNoTWVkaWF8fGUubXNNYXRjaE1lZGlhO3JldHVybiB0P2Z1bmN0aW9uKGUpe3ZhciBuPXQoZSk7cmV0dXJuIG4mJm4ubWF0Y2hlc3x8ITF9OmZ1bmN0aW9uKHQpe3ZhciBuPSExO3JldHVybiBzKFwiQG1lZGlhIFwiK3QrXCIgeyAjbW9kZXJuaXpyIHsgcG9zaXRpb246IGFic29sdXRlOyB9IH1cIixmdW5jdGlvbih0KXtuPVwiYWJzb2x1dGVcIj09KGUuZ2V0Q29tcHV0ZWRTdHlsZT9lLmdldENvbXB1dGVkU3R5bGUodCxudWxsKTp0LmN1cnJlbnRTdHlsZSkucG9zaXRpb259KSxufX0oKTtjLm1xPW0sTW9kZXJuaXpyLmFkZFRlc3QoXCJtZWRpYXF1ZXJpZXNcIixtKFwib25seSBhbGxcIikpLGEoKSxkZWxldGUgYy5hZGRUZXN0LGRlbGV0ZSBjLmFkZEFzeW5jVGVzdDtmb3IodmFyIGg9MDtoPE1vZGVybml6ci5fcS5sZW5ndGg7aCsrKU1vZGVybml6ci5fcVtoXSgpO2UuTW9kZXJuaXpyPU1vZGVybml6cn0od2luZG93LGRvY3VtZW50KTsiXX0=
